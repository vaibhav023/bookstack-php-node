{
  "version": 3,
  "sources": ["../../node_modules/@codemirror/legacy-modes/mode/clike.js", "../../node_modules/@codemirror/legacy-modes/mode/clojure.js", "../../node_modules/@codemirror/legacy-modes/mode/diff.js", "../../node_modules/@codemirror/legacy-modes/mode/fortran.js", "../../node_modules/@codemirror/legacy-modes/mode/go.js", "../../node_modules/@codemirror/legacy-modes/mode/haskell.js", "../../node_modules/@codemirror/legacy-modes/mode/julia.js", "../../node_modules/@codemirror/legacy-modes/mode/lua.js", "../../node_modules/@codemirror/legacy-modes/mode/mllike.js", "../../node_modules/@codemirror/legacy-modes/mode/nginx.js", "../../node_modules/@codemirror/legacy-modes/mode/octave.js", "../../node_modules/@codemirror/legacy-modes/mode/perl.js", "../../node_modules/@codemirror/legacy-modes/mode/pascal.js", "../../node_modules/@codemirror/legacy-modes/mode/powershell.js", "../../node_modules/@codemirror/legacy-modes/mode/properties.js", "../../node_modules/@codemirror/legacy-modes/mode/python.js", "../../node_modules/@codemirror/legacy-modes/mode/ruby.js", "../../node_modules/@codemirror/legacy-modes/mode/simple-mode.js", "../../node_modules/@codemirror/legacy-modes/mode/rust.js", "../../node_modules/@codemirror/legacy-modes/mode/scheme.js", "../../node_modules/@codemirror/legacy-modes/mode/shell.js", "../../node_modules/@codemirror/legacy-modes/mode/sql.js", "../../node_modules/@codemirror/legacy-modes/mode/stex.js", "../../node_modules/@codemirror/legacy-modes/mode/swift.js", "../../node_modules/@codemirror/legacy-modes/mode/toml.js", "../../node_modules/@codemirror/legacy-modes/mode/vb.js", "../../node_modules/@codemirror/legacy-modes/mode/vbscript.js", "../../node_modules/@codemirror/legacy-modes/mode/yaml.js", "../../node_modules/@ssddanbrown/codemirror-lang-smarty/dist/index.js"],
  "sourcesContent": ["function Context(indented, column, type, info, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.info = info;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type, info) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\" && type != \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, info, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\nfunction typeBefore(stream, state, pos) {\n  if (state.prevToken == \"variable\" || state.prevToken == \"type\") return true;\n  if (/\\S(?:[^- ]>|[*\\]])\\s*$|\\*$/.test(stream.string.slice(0, pos))) return true;\n  if (state.typeAtEndOfLine && stream.column() == stream.indentation()) return true;\n}\n\nfunction isTopScope(context) {\n  for (;;) {\n    if (!context || context.type == \"top\") return true;\n    if (context.type == \"}\" && context.prev.info != \"namespace\") return false;\n    context = context.prev;\n  }\n}\n\nexport function clike(parserConfig) {\n  var statementIndentUnit = parserConfig.statementIndentUnit,\n      dontAlignCalls = parserConfig.dontAlignCalls,\n      keywords = parserConfig.keywords || {},\n      types = parserConfig.types || {},\n      builtin = parserConfig.builtin || {},\n      blockKeywords = parserConfig.blockKeywords || {},\n      defKeywords = parserConfig.defKeywords || {},\n      atoms = parserConfig.atoms || {},\n      hooks = parserConfig.hooks || {},\n      multiLineStrings = parserConfig.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false,\n      indentSwitch = parserConfig.indentSwitch !== false,\n      namespaceSeparator = parserConfig.namespaceSeparator,\n      isPunctuationChar = parserConfig.isPunctuationChar || /[\\[\\]{}\\(\\),;\\:\\.]/,\n      numberStart = parserConfig.numberStart || /[\\d\\.]/,\n      number = parserConfig.number || /^(?:0x[a-f\\d]+|0b[01]+|(?:\\d+\\.?\\d*|\\.\\d+)(?:e[-+]?\\d+)?)(u|ll?|l|f)?/i,\n      isOperatorChar = parserConfig.isOperatorChar || /[+\\-*&%=<>!?|\\/]/,\n      isIdentifierChar = parserConfig.isIdentifierChar || /[\\w\\$_\\xa1-\\uffff]/,\n      // An optional function that takes a {string} token and returns true if it\n      // should be treated as a builtin.\n      isReservedIdentifier = parserConfig.isReservedIdentifier || false;\n\n  var curPunc, isDefKeyword;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (numberStart.test(ch)) {\n      stream.backUp(1)\n      if (stream.match(number)) return \"number\"\n      stream.next()\n    }\n    if (isPunctuationChar.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      while (!stream.match(/^\\/[\\/*]/, false) && stream.eat(isOperatorChar)) {}\n      return \"operator\";\n    }\n    stream.eatWhile(isIdentifierChar);\n    if (namespaceSeparator) while (stream.match(namespaceSeparator))\n      stream.eatWhile(isIdentifierChar);\n\n    var cur = stream.current();\n    if (contains(keywords, cur)) {\n      if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n      if (contains(defKeywords, cur)) isDefKeyword = true;\n      return \"keyword\";\n    }\n    if (contains(types, cur)) return \"type\";\n    if (contains(builtin, cur)\n        || (isReservedIdentifier && isReservedIdentifier(cur))) {\n      if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n      return \"builtin\";\n    }\n    if (contains(atoms, cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function maybeEOL(stream, state) {\n    if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context))\n      state.typeAtEndOfLine = typeBefore(stream, state, stream.pos)\n  }\n\n  // Interface\n\n  return {\n    name: parserConfig.name,\n    startState: function(indentUnit) {\n      return {\n        tokenize: null,\n        context: new Context(-indentUnit, 0, \"top\", null, false),\n        indented: 0,\n        startOfLine: true,\n        prevToken: null\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) { maybeEOL(stream, state); return null; }\n      curPunc = isDefKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == \";\" || curPunc == \":\" || (curPunc == \",\" && stream.match(/^\\s*(?:\\/\\/.*)?$/, false)))\n        while (state.context.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (indentStatements &&\n               (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != \";\") ||\n                (ctx.type == \"statement\" && curPunc == \"newstatement\"))) {\n        pushContext(state, stream.column(), \"statement\", stream.current());\n      }\n\n      if (style == \"variable\" &&\n          ((state.prevToken == \"def\" ||\n            (parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) &&\n             isTopScope(state.context) && stream.match(/^\\s*\\(/, false)))))\n        style = \"def\";\n\n      if (hooks.token) {\n        var result = hooks.token(stream, state, style);\n        if (result !== undefined) style = result;\n      }\n\n      if (style == \"def\" && parserConfig.styleDefs === false) style = \"variable\";\n\n      state.startOfLine = false;\n      state.prevToken = isDefKeyword ? \"def\" : style || curPunc;\n      maybeEOL(stream, state);\n      return style;\n    },\n\n    indent: function(state, textAfter, context) {\n      if (state.tokenize != tokenBase && state.tokenize != null || state.typeAtEndOfLine && isTopScope(state.context))\n        return null;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      if (parserConfig.dontIndentStatements)\n        while (ctx.type == \"statement\" && parserConfig.dontIndentStatements.test(ctx.info))\n          ctx = ctx.prev\n      if (hooks.indent) {\n        var hook = hooks.indent(state, ctx, textAfter, context.unit);\n        if (typeof hook == \"number\") return hook\n      }\n      var switchBlock = ctx.prev && ctx.prev.info == \"switch\";\n      if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {\n        while (ctx.type != \"top\" && ctx.type != \"}\") ctx = ctx.prev\n        return ctx.indented\n      }\n      if (ctx.type == \"statement\")\n        return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit || context.unit);\n      if (ctx.align && (!dontAlignCalls || ctx.type != \")\"))\n        return ctx.column + (closing ? 0 : 1);\n      if (ctx.type == \")\" && !closing)\n        return ctx.indented + (statementIndentUnit || context.unit);\n\n      return ctx.indented + (closing ? 0 : context.unit) +\n        (!closing && switchBlock && !/^(?:case|default)\\b/.test(textAfter) ? context.unit : 0);\n    },\n\n    languageData: {\n      indentOnInput: indentSwitch ? /^\\s*(?:case .*?:|default:|\\{\\}?|\\})$/ : /^\\s*[{}]$/,\n      commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n      autocomplete: Object.keys(keywords).concat(Object.keys(types)).concat(Object.keys(builtin)).concat(Object.keys(atoms)),\n      ...parserConfig.languageData\n    }\n  };\n};\n\nfunction words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nfunction contains(words, word) {\n  if (typeof words === \"function\") {\n    return words(word);\n  } else {\n    return words.propertyIsEnumerable(word);\n  }\n}\nvar cKeywords = \"auto if break case register continue return default do sizeof \" +\n    \"static else struct switch extern typedef union for goto while enum const \" +\n    \"volatile inline restrict asm fortran\";\n\n// Keywords from https://en.cppreference.com/w/cpp/keyword includes C++20.\nvar cppKeywords = \"alignas alignof and and_eq audit axiom bitand bitor catch \" +\n    \"class compl concept constexpr const_cast decltype delete dynamic_cast \" +\n    \"explicit export final friend import module mutable namespace new noexcept \" +\n    \"not not_eq operator or or_eq override private protected public \" +\n    \"reinterpret_cast requires static_assert static_cast template this \" +\n    \"thread_local throw try typeid typename using virtual xor xor_eq\";\n\nvar objCKeywords = \"bycopy byref in inout oneway out self super atomic nonatomic retain copy \" +\n    \"readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd \" +\n    \"@interface @implementation @end @protocol @encode @property @synthesize @dynamic @class \" +\n    \"@public @package @private @protected @required @optional @try @catch @finally @import \" +\n    \"@selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available\";\n\nvar objCBuiltins = \"FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION \" +\n    \" NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER \" +\n    \"NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION \" +\n    \"NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT\"\n\n// Do not use this. Use the cTypes function below. This is global just to avoid\n// excessive calls when cTypes is being called multiple times during a parse.\nvar basicCTypes = words(\"int long char short double float unsigned signed \" +\n                        \"void bool\");\n\n// Do not use this. Use the objCTypes function below. This is global just to avoid\n// excessive calls when objCTypes is being called multiple times during a parse.\nvar basicObjCTypes = words(\"SEL instancetype id Class Protocol BOOL\");\n\n// Returns true if identifier is a \"C\" type.\n// C type is defined as those that are reserved by the compiler (basicTypes),\n// and those that end in _t (Reserved by POSIX for types)\n// http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html\nfunction cTypes(identifier) {\n  return contains(basicCTypes, identifier) || /.+_t$/.test(identifier);\n}\n\n// Returns true if identifier is a \"Objective C\" type.\nfunction objCTypes(identifier) {\n  return cTypes(identifier) || contains(basicObjCTypes, identifier);\n}\n\nvar cBlockKeywords = \"case do else for if switch while struct enum union\";\nvar cDefKeywords = \"struct enum union\";\n\nfunction cppHook(stream, state) {\n  if (!state.startOfLine) return false\n  for (var ch, next = null; ch = stream.peek();) {\n    if (ch == \"\\\\\" && stream.match(/^.$/)) {\n      next = cppHook\n      break\n    } else if (ch == \"/\" && stream.match(/^\\/[\\/\\*]/, false)) {\n      break\n    }\n    stream.next()\n  }\n  state.tokenize = next\n  return \"meta\"\n}\n\nfunction pointerHook(_stream, state) {\n  if (state.prevToken == \"type\") return \"type\";\n  return false;\n}\n\n// For C and C++ (and ObjC): identifiers starting with __\n// or _ followed by a capital letter are reserved for the compiler.\nfunction cIsReservedIdentifier(token) {\n  if (!token || token.length < 2) return false;\n  if (token[0] != '_') return false;\n  return (token[1] == '_') || (token[1] !== token[1].toLowerCase());\n}\n\nfunction cpp14Literal(stream) {\n  stream.eatWhile(/[\\w\\.']/);\n  return \"number\";\n}\n\nfunction cpp11StringHook(stream, state) {\n  stream.backUp(1);\n  // Raw strings.\n  if (stream.match(/^(?:R|u8R|uR|UR|LR)/)) {\n    var match = stream.match(/^\"([^\\s\\\\()]{0,16})\\(/);\n    if (!match) {\n      return false;\n    }\n    state.cpp11RawStringDelim = match[1];\n    state.tokenize = tokenRawString;\n    return tokenRawString(stream, state);\n  }\n  // Unicode strings/chars.\n  if (stream.match(/^(?:u8|u|U|L)/)) {\n    if (stream.match(/^[\"']/, /* eat */ false)) {\n      return \"string\";\n    }\n    return false;\n  }\n  // Ignore this hook.\n  stream.next();\n  return false;\n}\n\nfunction cppLooksLikeConstructor(word) {\n  var lastTwo = /(\\w+)::~?(\\w+)$/.exec(word);\n  return lastTwo && lastTwo[1] == lastTwo[2];\n}\n\n// C#-style strings where \"\" escapes a quote.\nfunction tokenAtString(stream, state) {\n  var next;\n  while ((next = stream.next()) != null) {\n    if (next == '\"' && !stream.eat('\"')) {\n      state.tokenize = null;\n      break;\n    }\n  }\n  return \"string\";\n}\n\n// C++11 raw string literal is <prefix>\"<delim>( anything )<delim>\", where\n// <delim> can be a string up to 16 characters long.\nfunction tokenRawString(stream, state) {\n  // Escape characters that have special regex meanings.\n  var delim = state.cpp11RawStringDelim.replace(/[^\\w\\s]/g, '\\\\$&');\n  var match = stream.match(new RegExp(\".*?\\\\)\" + delim + '\"'));\n  if (match)\n    state.tokenize = null;\n  else\n    stream.skipToEnd();\n  return \"string\";\n}\n\nexport const c = clike({\n  name: \"c\",\n  keywords: words(cKeywords),\n  types: cTypes,\n  blockKeywords: words(cBlockKeywords),\n  defKeywords: words(cDefKeywords),\n  typeFirstDefinitions: true,\n  atoms: words(\"NULL true false\"),\n  isReservedIdentifier: cIsReservedIdentifier,\n  hooks: {\n    \"#\": cppHook,\n    \"*\": pointerHook,\n  }\n})\n\nexport const cpp = clike({\n  name: \"cpp\",\n  keywords: words(cKeywords + \" \" + cppKeywords),\n  types: cTypes,\n  blockKeywords: words(cBlockKeywords + \" class try catch\"),\n  defKeywords: words(cDefKeywords + \" class namespace\"),\n  typeFirstDefinitions: true,\n  atoms: words(\"true false NULL nullptr\"),\n  dontIndentStatements: /^template$/,\n  isIdentifierChar: /[\\w\\$_~\\xa1-\\uffff]/,\n  isReservedIdentifier: cIsReservedIdentifier,\n  hooks: {\n    \"#\": cppHook,\n    \"*\": pointerHook,\n    \"u\": cpp11StringHook,\n    \"U\": cpp11StringHook,\n    \"L\": cpp11StringHook,\n    \"R\": cpp11StringHook,\n    \"0\": cpp14Literal,\n    \"1\": cpp14Literal,\n    \"2\": cpp14Literal,\n    \"3\": cpp14Literal,\n    \"4\": cpp14Literal,\n    \"5\": cpp14Literal,\n    \"6\": cpp14Literal,\n    \"7\": cpp14Literal,\n    \"8\": cpp14Literal,\n    \"9\": cpp14Literal,\n    token: function(stream, state, style) {\n      if (style == \"variable\" && stream.peek() == \"(\" &&\n          (state.prevToken == \";\" || state.prevToken == null ||\n           state.prevToken == \"}\") &&\n          cppLooksLikeConstructor(stream.current()))\n        return \"def\";\n    }\n  },\n  namespaceSeparator: \"::\"\n});\n\nexport const java = clike({\n  name: \"java\",\n  keywords: words(\"abstract assert break case catch class const continue default \" +\n                  \"do else enum extends final finally for goto if implements import \" +\n                  \"instanceof interface native new package private protected public \" +\n                  \"return static strictfp super switch synchronized this throw throws transient \" +\n                  \"try volatile while @interface\"),\n  types: words(\"var byte short int long float double boolean char void Boolean Byte Character Double Float \" +\n               \"Integer Long Number Object Short String StringBuffer StringBuilder Void\"),\n  blockKeywords: words(\"catch class do else finally for if switch try while\"),\n  defKeywords: words(\"class interface enum @interface\"),\n  typeFirstDefinitions: true,\n  atoms: words(\"true false null\"),\n  number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+\\.?\\d*|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n  hooks: {\n    \"@\": function(stream) {\n      // Don't match the @interface keyword.\n      if (stream.match('interface', false)) return false;\n\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    },\n    '\"': function(stream, state) {\n      if (!stream.match(/\"\"$/)) return false;\n      state.tokenize = tokenTripleString;\n      return state.tokenize(stream, state);\n    }\n  }\n})\n\nexport const csharp = clike({\n  name: \"csharp\",\n  keywords: words(\"abstract as async await base break case catch checked class const continue\" +\n                  \" default delegate do else enum event explicit extern finally fixed for\" +\n                  \" foreach goto if implicit in init interface internal is lock namespace new\" +\n                  \" operator out override params private protected public readonly record ref required return sealed\" +\n                  \" sizeof stackalloc static struct switch this throw try typeof unchecked\" +\n                  \" unsafe using virtual void volatile while add alias ascending descending dynamic from get\" +\n                  \" global group into join let orderby partial remove select set value var yield\"),\n  types: words(\"Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func\" +\n               \" Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32\" +\n               \" UInt64 bool byte char decimal double short int long object\"  +\n               \" sbyte float string ushort uint ulong\"),\n  blockKeywords: words(\"catch class do else finally for foreach if struct switch try while\"),\n  defKeywords: words(\"class interface namespace record struct var\"),\n  typeFirstDefinitions: true,\n  atoms: words(\"true false null\"),\n  hooks: {\n    \"@\": function(stream, state) {\n      if (stream.eat('\"')) {\n        state.tokenize = tokenAtString;\n        return tokenAtString(stream, state);\n      }\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    }\n  }\n});\n\nfunction tokenTripleString(stream, state) {\n  var escaped = false;\n  while (!stream.eol()) {\n    if (!escaped && stream.match('\"\"\"')) {\n      state.tokenize = null;\n      break;\n    }\n    escaped = stream.next() == \"\\\\\" && !escaped;\n  }\n  return \"string\";\n}\n\nfunction tokenNestedComment(depth) {\n  return function (stream, state) {\n    var ch\n    while (ch = stream.next()) {\n      if (ch == \"*\" && stream.eat(\"/\")) {\n        if (depth == 1) {\n          state.tokenize = null\n          break\n        } else {\n          state.tokenize = tokenNestedComment(depth - 1)\n          return state.tokenize(stream, state)\n        }\n      } else if (ch == \"/\" && stream.eat(\"*\")) {\n        state.tokenize = tokenNestedComment(depth + 1)\n        return state.tokenize(stream, state)\n      }\n    }\n    return \"comment\"\n  }\n}\n\nexport const scala = clike({\n  name: \"scala\",\n  keywords: words(\n    /* scala */\n    \"abstract case catch class def do else extends final finally for forSome if \" +\n      \"implicit import lazy match new null object override package private protected return \" +\n      \"sealed super this throw trait try type val var while with yield _ \" +\n\n    /* package scala */\n    \"assert assume require print println printf readLine readBoolean readByte readShort \" +\n      \"readChar readInt readLong readFloat readDouble\"\n  ),\n  types: words(\n    \"AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either \" +\n      \"Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable \" +\n      \"Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering \" +\n      \"Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder \" +\n      \"StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector \" +\n\n    /* package java.lang */\n    \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" +\n      \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" +\n      \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" +\n      \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void\"\n  ),\n  multiLineStrings: true,\n  blockKeywords: words(\"catch class enum do else finally for forSome if match switch try while\"),\n  defKeywords: words(\"class enum def object package trait type val var\"),\n  atoms: words(\"true false null\"),\n  indentStatements: false,\n  indentSwitch: false,\n  isOperatorChar: /[+\\-*&%=<>!?|\\/#:@]/,\n  hooks: {\n    \"@\": function(stream) {\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    },\n    '\"': function(stream, state) {\n      if (!stream.match('\"\"')) return false;\n      state.tokenize = tokenTripleString;\n      return state.tokenize(stream, state);\n    },\n    \"'\": function(stream) {\n      if (stream.match(/^(\\\\[^'\\s]+|[^\\\\'])'/)) return \"character\"\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      return \"atom\";\n    },\n    \"=\": function(stream, state) {\n      var cx = state.context\n      if (cx.type == \"}\" && cx.align && stream.eat(\">\")) {\n        state.context = new Context(cx.indented, cx.column, cx.type, cx.info, null, cx.prev)\n        return \"operator\"\n      } else {\n        return false\n      }\n    },\n\n    \"/\": function(stream, state) {\n      if (!stream.eat(\"*\")) return false\n      state.tokenize = tokenNestedComment(1)\n      return state.tokenize(stream, state)\n    }\n  },\n  languageData: {\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', '\"\"\"']}\n  }\n});\n\nfunction tokenKotlinString(tripleString){\n  return function (stream, state) {\n    var escaped = false, next, end = false;\n    while (!stream.eol()) {\n      if (!tripleString && !escaped && stream.match('\"') ) {end = true; break;}\n      if (tripleString && stream.match('\"\"\"')) {end = true; break;}\n      next = stream.next();\n      if(!escaped && next == \"$\" && stream.match('{'))\n        stream.skipTo(\"}\");\n      escaped = !escaped && next == \"\\\\\" && !tripleString;\n    }\n    if (end || !tripleString)\n      state.tokenize = null;\n    return \"string\";\n  }\n}\n\nexport const kotlin = clike({\n  name: \"kotlin\",\n  keywords: words(\n    /*keywords*/\n    \"package as typealias class interface this super val operator \" +\n      \"var fun for is in This throw return annotation \" +\n      \"break continue object if else while do try when !in !is as? \" +\n\n    /*soft keywords*/\n    \"file import where by get set abstract enum open inner override private public internal \" +\n      \"protected catch finally out final vararg reified dynamic companion constructor init \" +\n      \"sealed field property receiver param sparam lateinit data inline noinline tailrec \" +\n      \"external annotation crossinline const operator infix suspend actual expect setparam\"\n  ),\n  types: words(\n    /* package java.lang */\n    \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" +\n      \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" +\n      \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" +\n      \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray \" +\n      \"ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy \" +\n      \"LazyThreadSafetyMode LongArray Nothing ShortArray Unit\"\n  ),\n  intendSwitch: false,\n  indentStatements: false,\n  multiLineStrings: true,\n  number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+(\\.\\d+)?|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n  blockKeywords: words(\"catch class do else finally for if where try while enum\"),\n  defKeywords: words(\"class val var object interface fun\"),\n  atoms: words(\"true false null this\"),\n  hooks: {\n    \"@\": function(stream) {\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    },\n    '*': function(_stream, state) {\n      return state.prevToken == '.' ? 'variable' : 'operator';\n    },\n    '\"': function(stream, state) {\n      state.tokenize = tokenKotlinString(stream.match('\"\"'));\n      return state.tokenize(stream, state);\n    },\n    \"/\": function(stream, state) {\n      if (!stream.eat(\"*\")) return false;\n      state.tokenize = tokenNestedComment(1);\n      return state.tokenize(stream, state)\n    },\n    indent: function(state, ctx, textAfter, indentUnit) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      if ((state.prevToken == \"}\" || state.prevToken == \")\") && textAfter == \"\")\n        return state.indented;\n      if ((state.prevToken == \"operator\" && textAfter != \"}\" && state.context.type != \"}\") ||\n          state.prevToken == \"variable\" && firstChar == \".\" ||\n          (state.prevToken == \"}\" || state.prevToken == \")\") && firstChar == \".\")\n        return indentUnit * 2 + ctx.indented;\n      if (ctx.align && ctx.type == \"}\")\n        return ctx.indented + (state.context.type == (textAfter || \"\").charAt(0) ? 0 : indentUnit);\n    }\n  },\n  languageData: {\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', '\"\"\"']}\n  }\n});\n\nexport const shader = clike({\n  name: \"shader\",\n  keywords: words(\"sampler1D sampler2D sampler3D samplerCube \" +\n                  \"sampler1DShadow sampler2DShadow \" +\n                  \"const attribute uniform varying \" +\n                  \"break continue discard return \" +\n                  \"for while do if else struct \" +\n                  \"in out inout\"),\n  types: words(\"float int bool void \" +\n               \"vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 \" +\n               \"mat2 mat3 mat4\"),\n  blockKeywords: words(\"for while do if else struct\"),\n  builtin: words(\"radians degrees sin cos tan asin acos atan \" +\n                 \"pow exp log exp2 sqrt inversesqrt \" +\n                 \"abs sign floor ceil fract mod min max clamp mix step smoothstep \" +\n                 \"length distance dot cross normalize ftransform faceforward \" +\n                 \"reflect refract matrixCompMult \" +\n                 \"lessThan lessThanEqual greaterThan greaterThanEqual \" +\n                 \"equal notEqual any all not \" +\n                 \"texture1D texture1DProj texture1DLod texture1DProjLod \" +\n                 \"texture2D texture2DProj texture2DLod texture2DProjLod \" +\n                 \"texture3D texture3DProj texture3DLod texture3DProjLod \" +\n                 \"textureCube textureCubeLod \" +\n                 \"shadow1D shadow2D shadow1DProj shadow2DProj \" +\n                 \"shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod \" +\n                 \"dFdx dFdy fwidth \" +\n                 \"noise1 noise2 noise3 noise4\"),\n  atoms: words(\"true false \" +\n               \"gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex \" +\n               \"gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 \" +\n               \"gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 \" +\n               \"gl_FogCoord gl_PointCoord \" +\n               \"gl_Position gl_PointSize gl_ClipVertex \" +\n               \"gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor \" +\n               \"gl_TexCoord gl_FogFragCoord \" +\n               \"gl_FragCoord gl_FrontFacing \" +\n               \"gl_FragData gl_FragDepth \" +\n               \"gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix \" +\n               \"gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse \" +\n               \"gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse \" +\n               \"gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose \" +\n               \"gl_ProjectionMatrixInverseTranspose \" +\n               \"gl_ModelViewProjectionMatrixInverseTranspose \" +\n               \"gl_TextureMatrixInverseTranspose \" +\n               \"gl_NormalScale gl_DepthRange gl_ClipPlane \" +\n               \"gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel \" +\n               \"gl_FrontLightModelProduct gl_BackLightModelProduct \" +\n               \"gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ \" +\n               \"gl_FogParameters \" +\n               \"gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords \" +\n               \"gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats \" +\n               \"gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits \" +\n               \"gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits \" +\n               \"gl_MaxDrawBuffers\"),\n  indentSwitch: false,\n  hooks: {\"#\": cppHook}\n})\n\nexport const nesC = clike({\n  name: \"nesc\",\n  keywords: words(cKeywords + \" as atomic async call command component components configuration event generic \" +\n                  \"implementation includes interface module new norace nx_struct nx_union post provides \" +\n                  \"signal task uses abstract extends\"),\n  types: cTypes,\n  blockKeywords: words(cBlockKeywords),\n  atoms: words(\"null true false\"),\n  hooks: {\"#\": cppHook}\n})\n\nexport const objectiveC = clike({\n  name: \"objectivec\",\n  keywords: words(cKeywords + \" \" + objCKeywords),\n  types: objCTypes,\n  builtin: words(objCBuiltins),\n  blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized\"),\n  defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class\"),\n  dontIndentStatements: /^@.*$/,\n  typeFirstDefinitions: true,\n  atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n  isReservedIdentifier: cIsReservedIdentifier,\n  hooks: {\n    \"#\": cppHook,\n    \"*\": pointerHook,\n  }\n})\n\nexport const objectiveCpp = clike({\n  name: \"objectivecpp\",\n  keywords: words(cKeywords + \" \" + objCKeywords + \" \" + cppKeywords),\n  types: objCTypes,\n  builtin: words(objCBuiltins),\n  blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch\"),\n  defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class class namespace\"),\n  dontIndentStatements: /^@.*$|^template$/,\n  typeFirstDefinitions: true,\n  atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n  isReservedIdentifier: cIsReservedIdentifier,\n  hooks: {\n    \"#\": cppHook,\n    \"*\": pointerHook,\n    \"u\": cpp11StringHook,\n    \"U\": cpp11StringHook,\n    \"L\": cpp11StringHook,\n    \"R\": cpp11StringHook,\n    \"0\": cpp14Literal,\n    \"1\": cpp14Literal,\n    \"2\": cpp14Literal,\n    \"3\": cpp14Literal,\n    \"4\": cpp14Literal,\n    \"5\": cpp14Literal,\n    \"6\": cpp14Literal,\n    \"7\": cpp14Literal,\n    \"8\": cpp14Literal,\n    \"9\": cpp14Literal,\n    token: function(stream, state, style) {\n      if (style == \"variable\" && stream.peek() == \"(\" &&\n          (state.prevToken == \";\" || state.prevToken == null ||\n           state.prevToken == \"}\") &&\n          cppLooksLikeConstructor(stream.current()))\n        return \"def\";\n    }\n  },\n  namespaceSeparator: \"::\"\n})\n\nexport const squirrel = clike({\n  name: \"squirrel\",\n  keywords: words(\"base break clone continue const default delete enum extends function in class\" +\n                  \" foreach local resume return this throw typeof yield constructor instanceof static\"),\n  types: cTypes,\n  blockKeywords: words(\"case catch class else for foreach if switch try while\"),\n  defKeywords: words(\"function local class\"),\n  typeFirstDefinitions: true,\n  atoms: words(\"true false null\"),\n  hooks: {\"#\": cppHook}\n})\n\n// Ceylon Strings need to deal with interpolation\nvar stringTokenizer = null;\nfunction tokenCeylonString(type) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while (!stream.eol()) {\n      if (!escaped && stream.match('\"') &&\n          (type == \"single\" || stream.match('\"\"'))) {\n        end = true;\n        break;\n      }\n      if (!escaped && stream.match('``')) {\n        stringTokenizer = tokenCeylonString(type);\n        end = true;\n        break;\n      }\n      next = stream.next();\n      escaped = type == \"single\" && !escaped && next == \"\\\\\";\n    }\n    if (end)\n      state.tokenize = null;\n    return \"string\";\n  }\n}\n\nexport const ceylon = clike({\n  name: \"ceylon\",\n  keywords: words(\"abstracts alias assembly assert assign break case catch class continue dynamic else\" +\n                  \" exists extends finally for function given if import in interface is let module new\" +\n                  \" nonempty object of out outer package return satisfies super switch then this throw\" +\n                  \" try value void while\"),\n  types: function(word) {\n    // In Ceylon all identifiers that start with an uppercase are types\n    var first = word.charAt(0);\n    return (first === first.toUpperCase() && first !== first.toLowerCase());\n  },\n  blockKeywords: words(\"case catch class dynamic else finally for function if interface module new object switch try while\"),\n  defKeywords: words(\"class dynamic function interface module object package value\"),\n  builtin: words(\"abstract actual aliased annotation by default deprecated doc final formal late license\" +\n                 \" native optional sealed see serializable shared suppressWarnings tagged throws variable\"),\n  isPunctuationChar: /[\\[\\]{}\\(\\),;\\:\\.`]/,\n  isOperatorChar: /[+\\-*&%=<>!?|^~:\\/]/,\n  numberStart: /[\\d#$]/,\n  number: /^(?:#[\\da-fA-F_]+|\\$[01_]+|[\\d_]+[kMGTPmunpf]?|[\\d_]+\\.[\\d_]+(?:[eE][-+]?\\d+|[kMGTPmunpf]|)|)/i,\n  multiLineStrings: true,\n  typeFirstDefinitions: true,\n  atoms: words(\"true false null larger smaller equal empty finished\"),\n  indentSwitch: false,\n  styleDefs: false,\n  hooks: {\n    \"@\": function(stream) {\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    },\n    '\"': function(stream, state) {\n      state.tokenize = tokenCeylonString(stream.match('\"\"') ? \"triple\" : \"single\");\n      return state.tokenize(stream, state);\n    },\n    '`': function(stream, state) {\n      if (!stringTokenizer || !stream.match('`')) return false;\n      state.tokenize = stringTokenizer;\n      stringTokenizer = null;\n      return state.tokenize(stream, state);\n    },\n    \"'\": function(stream) {\n      if (stream.match(/^(\\\\[^'\\s]+|[^\\\\'])'/)) return \"string.special\"\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      return \"atom\";\n    },\n    token: function(_stream, state, style) {\n      if ((style == \"variable\" || style == \"type\") &&\n          state.prevToken == \".\") {\n        return \"variableName.special\";\n      }\n    }\n  },\n  languageData: {\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', '\"\"\"']}\n  }\n})\n\nfunction pushInterpolationStack(state) {\n  (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);\n}\n\nfunction popInterpolationStack(state) {\n  return (state.interpolationStack || (state.interpolationStack = [])).pop();\n}\n\nfunction sizeInterpolationStack(state) {\n  return state.interpolationStack ? state.interpolationStack.length : 0;\n}\n\nfunction tokenDartString(quote, stream, state, raw) {\n  var tripleQuoted = false;\n  if (stream.eat(quote)) {\n    if (stream.eat(quote)) tripleQuoted = true;\n    else return \"string\"; //empty string\n  }\n  function tokenStringHelper(stream, state) {\n    var escaped = false;\n    while (!stream.eol()) {\n      if (!raw && !escaped && stream.peek() == \"$\") {\n        pushInterpolationStack(state);\n        state.tokenize = tokenInterpolation;\n        return \"string\";\n      }\n      var next = stream.next();\n      if (next == quote && !escaped && (!tripleQuoted || stream.match(quote + quote))) {\n        state.tokenize = null;\n        break;\n      }\n      escaped = !raw && !escaped && next == \"\\\\\";\n    }\n    return \"string\";\n  }\n  state.tokenize = tokenStringHelper;\n  return tokenStringHelper(stream, state);\n}\n\nfunction tokenInterpolation(stream, state) {\n  stream.eat(\"$\");\n  if (stream.eat(\"{\")) {\n    // let clike handle the content of ${...},\n    // we take over again when \"}\" appears (see hooks).\n    state.tokenize = null;\n  } else {\n    state.tokenize = tokenInterpolationIdentifier;\n  }\n  return null;\n}\n\nfunction tokenInterpolationIdentifier(stream, state) {\n  stream.eatWhile(/[\\w_]/);\n  state.tokenize = popInterpolationStack(state);\n  return \"variable\";\n}\n\nexport const dart = clike({\n  name: \"dart\",\n  keywords: words(\"this super static final const abstract class extends external factory \" +\n                  \"implements mixin get native set typedef with enum throw rethrow assert break case \" +\n                  \"continue default in return new deferred async await covariant try catch finally \" +\n                  \"do else for if switch while import library export part of show hide is as extension \" +\n                  \"on yield late required sealed base interface when inline\"),\n  blockKeywords: words(\"try catch finally do else for if switch while\"),\n  builtin: words(\"void bool num int double dynamic var String Null Never\"),\n  atoms: words(\"true false null\"),\n  hooks: {\n    \"@\": function(stream) {\n      stream.eatWhile(/[\\w\\$_\\.]/);\n      return \"meta\";\n    },\n\n    // custom string handling to deal with triple-quoted strings and string interpolation\n    \"'\": function(stream, state) {\n      return tokenDartString(\"'\", stream, state, false);\n    },\n    \"\\\"\": function(stream, state) {\n      return tokenDartString(\"\\\"\", stream, state, false);\n    },\n    \"r\": function(stream, state) {\n      var peek = stream.peek();\n      if (peek == \"'\" || peek == \"\\\"\") {\n        return tokenDartString(stream.next(), stream, state, true);\n      }\n      return false;\n    },\n\n    \"}\": function(_stream, state) {\n      // \"}\" is end of interpolation, if interpolation stack is non-empty\n      if (sizeInterpolationStack(state) > 0) {\n        state.tokenize = popInterpolationStack(state);\n        return null;\n      }\n      return false;\n    },\n\n    \"/\": function(stream, state) {\n      if (!stream.eat(\"*\")) return false\n      state.tokenize = tokenNestedComment(1)\n      return state.tokenize(stream, state)\n    },\n    token: function(stream, _, style) {\n      if (style == \"variable\") {\n        // Assume uppercase symbols are classes\n        var isUpper = RegExp('^[_$]*[A-Z][a-zA-Z0-9_$]*$','g');\n        if (isUpper.test(stream.current())) {\n          return 'type';\n        }\n      }\n    }\n  }\n})\n", "var atoms = [\"false\", \"nil\", \"true\"];\nvar specialForms = [\".\", \"catch\", \"def\", \"do\", \"if\", \"monitor-enter\",\n                    \"monitor-exit\", \"new\", \"quote\", \"recur\", \"set!\", \"throw\", \"try\", \"var\"];\nvar coreSymbols = [\"*\", \"*'\", \"*1\", \"*2\", \"*3\", \"*agent*\",\n                   \"*allow-unresolved-vars*\", \"*assert*\", \"*clojure-version*\",\n                   \"*command-line-args*\", \"*compile-files*\", \"*compile-path*\",\n                   \"*compiler-options*\", \"*data-readers*\", \"*default-data-reader-fn*\", \"*e\",\n                   \"*err*\", \"*file*\", \"*flush-on-newline*\", \"*fn-loader*\", \"*in*\",\n                   \"*math-context*\", \"*ns*\", \"*out*\", \"*print-dup*\", \"*print-length*\",\n                   \"*print-level*\", \"*print-meta*\", \"*print-namespace-maps*\",\n                   \"*print-readably*\", \"*read-eval*\", \"*reader-resolver*\", \"*source-path*\",\n                   \"*suppress-read*\", \"*unchecked-math*\", \"*use-context-classloader*\",\n                   \"*verbose-defrecords*\", \"*warn-on-reflection*\", \"+\", \"+'\", \"-\", \"-'\",\n                   \"->\", \"->>\", \"->ArrayChunk\", \"->Eduction\", \"->Vec\", \"->VecNode\",\n                   \"->VecSeq\", \"-cache-protocol-fn\", \"-reset-methods\", \"..\", \"/\", \"<\", \"<=\",\n                   \"=\", \"==\", \">\", \">=\", \"EMPTY-NODE\", \"Inst\", \"StackTraceElement->vec\",\n                   \"Throwable->map\", \"accessor\", \"aclone\", \"add-classpath\", \"add-watch\",\n                   \"agent\", \"agent-error\", \"agent-errors\", \"aget\", \"alength\", \"alias\",\n                   \"all-ns\", \"alter\", \"alter-meta!\", \"alter-var-root\", \"amap\", \"ancestors\",\n                   \"and\", \"any?\", \"apply\", \"areduce\", \"array-map\", \"as->\", \"aset\",\n                   \"aset-boolean\", \"aset-byte\", \"aset-char\", \"aset-double\", \"aset-float\",\n                   \"aset-int\", \"aset-long\", \"aset-short\", \"assert\", \"assoc\", \"assoc!\",\n                   \"assoc-in\", \"associative?\", \"atom\", \"await\", \"await-for\", \"await1\",\n                   \"bases\", \"bean\", \"bigdec\", \"bigint\", \"biginteger\", \"binding\", \"bit-and\",\n                   \"bit-and-not\", \"bit-clear\", \"bit-flip\", \"bit-not\", \"bit-or\", \"bit-set\",\n                   \"bit-shift-left\", \"bit-shift-right\", \"bit-test\", \"bit-xor\", \"boolean\",\n                   \"boolean-array\", \"boolean?\", \"booleans\", \"bound-fn\", \"bound-fn*\",\n                   \"bound?\", \"bounded-count\", \"butlast\", \"byte\", \"byte-array\", \"bytes\",\n                   \"bytes?\", \"case\", \"cast\", \"cat\", \"char\", \"char-array\",\n                   \"char-escape-string\", \"char-name-string\", \"char?\", \"chars\", \"chunk\",\n                   \"chunk-append\", \"chunk-buffer\", \"chunk-cons\", \"chunk-first\", \"chunk-next\",\n                   \"chunk-rest\", \"chunked-seq?\", \"class\", \"class?\", \"clear-agent-errors\",\n                   \"clojure-version\", \"coll?\", \"comment\", \"commute\", \"comp\", \"comparator\",\n                   \"compare\", \"compare-and-set!\", \"compile\", \"complement\", \"completing\",\n                   \"concat\", \"cond\", \"cond->\", \"cond->>\", \"condp\", \"conj\", \"conj!\", \"cons\",\n                   \"constantly\", \"construct-proxy\", \"contains?\", \"count\", \"counted?\",\n                   \"create-ns\", \"create-struct\", \"cycle\", \"dec\", \"dec'\", \"decimal?\",\n                   \"declare\", \"dedupe\", \"default-data-readers\", \"definline\", \"definterface\",\n                   \"defmacro\", \"defmethod\", \"defmulti\", \"defn\", \"defn-\", \"defonce\",\n                   \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\", \"delay\", \"delay?\",\n                   \"deliver\", \"denominator\", \"deref\", \"derive\", \"descendants\", \"destructure\",\n                   \"disj\", \"disj!\", \"dissoc\", \"dissoc!\", \"distinct\", \"distinct?\", \"doall\",\n                   \"dorun\", \"doseq\", \"dosync\", \"dotimes\", \"doto\", \"double\", \"double-array\",\n                   \"double?\", \"doubles\", \"drop\", \"drop-last\", \"drop-while\", \"eduction\",\n                   \"empty\", \"empty?\", \"ensure\", \"ensure-reduced\", \"enumeration-seq\",\n                   \"error-handler\", \"error-mode\", \"eval\", \"even?\", \"every-pred\", \"every?\",\n                   \"ex-data\", \"ex-info\", \"extend\", \"extend-protocol\", \"extend-type\",\n                   \"extenders\", \"extends?\", \"false?\", \"ffirst\", \"file-seq\", \"filter\",\n                   \"filterv\", \"find\", \"find-keyword\", \"find-ns\", \"find-protocol-impl\",\n                   \"find-protocol-method\", \"find-var\", \"first\", \"flatten\", \"float\",\n                   \"float-array\", \"float?\", \"floats\", \"flush\", \"fn\", \"fn?\", \"fnext\", \"fnil\",\n                   \"for\", \"force\", \"format\", \"frequencies\", \"future\", \"future-call\",\n                   \"future-cancel\", \"future-cancelled?\", \"future-done?\", \"future?\",\n                   \"gen-class\", \"gen-interface\", \"gensym\", \"get\", \"get-in\", \"get-method\",\n                   \"get-proxy-class\", \"get-thread-bindings\", \"get-validator\", \"group-by\",\n                   \"halt-when\", \"hash\", \"hash-combine\", \"hash-map\", \"hash-ordered-coll\",\n                   \"hash-set\", \"hash-unordered-coll\", \"ident?\", \"identical?\", \"identity\",\n                   \"if-let\", \"if-not\", \"if-some\", \"ifn?\", \"import\", \"in-ns\", \"inc\", \"inc'\",\n                   \"indexed?\", \"init-proxy\", \"inst-ms\", \"inst-ms*\", \"inst?\", \"instance?\",\n                   \"int\", \"int-array\", \"int?\", \"integer?\", \"interleave\", \"intern\",\n                   \"interpose\", \"into\", \"into-array\", \"ints\", \"io!\", \"isa?\", \"iterate\",\n                   \"iterator-seq\", \"juxt\", \"keep\", \"keep-indexed\", \"key\", \"keys\", \"keyword\",\n                   \"keyword?\", \"last\", \"lazy-cat\", \"lazy-seq\", \"let\", \"letfn\", \"line-seq\",\n                   \"list\", \"list*\", \"list?\", \"load\", \"load-file\", \"load-reader\",\n                   \"load-string\", \"loaded-libs\", \"locking\", \"long\", \"long-array\", \"longs\",\n                   \"loop\", \"macroexpand\", \"macroexpand-1\", \"make-array\", \"make-hierarchy\",\n                   \"map\", \"map-entry?\", \"map-indexed\", \"map?\", \"mapcat\", \"mapv\", \"max\",\n                   \"max-key\", \"memfn\", \"memoize\", \"merge\", \"merge-with\", \"meta\",\n                   \"method-sig\", \"methods\", \"min\", \"min-key\", \"mix-collection-hash\", \"mod\",\n                   \"munge\", \"name\", \"namespace\", \"namespace-munge\", \"nat-int?\", \"neg-int?\",\n                   \"neg?\", \"newline\", \"next\", \"nfirst\", \"nil?\", \"nnext\", \"not\", \"not-any?\",\n                   \"not-empty\", \"not-every?\", \"not=\", \"ns\", \"ns-aliases\", \"ns-imports\",\n                   \"ns-interns\", \"ns-map\", \"ns-name\", \"ns-publics\", \"ns-refers\",\n                   \"ns-resolve\", \"ns-unalias\", \"ns-unmap\", \"nth\", \"nthnext\", \"nthrest\",\n                   \"num\", \"number?\", \"numerator\", \"object-array\", \"odd?\", \"or\", \"parents\",\n                   \"partial\", \"partition\", \"partition-all\", \"partition-by\", \"pcalls\", \"peek\",\n                   \"persistent!\", \"pmap\", \"pop\", \"pop!\", \"pop-thread-bindings\", \"pos-int?\",\n                   \"pos?\", \"pr\", \"pr-str\", \"prefer-method\", \"prefers\",\n                   \"primitives-classnames\", \"print\", \"print-ctor\", \"print-dup\",\n                   \"print-method\", \"print-simple\", \"print-str\", \"printf\", \"println\",\n                   \"println-str\", \"prn\", \"prn-str\", \"promise\", \"proxy\",\n                   \"proxy-call-with-super\", \"proxy-mappings\", \"proxy-name\", \"proxy-super\",\n                   \"push-thread-bindings\", \"pvalues\", \"qualified-ident?\",\n                   \"qualified-keyword?\", \"qualified-symbol?\", \"quot\", \"rand\", \"rand-int\",\n                   \"rand-nth\", \"random-sample\", \"range\", \"ratio?\", \"rational?\",\n                   \"rationalize\", \"re-find\", \"re-groups\", \"re-matcher\", \"re-matches\",\n                   \"re-pattern\", \"re-seq\", \"read\", \"read-line\", \"read-string\",\n                   \"reader-conditional\", \"reader-conditional?\", \"realized?\", \"record?\",\n                   \"reduce\", \"reduce-kv\", \"reduced\", \"reduced?\", \"reductions\", \"ref\",\n                   \"ref-history-count\", \"ref-max-history\", \"ref-min-history\", \"ref-set\",\n                   \"refer\", \"refer-clojure\", \"reify\", \"release-pending-sends\", \"rem\",\n                   \"remove\", \"remove-all-methods\", \"remove-method\", \"remove-ns\",\n                   \"remove-watch\", \"repeat\", \"repeatedly\", \"replace\", \"replicate\", \"require\",\n                   \"reset!\", \"reset-meta!\", \"reset-vals!\", \"resolve\", \"rest\",\n                   \"restart-agent\", \"resultset-seq\", \"reverse\", \"reversible?\", \"rseq\",\n                   \"rsubseq\", \"run!\", \"satisfies?\", \"second\", \"select-keys\", \"send\",\n                   \"send-off\", \"send-via\", \"seq\", \"seq?\", \"seqable?\", \"seque\", \"sequence\",\n                   \"sequential?\", \"set\", \"set-agent-send-executor!\",\n                   \"set-agent-send-off-executor!\", \"set-error-handler!\", \"set-error-mode!\",\n                   \"set-validator!\", \"set?\", \"short\", \"short-array\", \"shorts\", \"shuffle\",\n                   \"shutdown-agents\", \"simple-ident?\", \"simple-keyword?\", \"simple-symbol?\",\n                   \"slurp\", \"some\", \"some->\", \"some->>\", \"some-fn\", \"some?\", \"sort\",\n                   \"sort-by\", \"sorted-map\", \"sorted-map-by\", \"sorted-set\", \"sorted-set-by\",\n                   \"sorted?\", \"special-symbol?\", \"spit\", \"split-at\", \"split-with\", \"str\",\n                   \"string?\", \"struct\", \"struct-map\", \"subs\", \"subseq\", \"subvec\", \"supers\",\n                   \"swap!\", \"swap-vals!\", \"symbol\", \"symbol?\", \"sync\", \"tagged-literal\",\n                   \"tagged-literal?\", \"take\", \"take-last\", \"take-nth\", \"take-while\", \"test\",\n                   \"the-ns\", \"thread-bound?\", \"time\", \"to-array\", \"to-array-2d\",\n                   \"trampoline\", \"transduce\", \"transient\", \"tree-seq\", \"true?\", \"type\",\n                   \"unchecked-add\", \"unchecked-add-int\", \"unchecked-byte\", \"unchecked-char\",\n                   \"unchecked-dec\", \"unchecked-dec-int\", \"unchecked-divide-int\",\n                   \"unchecked-double\", \"unchecked-float\", \"unchecked-inc\",\n                   \"unchecked-inc-int\", \"unchecked-int\", \"unchecked-long\",\n                   \"unchecked-multiply\", \"unchecked-multiply-int\", \"unchecked-negate\",\n                   \"unchecked-negate-int\", \"unchecked-remainder-int\", \"unchecked-short\",\n                   \"unchecked-subtract\", \"unchecked-subtract-int\", \"underive\", \"unquote\",\n                   \"unquote-splicing\", \"unreduced\", \"unsigned-bit-shift-right\", \"update\",\n                   \"update-in\", \"update-proxy\", \"uri?\", \"use\", \"uuid?\", \"val\", \"vals\",\n                   \"var-get\", \"var-set\", \"var?\", \"vary-meta\", \"vec\", \"vector\", \"vector-of\",\n                   \"vector?\", \"volatile!\", \"volatile?\", \"vreset!\", \"vswap!\", \"when\",\n                   \"when-first\", \"when-let\", \"when-not\", \"when-some\", \"while\",\n                   \"with-bindings\", \"with-bindings*\", \"with-in-str\", \"with-loading-context\",\n                   \"with-local-vars\", \"with-meta\", \"with-open\", \"with-out-str\",\n                   \"with-precision\", \"with-redefs\", \"with-redefs-fn\", \"xml-seq\", \"zero?\",\n                   \"zipmap\"];\nvar haveBodyParameter = [\n  \"->\", \"->>\", \"as->\", \"binding\", \"bound-fn\", \"case\", \"catch\", \"comment\",\n  \"cond\", \"cond->\", \"cond->>\", \"condp\", \"def\", \"definterface\", \"defmethod\",\n  \"defn\", \"defmacro\", \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\",\n  \"do\", \"doseq\", \"dotimes\", \"doto\", \"extend\", \"extend-protocol\",\n  \"extend-type\", \"fn\", \"for\", \"future\", \"if\", \"if-let\", \"if-not\", \"if-some\",\n  \"let\", \"letfn\", \"locking\", \"loop\", \"ns\", \"proxy\", \"reify\", \"struct-map\",\n  \"some->\", \"some->>\", \"try\", \"when\", \"when-first\", \"when-let\", \"when-not\",\n  \"when-some\", \"while\", \"with-bindings\", \"with-bindings*\", \"with-in-str\",\n  \"with-loading-context\", \"with-local-vars\", \"with-meta\", \"with-open\",\n  \"with-out-str\", \"with-precision\", \"with-redefs\", \"with-redefs-fn\"];\n\nvar atom = createLookupMap(atoms);\nvar specialForm = createLookupMap(specialForms);\nvar coreSymbol = createLookupMap(coreSymbols);\nvar hasBodyParameter = createLookupMap(haveBodyParameter);\nvar delimiter = /^(?:[\\\\\\[\\]\\s\"(),;@^`{}~]|$)/;\nvar numberLiteral = /^(?:[+\\-]?\\d+(?:(?:N|(?:[eE][+\\-]?\\d+))|(?:\\.?\\d*(?:M|(?:[eE][+\\-]?\\d+))?)|\\/\\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\\\\[\\]\\s\"#'(),;@^`{}~]|$))/;\nvar characterLiteral = /^(?:\\\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/;\n\n// simple-namespace := /^[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~.][^\\\\\\[\\]\\s\"(),;@^`{}~.\\/]*/\n// simple-symbol    := /^(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)/\n// qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>\nvar qualifiedSymbol = /^(?:(?:[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~.][^\\\\\\[\\]\\s\"(),;@^`{}~.\\/]*(?:\\.[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~.][^\\\\\\[\\]\\s\"(),;@^`{}~.\\/]*)*\\/)?(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/;\n\nfunction base(stream, state) {\n  if (stream.eatSpace() || stream.eat(\",\")) return [\"space\", null];\n  if (stream.match(numberLiteral)) return [null, \"number\"];\n  if (stream.match(characterLiteral)) return [null, \"string.special\"];\n  if (stream.eat(/^\"/)) return (state.tokenize = inString)(stream, state);\n  if (stream.eat(/^[(\\[{]/)) return [\"open\", \"bracket\"];\n  if (stream.eat(/^[)\\]}]/)) return [\"close\", \"bracket\"];\n  if (stream.eat(/^;/)) {stream.skipToEnd(); return [\"space\", \"comment\"];}\n  if (stream.eat(/^[#'@^`~]/)) return [null, \"meta\"];\n\n  var matches = stream.match(qualifiedSymbol);\n  var symbol = matches && matches[0];\n\n  if (!symbol) {\n    // advance stream by at least one character so we don't get stuck.\n    stream.next();\n    stream.eatWhile(function (c) {return !is(c, delimiter);});\n    return [null, \"error\"];\n  }\n\n  if (symbol === \"comment\" && state.lastToken === \"(\")\n    return (state.tokenize = inComment)(stream, state);\n  if (is(symbol, atom) || symbol.charAt(0) === \":\") return [\"symbol\", \"atom\"];\n  if (is(symbol, specialForm) || is(symbol, coreSymbol)) return [\"symbol\", \"keyword\"];\n  if (state.lastToken === \"(\") return [\"symbol\", \"builtin\"]; // other operator\n\n  return [\"symbol\", \"variable\"];\n}\n\nfunction inString(stream, state) {\n  var escaped = false, next;\n\n  while (next = stream.next()) {\n    if (next === \"\\\"\" && !escaped) {state.tokenize = base; break;}\n    escaped = !escaped && next === \"\\\\\";\n  }\n\n  return [null, \"string\"];\n}\n\nfunction inComment(stream, state) {\n  var parenthesisCount = 1;\n  var next;\n\n  while (next = stream.next()) {\n    if (next === \")\") parenthesisCount--;\n    if (next === \"(\") parenthesisCount++;\n    if (parenthesisCount === 0) {\n      stream.backUp(1);\n      state.tokenize = base;\n      break;\n    }\n  }\n\n  return [\"space\", \"comment\"];\n}\n\nfunction createLookupMap(words) {\n  var obj = {};\n\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n  return obj;\n}\n\nfunction is(value, test) {\n  if (test instanceof RegExp) return test.test(value);\n  if (test instanceof Object) return test.propertyIsEnumerable(value);\n}\n\nexport const clojure = {\n  name: \"clojure\",\n  startState: function () {\n    return {\n      ctx: {prev: null, start: 0, indentTo: 0},\n      lastToken: null,\n      tokenize: base\n    };\n  },\n\n  token: function (stream, state) {\n    if (stream.sol() && (typeof state.ctx.indentTo !== \"number\"))\n      state.ctx.indentTo = state.ctx.start + 1;\n\n    var typeStylePair = state.tokenize(stream, state);\n    var type = typeStylePair[0];\n    var style = typeStylePair[1];\n    var current = stream.current();\n\n    if (type !== \"space\") {\n      if (state.lastToken === \"(\" && state.ctx.indentTo === null) {\n        if (type === \"symbol\" && is(current, hasBodyParameter))\n          state.ctx.indentTo = state.ctx.start + stream.indentUnit;\n        else state.ctx.indentTo = \"next\";\n      } else if (state.ctx.indentTo === \"next\") {\n        state.ctx.indentTo = stream.column();\n      }\n\n      state.lastToken = current;\n    }\n\n    if (type === \"open\")\n      state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n    else if (type === \"close\") state.ctx = state.ctx.prev || state.ctx;\n\n    return style;\n  },\n\n  indent: function (state) {\n    var i = state.ctx.indentTo;\n\n    return (typeof i === \"number\") ?\n      i :\n      state.ctx.start + 1;\n  },\n\n  languageData: {\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    commentTokens: {line: \";;\"},\n    autocomplete: [].concat(atoms, specialForms, coreSymbols)\n  }\n};\n", "var TOKEN_NAMES = {\n  '+': 'inserted',\n  '-': 'deleted',\n  '@': 'meta'\n};\n\nexport const diff = {\n  name: \"diff\",\n  token: function(stream) {\n    var tw_pos = stream.string.search(/[\\t ]+?$/);\n\n    if (!stream.sol() || tw_pos === 0) {\n      stream.skipToEnd();\n      return (\"error \" + (\n        TOKEN_NAMES[stream.string.charAt(0)] || '')).replace(/ $/, '');\n    }\n\n    var token_name = TOKEN_NAMES[stream.peek()] || stream.skipToEnd();\n\n    if (tw_pos === -1) {\n      stream.skipToEnd();\n    } else {\n      stream.pos = tw_pos;\n    }\n\n    return token_name;\n  }\n};\n\n", "function words(array) {\n  var keys = {};\n  for (var i = 0; i < array.length; ++i) {\n    keys[array[i]] = true;\n  }\n  return keys;\n}\n\nvar keywords = words([\n  \"abstract\", \"accept\", \"allocatable\", \"allocate\",\n  \"array\", \"assign\", \"asynchronous\", \"backspace\",\n  \"bind\", \"block\", \"byte\", \"call\", \"case\",\n  \"class\", \"close\", \"common\", \"contains\",\n  \"continue\", \"cycle\", \"data\", \"deallocate\",\n  \"decode\", \"deferred\", \"dimension\", \"do\",\n  \"elemental\", \"else\", \"encode\", \"end\",\n  \"endif\", \"entry\", \"enumerator\", \"equivalence\",\n  \"exit\", \"external\", \"extrinsic\", \"final\",\n  \"forall\", \"format\", \"function\", \"generic\",\n  \"go\", \"goto\", \"if\", \"implicit\", \"import\", \"include\",\n  \"inquire\", \"intent\", \"interface\", \"intrinsic\",\n  \"module\", \"namelist\", \"non_intrinsic\",\n  \"non_overridable\", \"none\", \"nopass\",\n  \"nullify\", \"open\", \"optional\", \"options\",\n  \"parameter\", \"pass\", \"pause\", \"pointer\",\n  \"print\", \"private\", \"program\", \"protected\",\n  \"public\", \"pure\", \"read\", \"recursive\", \"result\",\n  \"return\", \"rewind\", \"save\", \"select\", \"sequence\",\n  \"stop\", \"subroutine\", \"target\", \"then\", \"to\", \"type\",\n  \"use\", \"value\", \"volatile\", \"where\", \"while\",\n  \"write\"]);\nvar builtins = words([\"abort\", \"abs\", \"access\", \"achar\", \"acos\",\n                      \"adjustl\", \"adjustr\", \"aimag\", \"aint\", \"alarm\",\n                      \"all\", \"allocated\", \"alog\", \"amax\", \"amin\",\n                      \"amod\", \"and\", \"anint\", \"any\", \"asin\",\n                      \"associated\", \"atan\", \"besj\", \"besjn\", \"besy\",\n                      \"besyn\", \"bit_size\", \"btest\", \"cabs\", \"ccos\",\n                      \"ceiling\", \"cexp\", \"char\", \"chdir\", \"chmod\",\n                      \"clog\", \"cmplx\", \"command_argument_count\",\n                      \"complex\", \"conjg\", \"cos\", \"cosh\", \"count\",\n                      \"cpu_time\", \"cshift\", \"csin\", \"csqrt\", \"ctime\",\n                      \"c_funloc\", \"c_loc\", \"c_associated\", \"c_null_ptr\",\n                      \"c_null_funptr\", \"c_f_pointer\", \"c_null_char\",\n                      \"c_alert\", \"c_backspace\", \"c_form_feed\",\n                      \"c_new_line\", \"c_carriage_return\",\n                      \"c_horizontal_tab\", \"c_vertical_tab\", \"dabs\",\n                      \"dacos\", \"dasin\", \"datan\", \"date_and_time\",\n                      \"dbesj\", \"dbesj\", \"dbesjn\", \"dbesy\", \"dbesy\",\n                      \"dbesyn\", \"dble\", \"dcos\", \"dcosh\", \"ddim\", \"derf\",\n                      \"derfc\", \"dexp\", \"digits\", \"dim\", \"dint\", \"dlog\",\n                      \"dlog\", \"dmax\", \"dmin\", \"dmod\", \"dnint\",\n                      \"dot_product\", \"dprod\", \"dsign\", \"dsinh\",\n                      \"dsin\", \"dsqrt\", \"dtanh\", \"dtan\", \"dtime\",\n                      \"eoshift\", \"epsilon\", \"erf\", \"erfc\", \"etime\",\n                      \"exit\", \"exp\", \"exponent\", \"extends_type_of\",\n                      \"fdate\", \"fget\", \"fgetc\", \"float\", \"floor\",\n                      \"flush\", \"fnum\", \"fputc\", \"fput\", \"fraction\",\n                      \"fseek\", \"fstat\", \"ftell\", \"gerror\", \"getarg\",\n                      \"get_command\", \"get_command_argument\",\n                      \"get_environment_variable\", \"getcwd\",\n                      \"getenv\", \"getgid\", \"getlog\", \"getpid\",\n                      \"getuid\", \"gmtime\", \"hostnm\", \"huge\", \"iabs\",\n                      \"iachar\", \"iand\", \"iargc\", \"ibclr\", \"ibits\",\n                      \"ibset\", \"ichar\", \"idate\", \"idim\", \"idint\",\n                      \"idnint\", \"ieor\", \"ierrno\", \"ifix\", \"imag\",\n                      \"imagpart\", \"index\", \"int\", \"ior\", \"irand\",\n                      \"isatty\", \"ishft\", \"ishftc\", \"isign\",\n                      \"iso_c_binding\", \"is_iostat_end\", \"is_iostat_eor\",\n                      \"itime\", \"kill\", \"kind\", \"lbound\", \"len\", \"len_trim\",\n                      \"lge\", \"lgt\", \"link\", \"lle\", \"llt\", \"lnblnk\", \"loc\",\n                      \"log\", \"logical\", \"long\", \"lshift\", \"lstat\", \"ltime\",\n                      \"matmul\", \"max\", \"maxexponent\", \"maxloc\", \"maxval\",\n                      \"mclock\", \"merge\", \"move_alloc\", \"min\", \"minexponent\",\n                      \"minloc\", \"minval\", \"mod\", \"modulo\", \"mvbits\",\n                      \"nearest\", \"new_line\", \"nint\", \"not\", \"or\", \"pack\",\n                      \"perror\", \"precision\", \"present\", \"product\", \"radix\",\n                      \"rand\", \"random_number\", \"random_seed\", \"range\",\n                      \"real\", \"realpart\", \"rename\", \"repeat\", \"reshape\",\n                      \"rrspacing\", \"rshift\", \"same_type_as\", \"scale\",\n                      \"scan\", \"second\", \"selected_int_kind\",\n                      \"selected_real_kind\", \"set_exponent\", \"shape\",\n                      \"short\", \"sign\", \"signal\", \"sinh\", \"sin\", \"sleep\",\n                      \"sngl\", \"spacing\", \"spread\", \"sqrt\", \"srand\", \"stat\",\n                      \"sum\", \"symlnk\", \"system\", \"system_clock\", \"tan\",\n                      \"tanh\", \"time\", \"tiny\", \"transfer\", \"transpose\",\n                      \"trim\", \"ttynam\", \"ubound\", \"umask\", \"unlink\",\n                      \"unpack\", \"verify\", \"xor\", \"zabs\", \"zcos\", \"zexp\",\n                      \"zlog\", \"zsin\", \"zsqrt\"]);\n\nvar dataTypes =  words([\"c_bool\", \"c_char\", \"c_double\", \"c_double_complex\",\n                        \"c_float\", \"c_float_complex\", \"c_funptr\", \"c_int\",\n                        \"c_int16_t\", \"c_int32_t\", \"c_int64_t\", \"c_int8_t\",\n                        \"c_int_fast16_t\", \"c_int_fast32_t\", \"c_int_fast64_t\",\n                        \"c_int_fast8_t\", \"c_int_least16_t\", \"c_int_least32_t\",\n                        \"c_int_least64_t\", \"c_int_least8_t\", \"c_intmax_t\",\n                        \"c_intptr_t\", \"c_long\", \"c_long_double\",\n                        \"c_long_double_complex\", \"c_long_long\", \"c_ptr\",\n                        \"c_short\", \"c_signed_char\", \"c_size_t\", \"character\",\n                        \"complex\", \"double\", \"integer\", \"logical\", \"real\"]);\nvar isOperatorChar = /[+\\-*&=<>\\/\\:]/;\nvar litOperator = /^\\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\\./i;\n\nfunction tokenBase(stream, state) {\n\n  if (stream.match(litOperator)){\n    return 'operator';\n  }\n\n  var ch = stream.next();\n  if (ch == \"!\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]\\(\\),]/.test(ch)) {\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var word = stream.current().toLowerCase();\n\n  if (keywords.hasOwnProperty(word)){\n    return 'keyword';\n  }\n  if (builtins.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {\n    return 'builtin';\n  }\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) state.tokenize = null;\n    return \"string\";\n  };\n}\n\n// Interface\n\nexport const fortran = {\n  name: \"fortran\",\n  startState: function() {\n    return {tokenize: null};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    return style;\n  }\n};\n\n", "var keywords = {\n  \"break\":true, \"case\":true, \"chan\":true, \"const\":true, \"continue\":true,\n  \"default\":true, \"defer\":true, \"else\":true, \"fallthrough\":true, \"for\":true,\n  \"func\":true, \"go\":true, \"goto\":true, \"if\":true, \"import\":true,\n  \"interface\":true, \"map\":true, \"package\":true, \"range\":true, \"return\":true,\n  \"select\":true, \"struct\":true, \"switch\":true, \"type\":true, \"var\":true,\n  \"bool\":true, \"byte\":true, \"complex64\":true, \"complex128\":true,\n  \"float32\":true, \"float64\":true, \"int8\":true, \"int16\":true, \"int32\":true,\n  \"int64\":true, \"string\":true, \"uint8\":true, \"uint16\":true, \"uint32\":true,\n  \"uint64\":true, \"int\":true, \"uint\":true, \"uintptr\":true, \"error\": true,\n  \"rune\":true, \"any\":true, \"comparable\":true\n};\n\nvar atoms = {\n  \"true\":true, \"false\":true, \"iota\":true, \"nil\":true, \"append\":true,\n  \"cap\":true, \"close\":true, \"complex\":true, \"copy\":true, \"delete\":true, \"imag\":true,\n  \"len\":true, \"make\":true, \"new\":true, \"panic\":true, \"print\":true,\n  \"println\":true, \"real\":true, \"recover\":true\n};\n\nvar isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\d\\.]/.test(ch)) {\n    if (ch == \".\") {\n      stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n    } else if (ch == \"0\") {\n      stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n    } else {\n      stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n    }\n    return \"number\";\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) {\n    if (cur == \"case\" || cur == \"default\") curPunc = \"case\";\n    return \"keyword\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && quote != \"`\" && next == \"\\\\\";\n    }\n    if (end || !(escaped || quote == \"`\"))\n      state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\nfunction popContext(state) {\n  if (!state.context.prev) return;\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport const go = {\n  name: \"go\",\n  startState: function(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n      if (ctx.type == \"case\") ctx.type = \"}\";\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"case\") ctx.type = \"case\";\n    else if (curPunc == \"}\" && ctx.type == \"}\") popContext(state);\n    else if (curPunc == ctx.type) popContext(state);\n    state.startOfLine = false;\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return null;\n    var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n    if (ctx.type == \"case\" && /^(?:case|default)\\b/.test(textAfter)) return ctx.indented;\n    var closing = firstChar == ctx.type;\n    if (ctx.align) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s([{}]|case |default\\s*:)$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n\n", "function switchState(source, setState, f) {\n  setState(f);\n  return f(source, setState);\n}\n\n// These should all be Unicode extended, as per the Haskell 2010 report\nvar smallRE = /[a-z_]/;\nvar largeRE = /[A-Z]/;\nvar digitRE = /\\d/;\nvar hexitRE = /[0-9A-Fa-f]/;\nvar octitRE = /[0-7]/;\nvar idRE = /[a-z_A-Z0-9'\\xa1-\\uffff]/;\nvar symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:]/;\nvar specialRE = /[(),;[\\]`{}]/;\nvar whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal(source, setState) {\n  if (source.eatWhile(whiteCharRE)) {\n    return null;\n  }\n\n  var ch = source.next();\n  if (specialRE.test(ch)) {\n    if (ch == '{' && source.eat('-')) {\n      var t = \"comment\";\n      if (source.eat('#')) {\n        t = \"meta\";\n      }\n      return switchState(source, setState, ncomment(t, 1));\n    }\n    return null;\n  }\n\n  if (ch == '\\'') {\n    if (source.eat('\\\\')) {\n      source.next();  // should handle other escapes here\n    }\n    else {\n      source.next();\n    }\n    if (source.eat('\\'')) {\n      return \"string\";\n    }\n    return \"error\";\n  }\n\n  if (ch == '\"') {\n    return switchState(source, setState, stringLiteral);\n  }\n\n  if (largeRE.test(ch)) {\n    source.eatWhile(idRE);\n    if (source.eat('.')) {\n      return \"qualifier\";\n    }\n    return \"type\";\n  }\n\n  if (smallRE.test(ch)) {\n    source.eatWhile(idRE);\n    return \"variable\";\n  }\n\n  if (digitRE.test(ch)) {\n    if (ch == '0') {\n      if (source.eat(/[xX]/)) {\n        source.eatWhile(hexitRE); // should require at least 1\n        return \"integer\";\n      }\n      if (source.eat(/[oO]/)) {\n        source.eatWhile(octitRE); // should require at least 1\n        return \"number\";\n      }\n    }\n    source.eatWhile(digitRE);\n    var t = \"number\";\n    if (source.match(/^\\.\\d+/)) {\n      t = \"number\";\n    }\n    if (source.eat(/[eE]/)) {\n      t = \"number\";\n      source.eat(/[-+]/);\n      source.eatWhile(digitRE); // should require at least 1\n    }\n    return t;\n  }\n\n  if (ch == \".\" && source.eat(\".\"))\n    return \"keyword\";\n\n  if (symbolRE.test(ch)) {\n    if (ch == '-' && source.eat(/-/)) {\n      source.eatWhile(/-/);\n      if (!source.eat(symbolRE)) {\n        source.skipToEnd();\n        return \"comment\";\n      }\n    }\n    source.eatWhile(symbolRE);\n    return \"variable\"\n  }\n\n  return \"error\";\n}\n\nfunction ncomment(type, nest) {\n  if (nest == 0) {\n    return normal;\n  }\n  return function(source, setState) {\n    var currNest = nest;\n    while (!source.eol()) {\n      var ch = source.next();\n      if (ch == '{' && source.eat('-')) {\n        ++currNest;\n      }\n      else if (ch == '-' && source.eat('}')) {\n        --currNest;\n        if (currNest == 0) {\n          setState(normal);\n          return type;\n        }\n      }\n    }\n    setState(ncomment(type, currNest));\n    return type;\n  };\n}\n\nfunction stringLiteral(source, setState) {\n  while (!source.eol()) {\n    var ch = source.next();\n    if (ch == '\"') {\n      setState(normal);\n      return \"string\";\n    }\n    if (ch == '\\\\') {\n      if (source.eol() || source.eat(whiteCharRE)) {\n        setState(stringGap);\n        return \"string\";\n      }\n      if (source.eat('&')) {\n      }\n      else {\n        source.next(); // should handle other escapes here\n      }\n    }\n  }\n  setState(normal);\n  return \"error\";\n}\n\nfunction stringGap(source, setState) {\n  if (source.eat('\\\\')) {\n    return switchState(source, setState, stringLiteral);\n  }\n  source.next();\n  setState(normal);\n  return \"error\";\n}\n\n\nvar wellKnownWords = (function() {\n  var wkw = {};\n  function setType(t) {\n    return function () {\n      for (var i = 0; i < arguments.length; i++)\n        wkw[arguments[i]] = t;\n    };\n  }\n\n  setType(\"keyword\")(\n    \"case\", \"class\", \"data\", \"default\", \"deriving\", \"do\", \"else\", \"foreign\",\n    \"if\", \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instance\", \"let\",\n    \"module\", \"newtype\", \"of\", \"then\", \"type\", \"where\", \"_\");\n\n  setType(\"keyword\")(\n    \"\\.\\.\", \":\", \"::\", \"=\", \"\\\\\", \"<-\", \"->\", \"@\", \"~\", \"=>\");\n\n  setType(\"builtin\")(\n    \"!!\", \"$!\", \"$\", \"&&\", \"+\", \"++\", \"-\", \".\", \"/\", \"/=\", \"<\", \"<*\", \"<=\",\n    \"<$>\", \"<*>\", \"=<<\", \"==\", \">\", \">=\", \">>\", \">>=\", \"^\", \"^^\", \"||\", \"*\",\n    \"*>\", \"**\");\n\n  setType(\"builtin\")(\n    \"Applicative\", \"Bool\", \"Bounded\", \"Char\", \"Double\", \"EQ\", \"Either\", \"Enum\",\n    \"Eq\", \"False\", \"FilePath\", \"Float\", \"Floating\", \"Fractional\", \"Functor\",\n    \"GT\", \"IO\", \"IOError\", \"Int\", \"Integer\", \"Integral\", \"Just\", \"LT\", \"Left\",\n    \"Maybe\", \"Monad\", \"Nothing\", \"Num\", \"Ord\", \"Ordering\", \"Rational\", \"Read\",\n    \"ReadS\", \"Real\", \"RealFloat\", \"RealFrac\", \"Right\", \"Show\", \"ShowS\",\n    \"String\", \"True\");\n\n  setType(\"builtin\")(\n    \"abs\", \"acos\", \"acosh\", \"all\", \"and\", \"any\", \"appendFile\", \"asTypeOf\",\n    \"asin\", \"asinh\", \"atan\", \"atan2\", \"atanh\", \"break\", \"catch\", \"ceiling\",\n    \"compare\", \"concat\", \"concatMap\", \"const\", \"cos\", \"cosh\", \"curry\",\n    \"cycle\", \"decodeFloat\", \"div\", \"divMod\", \"drop\", \"dropWhile\", \"either\",\n    \"elem\", \"encodeFloat\", \"enumFrom\", \"enumFromThen\", \"enumFromThenTo\",\n    \"enumFromTo\", \"error\", \"even\", \"exp\", \"exponent\", \"fail\", \"filter\",\n    \"flip\", \"floatDigits\", \"floatRadix\", \"floatRange\", \"floor\", \"fmap\",\n    \"foldl\", \"foldl1\", \"foldr\", \"foldr1\", \"fromEnum\", \"fromInteger\",\n    \"fromIntegral\", \"fromRational\", \"fst\", \"gcd\", \"getChar\", \"getContents\",\n    \"getLine\", \"head\", \"id\", \"init\", \"interact\", \"ioError\", \"isDenormalized\",\n    \"isIEEE\", \"isInfinite\", \"isNaN\", \"isNegativeZero\", \"iterate\", \"last\",\n    \"lcm\", \"length\", \"lex\", \"lines\", \"log\", \"logBase\", \"lookup\", \"map\",\n    \"mapM\", \"mapM_\", \"max\", \"maxBound\", \"maximum\", \"maybe\", \"min\", \"minBound\",\n    \"minimum\", \"mod\", \"negate\", \"not\", \"notElem\", \"null\", \"odd\", \"or\",\n    \"otherwise\", \"pi\", \"pred\", \"print\", \"product\", \"properFraction\", \"pure\",\n    \"putChar\", \"putStr\", \"putStrLn\", \"quot\", \"quotRem\", \"read\", \"readFile\",\n    \"readIO\", \"readList\", \"readLn\", \"readParen\", \"reads\", \"readsPrec\",\n    \"realToFrac\", \"recip\", \"rem\", \"repeat\", \"replicate\", \"return\", \"reverse\",\n    \"round\", \"scaleFloat\", \"scanl\", \"scanl1\", \"scanr\", \"scanr1\", \"seq\",\n    \"sequence\", \"sequence_\", \"show\", \"showChar\", \"showList\", \"showParen\",\n    \"showString\", \"shows\", \"showsPrec\", \"significand\", \"signum\", \"sin\",\n    \"sinh\", \"snd\", \"span\", \"splitAt\", \"sqrt\", \"subtract\", \"succ\", \"sum\",\n    \"tail\", \"take\", \"takeWhile\", \"tan\", \"tanh\", \"toEnum\", \"toInteger\",\n    \"toRational\", \"truncate\", \"uncurry\", \"undefined\", \"unlines\", \"until\",\n    \"unwords\", \"unzip\", \"unzip3\", \"userError\", \"words\", \"writeFile\", \"zip\",\n    \"zip3\", \"zipWith\", \"zipWith3\");\n\n  return wkw;\n})();\n\nexport const haskell = {\n  name: \"haskell\",\n  startState: function ()  { return { f: normal }; },\n  copyState:  function (s) { return { f: s.f }; },\n\n  token: function(stream, state) {\n    var t = state.f(stream, function(s) { state.f = s; });\n    var w = stream.current();\n    return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;\n  },\n\n  languageData: {\n    commentTokens: {line: \"--\", block: {open: \"{-\", close: \"-}\"}}\n  }\n};\n", "function wordRegexp(words, end, pre) {\n  if (typeof pre === \"undefined\") pre = \"\";\n  if (typeof end === \"undefined\") { end = \"\\\\b\"; }\n  return new RegExp(\"^\" + pre + \"((\" + words.join(\")|(\") + \"))\" + end);\n}\n\nvar octChar = \"\\\\\\\\[0-7]{1,3}\";\nvar hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\nvar sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\nvar uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\n\nvar asciiOperatorsList = [\n  \"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\n  \"\\\\.{2,3}\", \"[\\\\.\\\\\\\\%*+\\\\-<>!\\\\/^|&]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\"\n];\nvar operators = wordRegexp([\n  \"[<>]:\", \"[<>=]=\", \"[!=]==\", \"<<=?\", \">>>?=?\", \"=>?\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\n  \"[\\\\\\\\%*+\\\\-<>!\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\",\n  \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\",\n  \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\",\n  \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\",\n  \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"\n], \"\");\nvar delimiters = /^[;,()[\\]{}]/;\nvar identifiers = /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\n\nvar chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\n\nvar openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\",\n                   \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\",\n                   \"finally\", \"catch\", \"do\"];\n\nvar closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\n\nvar keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\",\n                    \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\",\n                    \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\",\n                    \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\",\n                    \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\",\n                    \"bitstype\"];\n\nvar builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\n\nvar openers = wordRegexp(openersList);\nvar closers = wordRegexp(closersList);\nvar keywords = wordRegexp(keywordsList);\nvar builtins = wordRegexp(builtinsList);\n\nvar macro = /^@[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n\nvar macroOperators = wordRegexp(asciiOperatorsList, \"\", \"@\");\nvar symbolOperators = wordRegexp(asciiOperatorsList, \"\", \":\");\n\nfunction inArray(state) {\n  return (state.nestedArrays > 0);\n}\n\nfunction inGenerator(state) {\n  return (state.nestedGenerators > 0);\n}\n\nfunction currentScope(state, n) {\n  if (typeof(n) === \"undefined\") { n = 0; }\n  if (state.scopes.length <= n) {\n    return null;\n  }\n  return state.scopes[state.scopes.length - (n + 1)];\n}\n\n// tokenizers\nfunction tokenBase(stream, state) {\n  // Handle multiline comments\n  if (stream.match('#=', false)) {\n    state.tokenize = tokenComment;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle scope changes\n  var leavingExpr = state.leavingExpr;\n  if (stream.sol()) {\n    leavingExpr = false;\n  }\n  state.leavingExpr = false;\n\n  if (leavingExpr) {\n    if (stream.match(/^'+/)) {\n      return \"operator\";\n    }\n  }\n\n  if (stream.match(/\\.{4,}/)) {\n    return \"error\";\n  } else if (stream.match(/\\.{1,3}/)) {\n    return \"operator\";\n  }\n\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek();\n\n  // Handle single line comments\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch === '[') {\n    state.scopes.push('[');\n    state.nestedArrays++;\n  }\n\n  if (ch === '(') {\n    state.scopes.push('(');\n    state.nestedGenerators++;\n  }\n\n  if (inArray(state) && ch === ']') {\n    while (state.scopes.length && currentScope(state) !== \"[\") { state.scopes.pop(); }\n    state.scopes.pop();\n    state.nestedArrays--;\n    state.leavingExpr = true;\n  }\n\n  if (inGenerator(state) && ch === ')') {\n    while (state.scopes.length && currentScope(state) !== \"(\") { state.scopes.pop(); }\n    state.scopes.pop();\n    state.nestedGenerators--;\n    state.leavingExpr = true;\n  }\n\n  if (inArray(state)) {\n    if (state.lastToken == \"end\" && stream.match(':')) {\n      return \"operator\";\n    }\n    if (stream.match('end')) {\n      return \"number\";\n    }\n  }\n\n  var match;\n  if (match = stream.match(openers, false)) {\n    state.scopes.push(match[0]);\n  }\n\n  if (stream.match(closers, false)) {\n    state.scopes.pop();\n  }\n\n  // Handle type annotations\n  if (stream.match(/^::(?![:\\$])/)) {\n    state.tokenize = tokenAnnotation;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle symbols\n  if (!leavingExpr && (stream.match(symbol) || stream.match(symbolOperators))) {\n    return \"builtin\";\n  }\n\n  // Handle parametric types\n  //if (stream.match(/^{[^}]*}(?=\\()/)) {\n  //  return \"builtin\";\n  //}\n\n  // Handle operators and Delimiters\n  if (stream.match(operators)) {\n    return \"operator\";\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^\\.?\\d/, false)) {\n    var imMatcher = RegExp(/^im\\b/);\n    var numberLiteral = false;\n    if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) { numberLiteral = true; }\n    // Integers\n    if (stream.match(/^0x[0-9a-f_]+/i)) { numberLiteral = true; } // Hex\n    if (stream.match(/^0b[01_]+/i)) { numberLiteral = true; } // Binary\n    if (stream.match(/^0o[0-7_]+/i)) { numberLiteral = true; } // Octal\n    // Floats\n    if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) { numberLiteral = true; }\n    if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) { numberLiteral = true; } // Decimal\n    if (numberLiteral) {\n      // Integer literals may be \"long\"\n      stream.match(imMatcher);\n      state.leavingExpr = true;\n      return \"number\";\n    }\n  }\n\n  // Handle Chars\n  if (stream.match(\"'\")) {\n    state.tokenize = tokenChar;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle Strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n\n  if (stream.match(macro) || stream.match(macroOperators)) {\n    return \"meta\";\n  }\n\n  if (stream.match(delimiters)) {\n    return null;\n  }\n\n  if (stream.match(keywords)) {\n    return \"keyword\";\n  }\n\n  if (stream.match(builtins)) {\n    return \"builtin\";\n  }\n\n  var isDefinition = state.isDefinition || state.lastToken == \"function\" ||\n      state.lastToken == \"macro\" || state.lastToken == \"type\" ||\n      state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n\n  if (stream.match(identifiers)) {\n    if (isDefinition) {\n      if (stream.peek() === '.') {\n        state.isDefinition = true;\n        return \"variable\";\n      }\n      state.isDefinition = false;\n      return \"def\";\n    }\n    state.leavingExpr = true;\n    return \"variable\";\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return \"error\";\n}\n\nfunction tokenAnnotation(stream, state) {\n  stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n  if (stream.match('{')) {\n    state.nestedParameters++;\n  } else if (stream.match('}') && state.nestedParameters > 0) {\n    state.nestedParameters--;\n  }\n  if (state.nestedParameters > 0) {\n    stream.match(/.*?(?={|})/) || stream.next();\n  } else if (state.nestedParameters == 0) {\n    state.tokenize = tokenBase;\n  }\n  return \"builtin\";\n}\n\nfunction tokenComment(stream, state) {\n  if (stream.match('#=')) {\n    state.nestedComments++;\n  }\n  if (!stream.match(/.*?(?=(#=|=#))/)) {\n    stream.skipToEnd();\n  }\n  if (stream.match('=#')) {\n    state.nestedComments--;\n    if (state.nestedComments == 0)\n      state.tokenize = tokenBase;\n  }\n  return \"comment\";\n}\n\nfunction tokenChar(stream, state) {\n  var isChar = false, match;\n  if (stream.match(chars)) {\n    isChar = true;\n  } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n    var value = parseInt(match[1], 16);\n    if (value <= 55295 || value >= 57344) { // (U+0,U+D7FF), (U+E000,U+FFFF)\n      isChar = true;\n      stream.next();\n    }\n  } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n    var value = parseInt(match[1], 16);\n    if (value <= 1114111) { // U+10FFFF\n      isChar = true;\n      stream.next();\n    }\n  }\n  if (isChar) {\n    state.leavingExpr = true;\n    state.tokenize = tokenBase;\n    return \"string\";\n  }\n  if (!stream.match(/^[^']+(?=')/)) { stream.skipToEnd(); }\n  if (stream.match(\"'\")) { state.tokenize = tokenBase; }\n  return \"error\";\n}\n\nfunction tokenStringFactory(delimiter) {\n  if (delimiter.substr(-3) === '\"\"\"') {\n    delimiter = '\"\"\"';\n  } else if (delimiter.substr(-1) === '\"') {\n    delimiter = '\"';\n  }\n  function tokenString(stream, state) {\n    if (stream.eat('\\\\')) {\n      stream.next();\n    } else if (stream.match(delimiter)) {\n      state.tokenize = tokenBase;\n      state.leavingExpr = true;\n      return \"string\";\n    } else {\n      stream.eat(/[`\"]/);\n    }\n    stream.eatWhile(/[^\\\\`\"]/);\n    return \"string\";\n  }\n  return tokenString;\n}\n\nexport const julia = {\n  name: \"julia\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      scopes: [],\n      lastToken: null,\n      leavingExpr: false,\n      isDefinition: false,\n      nestedArrays: 0,\n      nestedComments: 0,\n      nestedGenerators: 0,\n      nestedParameters: 0,\n      firstParenPos: -1\n    };\n  },\n\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    if (current && style) {\n      state.lastToken = current;\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var delta = 0;\n    if ( textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) ||\n         /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) ||\n         /^finally/.test(textAfter) ) {\n      delta = -1;\n    }\n    return (state.scopes.length + delta) * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*(end|else|catch|finally)\\b$/,\n    commentTokens: {line: \"#\", block: {open: \"#=\", close: \"=#\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    autocomplete: keywordsList.concat(builtinsList)\n  }\n};\n", "function prefixRE(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")\", \"i\");\n}\nfunction wordRE(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\n\n// long list of standard functions from lua manual\nvar builtins = wordRE([\n  \"_G\",\"_VERSION\",\"assert\",\"collectgarbage\",\"dofile\",\"error\",\"getfenv\",\"getmetatable\",\"ipairs\",\"load\",\n  \"loadfile\",\"loadstring\",\"module\",\"next\",\"pairs\",\"pcall\",\"print\",\"rawequal\",\"rawget\",\"rawset\",\"require\",\n  \"select\",\"setfenv\",\"setmetatable\",\"tonumber\",\"tostring\",\"type\",\"unpack\",\"xpcall\",\n\n  \"coroutine.create\",\"coroutine.resume\",\"coroutine.running\",\"coroutine.status\",\"coroutine.wrap\",\"coroutine.yield\",\n\n  \"debug.debug\",\"debug.getfenv\",\"debug.gethook\",\"debug.getinfo\",\"debug.getlocal\",\"debug.getmetatable\",\n  \"debug.getregistry\",\"debug.getupvalue\",\"debug.setfenv\",\"debug.sethook\",\"debug.setlocal\",\"debug.setmetatable\",\n  \"debug.setupvalue\",\"debug.traceback\",\n\n  \"close\",\"flush\",\"lines\",\"read\",\"seek\",\"setvbuf\",\"write\",\n\n  \"io.close\",\"io.flush\",\"io.input\",\"io.lines\",\"io.open\",\"io.output\",\"io.popen\",\"io.read\",\"io.stderr\",\"io.stdin\",\n  \"io.stdout\",\"io.tmpfile\",\"io.type\",\"io.write\",\n\n  \"math.abs\",\"math.acos\",\"math.asin\",\"math.atan\",\"math.atan2\",\"math.ceil\",\"math.cos\",\"math.cosh\",\"math.deg\",\n  \"math.exp\",\"math.floor\",\"math.fmod\",\"math.frexp\",\"math.huge\",\"math.ldexp\",\"math.log\",\"math.log10\",\"math.max\",\n  \"math.min\",\"math.modf\",\"math.pi\",\"math.pow\",\"math.rad\",\"math.random\",\"math.randomseed\",\"math.sin\",\"math.sinh\",\n  \"math.sqrt\",\"math.tan\",\"math.tanh\",\n\n  \"os.clock\",\"os.date\",\"os.difftime\",\"os.execute\",\"os.exit\",\"os.getenv\",\"os.remove\",\"os.rename\",\"os.setlocale\",\n  \"os.time\",\"os.tmpname\",\n\n  \"package.cpath\",\"package.loaded\",\"package.loaders\",\"package.loadlib\",\"package.path\",\"package.preload\",\n  \"package.seeall\",\n\n  \"string.byte\",\"string.char\",\"string.dump\",\"string.find\",\"string.format\",\"string.gmatch\",\"string.gsub\",\n  \"string.len\",\"string.lower\",\"string.match\",\"string.rep\",\"string.reverse\",\"string.sub\",\"string.upper\",\n\n  \"table.concat\",\"table.insert\",\"table.maxn\",\"table.remove\",\"table.sort\"\n]);\nvar keywords = wordRE([\"and\",\"break\",\"elseif\",\"false\",\"nil\",\"not\",\"or\",\"return\",\n                       \"true\",\"function\", \"end\", \"if\", \"then\", \"else\", \"do\",\n                       \"while\", \"repeat\", \"until\", \"for\", \"in\", \"local\" ]);\n\nvar indentTokens = wordRE([\"function\", \"if\",\"repeat\",\"do\", \"\\\\(\", \"{\"]);\nvar dedentTokens = wordRE([\"end\", \"until\", \"\\\\)\", \"}\"]);\nvar dedentPartial = prefixRE([\"end\", \"until\", \"\\\\)\", \"}\", \"else\", \"elseif\"]);\n\nfunction readBracket(stream) {\n  var level = 0;\n  while (stream.eat(\"=\")) ++level;\n  stream.eat(\"[\");\n  return level;\n}\n\nfunction normal(stream, state) {\n  var ch = stream.next();\n  if (ch == \"-\" && stream.eat(\"-\")) {\n    if (stream.eat(\"[\") && stream.eat(\"[\"))\n      return (state.cur = bracketed(readBracket(stream), \"comment\"))(stream, state);\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (ch == \"\\\"\" || ch == \"'\")\n    return (state.cur = string(ch))(stream, state);\n  if (ch == \"[\" && /[\\[=]/.test(stream.peek()))\n    return (state.cur = bracketed(readBracket(stream), \"string\"))(stream, state);\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w.%]/);\n    return \"number\";\n  }\n  if (/[\\w_]/.test(ch)) {\n    stream.eatWhile(/[\\w\\\\\\-_.]/);\n    return \"variable\";\n  }\n  return null;\n}\n\nfunction bracketed(level, style) {\n  return function(stream, state) {\n    var curlev = null, ch;\n    while ((ch = stream.next()) != null) {\n      if (curlev == null) {if (ch == \"]\") curlev = 0;}\n      else if (ch == \"=\") ++curlev;\n      else if (ch == \"]\" && curlev == level) { state.cur = normal; break; }\n      else curlev = null;\n    }\n    return style;\n  };\n}\n\nfunction string(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) break;\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    if (!escaped) state.cur = normal;\n    return \"string\";\n  };\n}\n\nexport const lua = {\n  name: \"lua\",\n\n  startState: function() {\n    return {basecol: 0, indentDepth: 0, cur: normal};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.cur(stream, state);\n    var word = stream.current();\n    if (style == \"variable\") {\n      if (keywords.test(word)) style = \"keyword\";\n      else if (builtins.test(word)) style = \"builtin\";\n    }\n    if ((style != \"comment\") && (style != \"string\")){\n      if (indentTokens.test(word)) ++state.indentDepth;\n      else if (dedentTokens.test(word)) --state.indentDepth;\n    }\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var closing = dedentPartial.test(textAfter);\n    return state.basecol + cx.unit * (state.indentDepth - (closing ? 1 : 0));\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*(?:end|until|else|\\)|\\})$/,\n    commentTokens: {line: \"--\", block: {open: \"--[[\", close: \"]]--\"}}\n  }\n};\n", "function mlLike(parserConfig) {\n  var words = {\n    'as': 'keyword',\n    'do': 'keyword',\n    'else': 'keyword',\n    'end': 'keyword',\n    'exception': 'keyword',\n    'fun': 'keyword',\n    'functor': 'keyword',\n    'if': 'keyword',\n    'in': 'keyword',\n    'include': 'keyword',\n    'let': 'keyword',\n    'of': 'keyword',\n    'open': 'keyword',\n    'rec': 'keyword',\n    'struct': 'keyword',\n    'then': 'keyword',\n    'type': 'keyword',\n    'val': 'keyword',\n    'while': 'keyword',\n    'with': 'keyword'\n  };\n\n  var extraWords = parserConfig.extraWords || {};\n  for (var prop in extraWords) {\n    if (extraWords.hasOwnProperty(prop)) {\n      words[prop] = parserConfig.extraWords[prop];\n    }\n  }\n  var hintWords = [];\n  for (var k in words) { hintWords.push(k); }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n    if (ch === '{') {\n      if (stream.eat('|')) {\n        state.longString = true;\n        state.tokenize = tokenLongString;\n        return state.tokenize(stream, state);\n      }\n    }\n    if (ch === '(') {\n      if (stream.match(/^\\*(?!\\))/)) {\n        state.commentLevel++;\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n    }\n    if (ch === '~' || ch === '?') {\n      stream.eatWhile(/\\w/);\n      return 'variableName.special';\n    }\n    if (ch === '`') {\n      stream.eatWhile(/\\w/);\n      return 'quote';\n    }\n    if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {\n      stream.skipToEnd();\n      return 'comment';\n    }\n    if (/\\d/.test(ch)) {\n      if (ch === '0' && stream.eat(/[bB]/)) {\n        stream.eatWhile(/[01]/);\n      } if (ch === '0' && stream.eat(/[xX]/)) {\n        stream.eatWhile(/[0-9a-fA-F]/)\n      } if (ch === '0' && stream.eat(/[oO]/)) {\n        stream.eatWhile(/[0-7]/);\n      } else {\n        stream.eatWhile(/[\\d_]/);\n        if (stream.eat('.')) {\n          stream.eatWhile(/[\\d]/);\n        }\n        if (stream.eat(/[eE]/)) {\n          stream.eatWhile(/[\\d\\-+]/);\n        }\n      }\n      return 'number';\n    }\n    if ( /[+\\-*&%=<>!?|@\\.~:]/.test(ch)) {\n      return 'operator';\n    }\n    if (/[\\w\\xa1-\\uffff]/.test(ch)) {\n      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n      var cur = stream.current();\n      return words.hasOwnProperty(cur) ? words[cur] : 'variable';\n    }\n    return null\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while(state.commentLevel > 0 && (next = stream.next()) != null) {\n      if (prev === '(' && next === '*') state.commentLevel++;\n      if (prev === '*' && next === ')') state.commentLevel--;\n      prev = next;\n    }\n    if (state.commentLevel <= 0) {\n      state.tokenize = tokenBase;\n    }\n    return 'comment';\n  }\n\n  function tokenLongString(stream, state) {\n    var prev, next;\n    while (state.longString && (next = stream.next()) != null) {\n      if (prev === '|' && next === '}') state.longString = false;\n      prev = next;\n    }\n    if (!state.longString) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  }\n\n  return {\n    startState: function() {return {tokenize: tokenBase, commentLevel: 0, longString: false};},\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n\n    languageData: {\n      autocomplete: hintWords,\n      commentTokens: {\n        line: parserConfig.slashComments ? \"//\" : undefined,\n        block: {open: \"(*\", close: \"*)\"}\n      }\n    }\n  };\n};\n\nexport const oCaml = mlLike({\n  name: \"ocaml\",\n  extraWords: {\n    'and': 'keyword',\n    'assert': 'keyword',\n    'begin': 'keyword',\n    'class': 'keyword',\n    'constraint': 'keyword',\n    'done': 'keyword',\n    'downto': 'keyword',\n    'external': 'keyword',\n    'function': 'keyword',\n    'initializer': 'keyword',\n    'lazy': 'keyword',\n    'match': 'keyword',\n    'method': 'keyword',\n    'module': 'keyword',\n    'mutable': 'keyword',\n    'new': 'keyword',\n    'nonrec': 'keyword',\n    'object': 'keyword',\n    'private': 'keyword',\n    'sig': 'keyword',\n    'to': 'keyword',\n    'try': 'keyword',\n    'value': 'keyword',\n    'virtual': 'keyword',\n    'when': 'keyword',\n\n    // builtins\n    'raise': 'builtin',\n    'failwith': 'builtin',\n    'true': 'builtin',\n    'false': 'builtin',\n\n    // Pervasives builtins\n    'asr': 'builtin',\n    'land': 'builtin',\n    'lor': 'builtin',\n    'lsl': 'builtin',\n    'lsr': 'builtin',\n    'lxor': 'builtin',\n    'mod': 'builtin',\n    'or': 'builtin',\n\n    // More Pervasives\n    'raise_notrace': 'builtin',\n    'trace': 'builtin',\n    'exit': 'builtin',\n    'print_string': 'builtin',\n    'print_endline': 'builtin',\n\n     'int': 'type',\n     'float': 'type',\n     'bool': 'type',\n     'char': 'type',\n     'string': 'type',\n     'unit': 'type',\n\n     // Modules\n     'List': 'builtin'\n  }\n});\n\nexport const fSharp = mlLike({\n  name: \"fsharp\",\n  extraWords: {\n    'abstract': 'keyword',\n    'assert': 'keyword',\n    'base': 'keyword',\n    'begin': 'keyword',\n    'class': 'keyword',\n    'default': 'keyword',\n    'delegate': 'keyword',\n    'do!': 'keyword',\n    'done': 'keyword',\n    'downcast': 'keyword',\n    'downto': 'keyword',\n    'elif': 'keyword',\n    'extern': 'keyword',\n    'finally': 'keyword',\n    'for': 'keyword',\n    'function': 'keyword',\n    'global': 'keyword',\n    'inherit': 'keyword',\n    'inline': 'keyword',\n    'interface': 'keyword',\n    'internal': 'keyword',\n    'lazy': 'keyword',\n    'let!': 'keyword',\n    'match': 'keyword',\n    'member': 'keyword',\n    'module': 'keyword',\n    'mutable': 'keyword',\n    'namespace': 'keyword',\n    'new': 'keyword',\n    'null': 'keyword',\n    'override': 'keyword',\n    'private': 'keyword',\n    'public': 'keyword',\n    'return!': 'keyword',\n    'return': 'keyword',\n    'select': 'keyword',\n    'static': 'keyword',\n    'to': 'keyword',\n    'try': 'keyword',\n    'upcast': 'keyword',\n    'use!': 'keyword',\n    'use': 'keyword',\n    'void': 'keyword',\n    'when': 'keyword',\n    'yield!': 'keyword',\n    'yield': 'keyword',\n\n    // Reserved words\n    'atomic': 'keyword',\n    'break': 'keyword',\n    'checked': 'keyword',\n    'component': 'keyword',\n    'const': 'keyword',\n    'constraint': 'keyword',\n    'constructor': 'keyword',\n    'continue': 'keyword',\n    'eager': 'keyword',\n    'event': 'keyword',\n    'external': 'keyword',\n    'fixed': 'keyword',\n    'method': 'keyword',\n    'mixin': 'keyword',\n    'object': 'keyword',\n    'parallel': 'keyword',\n    'process': 'keyword',\n    'protected': 'keyword',\n    'pure': 'keyword',\n    'sealed': 'keyword',\n    'tailcall': 'keyword',\n    'trait': 'keyword',\n    'virtual': 'keyword',\n    'volatile': 'keyword',\n\n    // builtins\n    'List': 'builtin',\n    'Seq': 'builtin',\n    'Map': 'builtin',\n    'Set': 'builtin',\n    'Option': 'builtin',\n    'int': 'builtin',\n    'string': 'builtin',\n    'not': 'builtin',\n    'true': 'builtin',\n    'false': 'builtin',\n\n    'raise': 'builtin',\n    'failwith': 'builtin'\n  },\n  slashComments: true\n});\n\nexport const sml = mlLike({\n  name: \"sml\",\n  extraWords: {\n    'abstype': 'keyword',\n    'and': 'keyword',\n    'andalso': 'keyword',\n    'case': 'keyword',\n    'datatype': 'keyword',\n    'fn': 'keyword',\n    'handle': 'keyword',\n    'infix': 'keyword',\n    'infixr': 'keyword',\n    'local': 'keyword',\n    'nonfix': 'keyword',\n    'op': 'keyword',\n    'orelse': 'keyword',\n    'raise': 'keyword',\n    'withtype': 'keyword',\n    'eqtype': 'keyword',\n    'sharing': 'keyword',\n    'sig': 'keyword',\n    'signature': 'keyword',\n    'structure': 'keyword',\n    'where': 'keyword',\n    'true': 'keyword',\n    'false': 'keyword',\n\n    // types\n    'int': 'builtin',\n    'real': 'builtin',\n    'string': 'builtin',\n    'char': 'builtin',\n    'bool': 'builtin'\n  },\n  slashComments: true\n});\n", "function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = words(\n  /* ngxDirectiveControl */ \"break return rewrite set\" +\n    /* ngxDirective */ \" accept_mutex accept_mutex_delay access_log add_after_body add_before_body add_header addition_types aio alias allow ancient_browser ancient_browser_value auth_basic auth_basic_user_file auth_http auth_http_header auth_http_timeout autoindex autoindex_exact_size autoindex_localtime charset charset_types client_body_buffer_size client_body_in_file_only client_body_in_single_buffer client_body_temp_path client_body_timeout client_header_buffer_size client_header_timeout client_max_body_size connection_pool_size create_full_put_path daemon dav_access dav_methods debug_connection debug_points default_type degradation degrade deny devpoll_changes devpoll_events directio directio_alignment empty_gif env epoll_events error_log eventport_events expires fastcgi_bind fastcgi_buffer_size fastcgi_buffers fastcgi_busy_buffers_size fastcgi_cache fastcgi_cache_key fastcgi_cache_methods fastcgi_cache_min_uses fastcgi_cache_path fastcgi_cache_use_stale fastcgi_cache_valid fastcgi_catch_stderr fastcgi_connect_timeout fastcgi_hide_header fastcgi_ignore_client_abort fastcgi_ignore_headers fastcgi_index fastcgi_intercept_errors fastcgi_max_temp_file_size fastcgi_next_upstream fastcgi_param fastcgi_pass_header fastcgi_pass_request_body fastcgi_pass_request_headers fastcgi_read_timeout fastcgi_send_lowat fastcgi_send_timeout fastcgi_split_path_info fastcgi_store fastcgi_store_access fastcgi_temp_file_write_size fastcgi_temp_path fastcgi_upstream_fail_timeout fastcgi_upstream_max_fails flv geoip_city geoip_country google_perftools_profiles gzip gzip_buffers gzip_comp_level gzip_disable gzip_hash gzip_http_version gzip_min_length gzip_no_buffer gzip_proxied gzip_static gzip_types gzip_vary gzip_window if_modified_since ignore_invalid_headers image_filter image_filter_buffer image_filter_jpeg_quality image_filter_transparency imap_auth imap_capabilities imap_client_buffer index ip_hash keepalive_requests keepalive_timeout kqueue_changes kqueue_events large_client_header_buffers limit_conn limit_conn_log_level limit_rate limit_rate_after limit_req limit_req_log_level limit_req_zone limit_zone lingering_time lingering_timeout lock_file log_format log_not_found log_subrequest map_hash_bucket_size map_hash_max_size master_process memcached_bind memcached_buffer_size memcached_connect_timeout memcached_next_upstream memcached_read_timeout memcached_send_timeout memcached_upstream_fail_timeout memcached_upstream_max_fails merge_slashes min_delete_depth modern_browser modern_browser_value msie_padding msie_refresh multi_accept open_file_cache open_file_cache_errors open_file_cache_events open_file_cache_min_uses open_file_cache_valid open_log_file_cache output_buffers override_charset perl perl_modules perl_require perl_set pid pop3_auth pop3_capabilities port_in_redirect postpone_gzipping postpone_output protocol proxy proxy_bind proxy_buffer proxy_buffer_size proxy_buffering proxy_buffers proxy_busy_buffers_size proxy_cache proxy_cache_key proxy_cache_methods proxy_cache_min_uses proxy_cache_path proxy_cache_use_stale proxy_cache_valid proxy_connect_timeout proxy_headers_hash_bucket_size proxy_headers_hash_max_size proxy_hide_header proxy_ignore_client_abort proxy_ignore_headers proxy_intercept_errors proxy_max_temp_file_size proxy_method proxy_next_upstream proxy_pass_error_message proxy_pass_header proxy_pass_request_body proxy_pass_request_headers proxy_read_timeout proxy_redirect proxy_send_lowat proxy_send_timeout proxy_set_body proxy_set_header proxy_ssl_session_reuse proxy_store proxy_store_access proxy_temp_file_write_size proxy_temp_path proxy_timeout proxy_upstream_fail_timeout proxy_upstream_max_fails random_index read_ahead real_ip_header recursive_error_pages request_pool_size reset_timedout_connection resolver resolver_timeout rewrite_log rtsig_overflow_events rtsig_overflow_test rtsig_overflow_threshold rtsig_signo satisfy secure_link_secret send_lowat send_timeout sendfile sendfile_max_chunk server_name_in_redirect server_names_hash_bucket_size server_names_hash_max_size server_tokens set_real_ip_from smtp_auth smtp_capabilities smtp_client_buffer smtp_greeting_delay so_keepalive source_charset ssi ssi_ignore_recycled_buffers ssi_min_file_chunk ssi_silent_errors ssi_types ssi_value_length ssl ssl_certificate ssl_certificate_key ssl_ciphers ssl_client_certificate ssl_crl ssl_dhparam ssl_engine ssl_prefer_server_ciphers ssl_protocols ssl_session_cache ssl_session_timeout ssl_verify_client ssl_verify_depth starttls stub_status sub_filter sub_filter_once sub_filter_types tcp_nodelay tcp_nopush thread_stack_size timeout timer_resolution types_hash_bucket_size types_hash_max_size underscores_in_headers uninitialized_variable_warn use user userid userid_domain userid_expires userid_mark userid_name userid_p3p userid_path userid_service valid_referers variables_hash_bucket_size variables_hash_max_size worker_connections worker_cpu_affinity worker_priority worker_processes worker_rlimit_core worker_rlimit_nofile worker_rlimit_sigpending worker_threads working_directory xclient xml_entities xslt_stylesheet xslt_typesdrew@li229-23\"\n);\n\nvar keywords_block = words(\n  /* ngxDirectiveBlock */ \"http mail events server types location upstream charset_map limit_except if geo map\"\n);\n\nvar keywords_important = words(\n  /* ngxDirectiveImportant */ \"include root server server_name listen internal proxy_pass memcached_pass fastcgi_pass try_files\"\n);\n\nvar type;\nfunction ret(style, tp) {type = tp; return style;}\n\nfunction tokenBase(stream, state) {\n\n\n  stream.eatWhile(/[\\w\\$_]/);\n\n  var cur = stream.current();\n\n\n  if (keywords.propertyIsEnumerable(cur)) {\n    return \"keyword\";\n  }\n  else if (keywords_block.propertyIsEnumerable(cur)) {\n    return \"controlKeyword\";\n  }\n  else if (keywords_important.propertyIsEnumerable(cur)) {\n    return \"controlKeyword\";\n  }\n  /**/\n\n  var ch = stream.next();\n  if (ch == \"@\") {stream.eatWhile(/[\\w\\\\\\-]/); return ret(\"meta\", stream.current());}\n  else if (ch == \"/\" && stream.eat(\"*\")) {\n    state.tokenize = tokenCComment;\n    return tokenCComment(stream, state);\n  }\n  else if (ch == \"<\" && stream.eat(\"!\")) {\n    state.tokenize = tokenSGMLComment;\n    return tokenSGMLComment(stream, state);\n  }\n  else if (ch == \"=\") ret(null, \"compare\");\n  else if ((ch == \"~\" || ch == \"|\") && stream.eat(\"=\")) return ret(null, \"compare\");\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  else if (ch == \"#\") {\n    stream.skipToEnd();\n    return ret(\"comment\", \"comment\");\n  }\n  else if (ch == \"!\") {\n    stream.match(/^\\s*\\w*/);\n    return ret(\"keyword\", \"important\");\n  }\n  else if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w.%]/);\n    return ret(\"number\", \"unit\");\n  }\n  else if (/[,.+>*\\/]/.test(ch)) {\n    return ret(null, \"select-op\");\n  }\n  else if (/[;{}:\\[\\]]/.test(ch)) {\n    return ret(null, ch);\n  }\n  else {\n    stream.eatWhile(/[\\w\\\\\\-]/);\n    return ret(\"variable\", \"variable\");\n  }\n}\n\nfunction tokenCComment(stream, state) {\n  var maybeEnd = false, ch;\n  while ((ch = stream.next()) != null) {\n    if (maybeEnd && ch == \"/\") {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return ret(\"comment\", \"comment\");\n}\n\nfunction tokenSGMLComment(stream, state) {\n  var dashes = 0, ch;\n  while ((ch = stream.next()) != null) {\n    if (dashes >= 2 && ch == \">\") {\n      state.tokenize = tokenBase;\n      break;\n    }\n    dashes = (ch == \"-\") ? dashes + 1 : 0;\n  }\n  return ret(\"comment\", \"comment\");\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped)\n        break;\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    if (!escaped) state.tokenize = tokenBase;\n    return ret(\"string\", \"string\");\n  };\n}\n\nexport const nginx = {\n  name: \"nginx\",\n  startState: function() {\n    return {tokenize: tokenBase,\n            baseIndent: 0,\n            stack: []};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    type = null;\n    var style = state.tokenize(stream, state);\n\n    var context = state.stack[state.stack.length-1];\n    if (type == \"hash\" && context == \"rule\") style = \"atom\";\n    else if (style == \"variable\") {\n      if (context == \"rule\") style = \"number\";\n      else if (!context || context == \"@media{\") style = \"tag\";\n    }\n\n    if (context == \"rule\" && /^[\\{\\};]$/.test(type))\n      state.stack.pop();\n    if (type == \"{\") {\n      if (context == \"@media\") state.stack[state.stack.length-1] = \"@media{\";\n      else state.stack.push(\"{\");\n    }\n    else if (type == \"}\") state.stack.pop();\n    else if (type == \"@media\") state.stack.push(\"@media\");\n    else if (context == \"{\" && type != \"comment\") state.stack.push(\"rule\");\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var n = state.stack.length;\n    if (/^\\}/.test(textAfter))\n      n -= state.stack[state.stack.length-1] == \"rule\" ? 2 : 1;\n    return state.baseIndent + n * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*\\}$/\n  }\n};\n", "function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\nvar doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\nvar expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\nvar identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\nvar builtins = wordRegexp([\n  'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',\n  'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',\n  'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',\n  'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',\n  'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',\n  'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',\n  'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'\n]);\n\nvar keywords = wordRegexp([\n  'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',\n  'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',\n  'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',\n  'continue', 'pkg'\n]);\n\n\n// tokenizers\nfunction tokenTranspose(stream, state) {\n  if (!stream.sol() && stream.peek() === '\\'') {\n    stream.next();\n    state.tokenize = tokenBase;\n    return 'operator';\n  }\n  state.tokenize = tokenBase;\n  return tokenBase(stream, state);\n}\n\n\nfunction tokenComment(stream, state) {\n  if (stream.match(/^.*%}/)) {\n    state.tokenize = tokenBase;\n    return 'comment';\n  };\n  stream.skipToEnd();\n  return 'comment';\n}\n\nfunction tokenBase(stream, state) {\n  // whitespaces\n  if (stream.eatSpace()) return null;\n\n  // Handle one line Comments\n  if (stream.match('%{')){\n    state.tokenize = tokenComment;\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  if (stream.match(/^[%#]/)){\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n      stream.tokenize = tokenBase;\n      return 'number'; };\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n  }\n  if (stream.match(wordRegexp(['nan','NaN','inf','Inf']))) { return 'number'; };\n\n  // Handle Strings\n  var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/)\n  if (m) { return m[1] ? 'string' : \"error\"; }\n\n  // Handle words\n  if (stream.match(keywords)) { return 'keyword'; } ;\n  if (stream.match(builtins)) { return 'builtin'; } ;\n  if (stream.match(identifiers)) { return 'variable'; } ;\n\n  if (stream.match(singleOperators) || stream.match(doubleOperators)) { return 'operator'; };\n  if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) { return null; };\n\n  if (stream.match(expressionEnd)) {\n    state.tokenize = tokenTranspose;\n    return null;\n  };\n\n\n  // Handle non-detected items\n  stream.next();\n  return 'error';\n};\n\n\nexport const octave = {\n  name: \"octave\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    if (style === 'number' || style === 'variable'){\n      state.tokenize = tokenTranspose;\n    }\n    return style;\n  },\n\n  languageData: {\n    commentTokens: {line: \"%\"}\n  }\n};\n\n", "\n// it's like \"peek\", but need for look-ahead or look-behind if index < 0\nfunction look(stream, c){\n  return stream.string.charAt(stream.pos+(c||0));\n}\n\n// return a part of prefix of current stream from current position\nfunction prefix(stream, c){\n  if(c){\n    var x=stream.pos-c;\n    return stream.string.substr((x>=0?x:0),c);}\n  else{\n    return stream.string.substr(0,stream.pos-1);\n  }\n}\n\n// return a part of suffix of current stream from current position\nfunction suffix(stream, c){\n  var y=stream.string.length;\n  var x=y-stream.pos+1;\n  return stream.string.substr(stream.pos,(c&&c<y?c:x));\n}\n\n// eating and vomiting a part of stream from current position\nfunction eatSuffix(stream, c){\n  var x=stream.pos+c;\n  var y;\n  if(x<=0)\n    stream.pos=0;\n  else if(x>=(y=stream.string.length-1))\n    stream.pos=y;\n  else\n    stream.pos=x;\n}\n\n// http://perldoc.perl.org\nvar PERL={                                      //   null - magic touch\n  //   1 - keyword\n  //   2 - def\n  //   3 - atom\n  //   4 - operator\n  //   5 - builtin (predefined)\n  //   [x,y] - x=1,2,3; y=must be defined if x{...}\n  //      PERL operators\n  '->':   4,\n  '++':   4,\n  '--':   4,\n  '**':   4,\n  //   ! ~ \\ and unary + and -\n  '=~':   4,\n  '!~':   4,\n  '*':   4,\n  '/':   4,\n  '%':   4,\n  'x':   4,\n  '+':   4,\n  '-':   4,\n  '.':   4,\n  '<<':   4,\n  '>>':   4,\n  //   named unary operators\n  '<':   4,\n  '>':   4,\n  '<=':   4,\n  '>=':   4,\n  'lt':   4,\n  'gt':   4,\n  'le':   4,\n  'ge':   4,\n  '==':   4,\n  '!=':   4,\n  '<=>':   4,\n  'eq':   4,\n  'ne':   4,\n  'cmp':   4,\n  '~~':   4,\n  '&':   4,\n  '|':   4,\n  '^':   4,\n  '&&':   4,\n  '||':   4,\n  '//':   4,\n  '..':   4,\n  '...':   4,\n  '?':   4,\n  ':':   4,\n  '=':   4,\n  '+=':   4,\n  '-=':   4,\n  '*=':   4,  //   etc. ???\n  ',':   4,\n  '=>':   4,\n  '::':   4,\n  //   list operators (rightward)\n  'not':   4,\n  'and':   4,\n  'or':   4,\n  'xor':   4,\n  //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)\n  'BEGIN':   [5,1],\n  'END':   [5,1],\n  'PRINT':   [5,1],\n  'PRINTF':   [5,1],\n  'GETC':   [5,1],\n  'READ':   [5,1],\n  'READLINE':   [5,1],\n  'DESTROY':   [5,1],\n  'TIE':   [5,1],\n  'TIEHANDLE':   [5,1],\n  'UNTIE':   [5,1],\n  'STDIN':    5,\n  'STDIN_TOP':    5,\n  'STDOUT':    5,\n  'STDOUT_TOP':    5,\n  'STDERR':    5,\n  'STDERR_TOP':    5,\n  '$ARG':    5,\n  '$_':    5,\n  '@ARG':    5,\n  '@_':    5,\n  '$LIST_SEPARATOR':    5,\n  '$\"':    5,\n  '$PROCESS_ID':    5,\n  '$PID':    5,\n  '$$':    5,\n  '$REAL_GROUP_ID':    5,\n  '$GID':    5,\n  '$(':    5,\n  '$EFFECTIVE_GROUP_ID':    5,\n  '$EGID':    5,\n  '$)':    5,\n  '$PROGRAM_NAME':    5,\n  '$0':    5,\n  '$SUBSCRIPT_SEPARATOR':    5,\n  '$SUBSEP':    5,\n  '$;':    5,\n  '$REAL_USER_ID':    5,\n  '$UID':    5,\n  '$<':    5,\n  '$EFFECTIVE_USER_ID':    5,\n  '$EUID':    5,\n  '$>':    5,\n  '$a':    5,\n  '$b':    5,\n  '$COMPILING':    5,\n  '$^C':    5,\n  '$DEBUGGING':    5,\n  '$^D':    5,\n  '${^ENCODING}':    5,\n  '$ENV':    5,\n  '%ENV':    5,\n  '$SYSTEM_FD_MAX':    5,\n  '$^F':    5,\n  '@F':    5,\n  '${^GLOBAL_PHASE}':    5,\n  '$^H':    5,\n  '%^H':    5,\n  '@INC':    5,\n  '%INC':    5,\n  '$INPLACE_EDIT':    5,\n  '$^I':    5,\n  '$^M':    5,\n  '$OSNAME':    5,\n  '$^O':    5,\n  '${^OPEN}':    5,\n  '$PERLDB':    5,\n  '$^P':    5,\n  '$SIG':    5,\n  '%SIG':    5,\n  '$BASETIME':    5,\n  '$^T':    5,\n  '${^TAINT}':    5,\n  '${^UNICODE}':    5,\n  '${^UTF8CACHE}':    5,\n  '${^UTF8LOCALE}':    5,\n  '$PERL_VERSION':    5,\n  '$^V':    5,\n  '${^WIN32_SLOPPY_STAT}':    5,\n  '$EXECUTABLE_NAME':    5,\n  '$^X':    5,\n  '$1':    5, // - regexp $1, $2...\n  '$MATCH':    5,\n  '$&':    5,\n  '${^MATCH}':    5,\n  '$PREMATCH':    5,\n  '$`':    5,\n  '${^PREMATCH}':    5,\n  '$POSTMATCH':    5,\n  \"$'\":    5,\n  '${^POSTMATCH}':    5,\n  '$LAST_PAREN_MATCH':    5,\n  '$+':    5,\n  '$LAST_SUBMATCH_RESULT':    5,\n  '$^N':    5,\n  '@LAST_MATCH_END':    5,\n  '@+':    5,\n  '%LAST_PAREN_MATCH':    5,\n  '%+':    5,\n  '@LAST_MATCH_START':    5,\n  '@-':    5,\n  '%LAST_MATCH_START':    5,\n  '%-':    5,\n  '$LAST_REGEXP_CODE_RESULT':    5,\n  '$^R':    5,\n  '${^RE_DEBUG_FLAGS}':    5,\n  '${^RE_TRIE_MAXBUF}':    5,\n  '$ARGV':    5,\n  '@ARGV':    5,\n  'ARGV':    5,\n  'ARGVOUT':    5,\n  '$OUTPUT_FIELD_SEPARATOR':    5,\n  '$OFS':    5,\n  '$,':    5,\n  '$INPUT_LINE_NUMBER':    5,\n  '$NR':    5,\n  '$.':    5,\n  '$INPUT_RECORD_SEPARATOR':    5,\n  '$RS':    5,\n  '$/':    5,\n  '$OUTPUT_RECORD_SEPARATOR':    5,\n  '$ORS':    5,\n  '$\\\\':    5,\n  '$OUTPUT_AUTOFLUSH':    5,\n  '$|':    5,\n  '$ACCUMULATOR':    5,\n  '$^A':    5,\n  '$FORMAT_FORMFEED':    5,\n  '$^L':    5,\n  '$FORMAT_PAGE_NUMBER':    5,\n  '$%':    5,\n  '$FORMAT_LINES_LEFT':    5,\n  '$-':    5,\n  '$FORMAT_LINE_BREAK_CHARACTERS':    5,\n  '$:':    5,\n  '$FORMAT_LINES_PER_PAGE':    5,\n  '$=':    5,\n  '$FORMAT_TOP_NAME':    5,\n  '$^':    5,\n  '$FORMAT_NAME':    5,\n  '$~':    5,\n  '${^CHILD_ERROR_NATIVE}':    5,\n  '$EXTENDED_OS_ERROR':    5,\n  '$^E':    5,\n  '$EXCEPTIONS_BEING_CAUGHT':    5,\n  '$^S':    5,\n  '$WARNING':    5,\n  '$^W':    5,\n  '${^WARNING_BITS}':    5,\n  '$OS_ERROR':    5,\n  '$ERRNO':    5,\n  '$!':    5,\n  '%OS_ERROR':    5,\n  '%ERRNO':    5,\n  '%!':    5,\n  '$CHILD_ERROR':    5,\n  '$?':    5,\n  '$EVAL_ERROR':    5,\n  '$@':    5,\n  '$OFMT':    5,\n  '$#':    5,\n  '$*':    5,\n  '$ARRAY_BASE':    5,\n  '$[':    5,\n  '$OLD_PERL_VERSION':    5,\n  '$]':    5,\n  //      PERL blocks\n  'if':[1,1],\n  elsif:[1,1],\n  'else':[1,1],\n  'while':[1,1],\n  unless:[1,1],\n  'for':[1,1],\n  foreach:[1,1],\n  //      PERL functions\n  'abs':1,     // - absolute value function\n  accept:1,     // - accept an incoming socket connect\n  alarm:1,     // - schedule a SIGALRM\n  'atan2':1,     // - arctangent of Y/X in the range -PI to PI\n  bind:1,     // - binds an address to a socket\n  binmode:1,     // - prepare binary files for I/O\n  bless:1,     // - create an object\n  bootstrap:1,     //\n  'break':1,     // - break out of a \"given\" block\n  caller:1,     // - get context of the current subroutine call\n  chdir:1,     // - change your current working directory\n  chmod:1,     // - changes the permissions on a list of files\n  chomp:1,     // - remove a trailing record separator from a string\n  chop:1,     // - remove the last character from a string\n  chown:1,     // - change the ownership on a list of files\n  chr:1,     // - get character this number represents\n  chroot:1,     // - make directory new root for path lookups\n  close:1,     // - close file (or pipe or socket) handle\n  closedir:1,     // - close directory handle\n  connect:1,     // - connect to a remote socket\n  'continue':[1,1], // - optional trailing block in a while or foreach\n  'cos':1,     // - cosine function\n  crypt:1,     // - one-way passwd-style encryption\n  dbmclose:1,     // - breaks binding on a tied dbm file\n  dbmopen:1,     // - create binding on a tied dbm file\n  'default':1,     //\n  defined:1,     // - test whether a value, variable, or function is defined\n  'delete':1,     // - deletes a value from a hash\n  die:1,     // - raise an exception or bail out\n  'do':1,     // - turn a BLOCK into a TERM\n  dump:1,     // - create an immediate core dump\n  each:1,     // - retrieve the next key/value pair from a hash\n  endgrent:1,     // - be done using group file\n  endhostent:1,     // - be done using hosts file\n  endnetent:1,     // - be done using networks file\n  endprotoent:1,     // - be done using protocols file\n  endpwent:1,     // - be done using passwd file\n  endservent:1,     // - be done using services file\n  eof:1,     // - test a filehandle for its end\n  'eval':1,     // - catch exceptions or compile and run code\n  'exec':1,     // - abandon this program to run another\n  exists:1,     // - test whether a hash key is present\n  exit:1,     // - terminate this program\n  'exp':1,     // - raise I to a power\n  fcntl:1,     // - file control system call\n  fileno:1,     // - return file descriptor from filehandle\n  flock:1,     // - lock an entire file with an advisory lock\n  fork:1,     // - create a new process just like this one\n  format:1,     // - declare a picture format with use by the write() function\n  formline:1,     // - internal function used for formats\n  getc:1,     // - get the next character from the filehandle\n  getgrent:1,     // - get next group record\n  getgrgid:1,     // - get group record given group user ID\n  getgrnam:1,     // - get group record given group name\n  gethostbyaddr:1,     // - get host record given its address\n  gethostbyname:1,     // - get host record given name\n  gethostent:1,     // - get next hosts record\n  getlogin:1,     // - return who logged in at this tty\n  getnetbyaddr:1,     // - get network record given its address\n  getnetbyname:1,     // - get networks record given name\n  getnetent:1,     // - get next networks record\n  getpeername:1,     // - find the other end of a socket connection\n  getpgrp:1,     // - get process group\n  getppid:1,     // - get parent process ID\n  getpriority:1,     // - get current nice value\n  getprotobyname:1,     // - get protocol record given name\n  getprotobynumber:1,     // - get protocol record numeric protocol\n  getprotoent:1,     // - get next protocols record\n  getpwent:1,     // - get next passwd record\n  getpwnam:1,     // - get passwd record given user login name\n  getpwuid:1,     // - get passwd record given user ID\n  getservbyname:1,     // - get services record given its name\n  getservbyport:1,     // - get services record given numeric port\n  getservent:1,     // - get next services record\n  getsockname:1,     // - retrieve the sockaddr for a given socket\n  getsockopt:1,     // - get socket options on a given socket\n  given:1,     //\n  glob:1,     // - expand filenames using wildcards\n  gmtime:1,     // - convert UNIX time into record or string using Greenwich time\n  'goto':1,     // - create spaghetti code\n  grep:1,     // - locate elements in a list test true against a given criterion\n  hex:1,     // - convert a string to a hexadecimal number\n  'import':1,     // - patch a module's namespace into your own\n  index:1,     // - find a substring within a string\n  'int':1,     // - get the integer portion of a number\n  ioctl:1,     // - system-dependent device control system call\n  'join':1,     // - join a list into a string using a separator\n  keys:1,     // - retrieve list of indices from a hash\n  kill:1,     // - send a signal to a process or process group\n  last:1,     // - exit a block prematurely\n  lc:1,     // - return lower-case version of a string\n  lcfirst:1,     // - return a string with just the next letter in lower case\n  length:1,     // - return the number of bytes in a string\n  'link':1,     // - create a hard link in the filesystem\n  listen:1,     // - register your socket as a server\n  local: 2,    // - create a temporary value for a global variable (dynamic scoping)\n  localtime:1,     // - convert UNIX time into record or string using local time\n  lock:1,     // - get a thread lock on a variable, subroutine, or method\n  'log':1,     // - retrieve the natural logarithm for a number\n  lstat:1,     // - stat a symbolic link\n  m:null,  // - match a string with a regular expression pattern\n  map:1,     // - apply a change to a list to get back a new list with the changes\n  mkdir:1,     // - create a directory\n  msgctl:1,     // - SysV IPC message control operations\n  msgget:1,     // - get SysV IPC message queue\n  msgrcv:1,     // - receive a SysV IPC message from a message queue\n  msgsnd:1,     // - send a SysV IPC message to a message queue\n  my: 2,    // - declare and assign a local variable (lexical scoping)\n  'new':1,     //\n  next:1,     // - iterate a block prematurely\n  no:1,     // - unimport some module symbols or semantics at compile time\n  oct:1,     // - convert a string to an octal number\n  open:1,     // - open a file, pipe, or descriptor\n  opendir:1,     // - open a directory\n  ord:1,     // - find a character's numeric representation\n  our: 2,    // - declare and assign a package variable (lexical scoping)\n  pack:1,     // - convert a list into a binary representation\n  'package':1,     // - declare a separate global namespace\n  pipe:1,     // - open a pair of connected filehandles\n  pop:1,     // - remove the last element from an array and return it\n  pos:1,     // - find or set the offset for the last/next m//g search\n  print:1,     // - output a list to a filehandle\n  printf:1,     // - output a formatted list to a filehandle\n  prototype:1,     // - get the prototype (if any) of a subroutine\n  push:1,     // - append one or more elements to an array\n  q:null,  // - singly quote a string\n  qq:null,  // - doubly quote a string\n  qr:null,  // - Compile pattern\n  quotemeta:null,  // - quote regular expression magic characters\n  qw:null,  // - quote a list of words\n  qx:null,  // - backquote quote a string\n  rand:1,     // - retrieve the next pseudorandom number\n  read:1,     // - fixed-length buffered input from a filehandle\n  readdir:1,     // - get a directory from a directory handle\n  readline:1,     // - fetch a record from a file\n  readlink:1,     // - determine where a symbolic link is pointing\n  readpipe:1,     // - execute a system command and collect standard output\n  recv:1,     // - receive a message over a Socket\n  redo:1,     // - start this loop iteration over again\n  ref:1,     // - find out the type of thing being referenced\n  rename:1,     // - change a filename\n  require:1,     // - load in external functions from a library at runtime\n  reset:1,     // - clear all variables of a given name\n  'return':1,     // - get out of a function early\n  reverse:1,     // - flip a string or a list\n  rewinddir:1,     // - reset directory handle\n  rindex:1,     // - right-to-left substring search\n  rmdir:1,     // - remove a directory\n  s:null,  // - replace a pattern with a string\n  say:1,     // - print with newline\n  scalar:1,     // - force a scalar context\n  seek:1,     // - reposition file pointer for random-access I/O\n  seekdir:1,     // - reposition directory pointer\n  select:1,     // - reset default output or do I/O multiplexing\n  semctl:1,     // - SysV semaphore control operations\n  semget:1,     // - get set of SysV semaphores\n  semop:1,     // - SysV semaphore operations\n  send:1,     // - send a message over a socket\n  setgrent:1,     // - prepare group file for use\n  sethostent:1,     // - prepare hosts file for use\n  setnetent:1,     // - prepare networks file for use\n  setpgrp:1,     // - set the process group of a process\n  setpriority:1,     // - set a process's nice value\n  setprotoent:1,     // - prepare protocols file for use\n  setpwent:1,     // - prepare passwd file for use\n  setservent:1,     // - prepare services file for use\n  setsockopt:1,     // - set some socket options\n  shift:1,     // - remove the first element of an array, and return it\n  shmctl:1,     // - SysV shared memory operations\n  shmget:1,     // - get SysV shared memory segment identifier\n  shmread:1,     // - read SysV shared memory\n  shmwrite:1,     // - write SysV shared memory\n  shutdown:1,     // - close down just half of a socket connection\n  'sin':1,     // - return the sine of a number\n  sleep:1,     // - block for some number of seconds\n  socket:1,     // - create a socket\n  socketpair:1,     // - create a pair of sockets\n  'sort':1,     // - sort a list of values\n  splice:1,     // - add or remove elements anywhere in an array\n  'split':1,     // - split up a string using a regexp delimiter\n  sprintf:1,     // - formatted print into a string\n  'sqrt':1,     // - square root function\n  srand:1,     // - seed the random number generator\n  stat:1,     // - get a file's status information\n  state:1,     // - declare and assign a state variable (persistent lexical scoping)\n  study:1,     // - optimize input data for repeated searches\n  'sub':1,     // - declare a subroutine, possibly anonymously\n  'substr':1,     // - get or alter a portion of a string\n  symlink:1,     // - create a symbolic link to a file\n  syscall:1,     // - execute an arbitrary system call\n  sysopen:1,     // - open a file, pipe, or descriptor\n  sysread:1,     // - fixed-length unbuffered input from a filehandle\n  sysseek:1,     // - position I/O pointer on handle used with sysread and syswrite\n  system:1,     // - run a separate program\n  syswrite:1,     // - fixed-length unbuffered output to a filehandle\n  tell:1,     // - get current seekpointer on a filehandle\n  telldir:1,     // - get current seekpointer on a directory handle\n  tie:1,     // - bind a variable to an object class\n  tied:1,     // - get a reference to the object underlying a tied variable\n  time:1,     // - return number of seconds since 1970\n  times:1,     // - return elapsed time for self and child processes\n  tr:null,  // - transliterate a string\n  truncate:1,     // - shorten a file\n  uc:1,     // - return upper-case version of a string\n  ucfirst:1,     // - return a string with just the next letter in upper case\n  umask:1,     // - set file creation mode mask\n  undef:1,     // - remove a variable or function definition\n  unlink:1,     // - remove one link to a file\n  unpack:1,     // - convert binary structure into normal perl variables\n  unshift:1,     // - prepend more elements to the beginning of a list\n  untie:1,     // - break a tie binding to a variable\n  use:1,     // - load in a module at compile time\n  utime:1,     // - set a file's last access and modify times\n  values:1,     // - return a list of the values in a hash\n  vec:1,     // - test or set particular bits in a string\n  wait:1,     // - wait for any child process to die\n  waitpid:1,     // - wait for a particular child process to die\n  wantarray:1,     // - get void vs scalar vs list context of current subroutine call\n  warn:1,     // - print debugging info\n  when:1,     //\n  write:1,     // - print a picture record\n  y:null}; // - transliterate a string\n\nvar RXstyle=\"string.special\";\nvar RXmodifiers=/[goseximacplud]/;              // NOTE: \"m\", \"s\", \"y\" and \"tr\" need to correct real modifiers for each regexp type\n\nfunction tokenChain(stream,state,chain,style,tail){     // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)\n  state.chain=null;                               //                                                          12   3tail\n  state.style=null;\n  state.tail=null;\n  state.tokenize=function(stream,state){\n    var e=false,c,i=0;\n    while(c=stream.next()){\n      if(c===chain[i]&&!e){\n        if(chain[++i]!==undefined){\n          state.chain=chain[i];\n          state.style=style;\n          state.tail=tail;}\n        else if(tail)\n          stream.eatWhile(tail);\n        state.tokenize=tokenPerl;\n        return style;}\n      e=!e&&c==\"\\\\\";}\n    return style;};\n  return state.tokenize(stream,state);}\n\nfunction tokenSOMETHING(stream,state,string){\n  state.tokenize=function(stream,state){\n    if(stream.string==string)\n      state.tokenize=tokenPerl;\n    stream.skipToEnd();\n    return \"string\";};\n  return state.tokenize(stream,state);}\n\nfunction tokenPerl(stream,state){\n  if(stream.eatSpace())\n    return null;\n  if(state.chain)\n    return tokenChain(stream,state,state.chain,state.style,state.tail);\n  if(stream.match(/^(\\-?((\\d[\\d_]*)?\\.\\d+(e[+-]?\\d+)?|\\d+\\.\\d*)|0x[\\da-fA-F_]+|0b[01_]+|\\d[\\d_]*(e[+-]?\\d+)?)/))\n    return 'number';\n  if(stream.match(/^<<(?=[_a-zA-Z])/)){                  // NOTE: <<SOMETHING\\n...\\nSOMETHING\\n\n    stream.eatWhile(/\\w/);\n    return tokenSOMETHING(stream,state,stream.current().substr(2));}\n  if(stream.sol()&&stream.match(/^\\=item(?!\\w)/)){// NOTE: \\n=item...\\n=cut\\n\n    return tokenSOMETHING(stream,state,'=cut');}\n  var ch=stream.next();\n  if(ch=='\"'||ch==\"'\"){                           // NOTE: ' or \" or <<'SOMETHING'\\n...\\nSOMETHING\\n or <<\"SOMETHING\"\\n...\\nSOMETHING\\n\n    if(prefix(stream, 3)==\"<<\"+ch){\n      var p=stream.pos;\n      stream.eatWhile(/\\w/);\n      var n=stream.current().substr(1);\n      if(n&&stream.eat(ch))\n        return tokenSOMETHING(stream,state,n);\n      stream.pos=p;}\n    return tokenChain(stream,state,[ch],\"string\");}\n  if(ch==\"q\"){\n    var c=look(stream, -2);\n    if(!(c&&/\\w/.test(c))){\n      c=look(stream, 0);\n      if(c==\"x\"){\n        c=look(stream, 1);\n        if(c==\"(\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n        if(c==\"[\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n        if(c==\"{\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n        if(c==\"<\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\n      else if(c==\"q\"){\n        c=look(stream, 1);\n        if(c==\"(\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\")\"],\"string\");}\n        if(c==\"[\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"]\"],\"string\");}\n        if(c==\"{\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"}\"],\"string\");}\n        if(c==\"<\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\">\"],\"string\");}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[stream.eat(c)],\"string\");}}\n      else if(c==\"w\"){\n        c=look(stream, 1);\n        if(c==\"(\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\")\"],\"bracket\");}\n        if(c==\"[\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"]\"],\"bracket\");}\n        if(c==\"{\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"}\"],\"bracket\");}\n        if(c==\"<\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\">\"],\"bracket\");}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[stream.eat(c)],\"bracket\");}}\n      else if(c==\"r\"){\n        c=look(stream, 1);\n        if(c==\"(\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n        if(c==\"[\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n        if(c==\"{\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n        if(c==\"<\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\n      else if(/[\\^'\"!~\\/(\\[{<]/.test(c)){\n        if(c==\"(\"){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[\")\"],\"string\");}\n        if(c==\"[\"){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[\"]\"],\"string\");}\n        if(c==\"{\"){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[\"}\"],\"string\");}\n        if(c==\"<\"){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[\">\"],\"string\");}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          return tokenChain(stream,state,[stream.eat(c)],\"string\");}}}}\n  if(ch==\"m\"){\n    var c=look(stream, -2);\n    if(!(c&&/\\w/.test(c))){\n      c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n      if(c){\n        if(/[\\^'\"!~\\/]/.test(c)){\n          return tokenChain(stream,state,[c],RXstyle,RXmodifiers);}\n        if(c==\"(\"){\n          return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n        if(c==\"[\"){\n          return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n        if(c==\"{\"){\n          return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n        if(c==\"<\"){\n          return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}}}}\n  if(ch==\"s\"){\n    var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n    if(!c){\n      c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n      if(c){\n        if(c==\"[\")\n          return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n        if(c==\"{\")\n          return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n        if(c==\"<\")\n          return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n        if(c==\"(\")\n          return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\n  if(ch==\"y\"){\n    var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n    if(!c){\n      c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n      if(c){\n        if(c==\"[\")\n          return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n        if(c==\"{\")\n          return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n        if(c==\"<\")\n          return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n        if(c==\"(\")\n          return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\n  if(ch==\"t\"){\n    var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n    if(!c){\n      c=stream.eat(\"r\");if(c){\n        c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n        if(c){\n          if(c==\"[\")\n            return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n          if(c==\"{\")\n            return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n          if(c==\"<\")\n            return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n          if(c==\"(\")\n            return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n          return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}}\n  if(ch==\"`\"){\n    return tokenChain(stream,state,[ch],\"builtin\");}\n  if(ch==\"/\"){\n    if(!/~\\s*$/.test(prefix(stream)))\n      return \"operator\";\n    else\n      return tokenChain(stream,state,[ch],RXstyle,RXmodifiers);}\n  if(ch==\"$\"){\n    var p=stream.pos;\n    if(stream.eatWhile(/\\d/)||stream.eat(\"{\")&&stream.eatWhile(/\\d/)&&stream.eat(\"}\"))\n      return \"builtin\";\n    else\n      stream.pos=p;}\n  if(/[$@%]/.test(ch)){\n    var p=stream.pos;\n    if(stream.eat(\"^\")&&stream.eat(/[A-Z]/)||!/[@$%&]/.test(look(stream, -2))&&stream.eat(/[=|\\\\\\-#?@;:&`~\\^!\\[\\]*'\"$+.,\\/<>()]/)){\n      var c=stream.current();\n      if(PERL[c])\n        return \"builtin\";}\n    stream.pos=p;}\n  if(/[$@%&]/.test(ch)){\n    if(stream.eatWhile(/[\\w$]/)||stream.eat(\"{\")&&stream.eatWhile(/[\\w$]/)&&stream.eat(\"}\")){\n      var c=stream.current();\n      if(PERL[c])\n        return \"builtin\";\n      else\n        return \"variable\";}}\n  if(ch==\"#\"){\n    if(look(stream, -2)!=\"$\"){\n      stream.skipToEnd();\n      return \"comment\";}}\n  if(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/.test(ch)){\n    var p=stream.pos;\n    stream.eatWhile(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/);\n    if(PERL[stream.current()])\n      return \"operator\";\n    else\n      stream.pos=p;}\n  if(ch==\"_\"){\n    if(stream.pos==1){\n      if(suffix(stream, 6)==\"_END__\"){\n        return tokenChain(stream,state,['\\0'],\"comment\");}\n      else if(suffix(stream, 7)==\"_DATA__\"){\n        return tokenChain(stream,state,['\\0'],\"builtin\");}\n      else if(suffix(stream, 7)==\"_C__\"){\n        return tokenChain(stream,state,['\\0'],\"string\");}}}\n  if(/\\w/.test(ch)){\n    var p=stream.pos;\n    if(look(stream, -2)==\"{\"&&(look(stream, 0)==\"}\"||stream.eatWhile(/\\w/)&&look(stream, 0)==\"}\"))\n      return \"string\";\n    else\n      stream.pos=p;}\n  if(/[A-Z]/.test(ch)){\n    var l=look(stream, -2);\n    var p=stream.pos;\n    stream.eatWhile(/[A-Z_]/);\n    if(/[\\da-z]/.test(look(stream, 0))){\n      stream.pos=p;}\n    else{\n      var c=PERL[stream.current()];\n      if(!c)\n        return \"meta\";\n      if(c[1])\n        c=c[0];\n      if(l!=\":\"){\n        if(c==1)\n          return \"keyword\";\n        else if(c==2)\n          return \"def\";\n        else if(c==3)\n          return \"atom\";\n        else if(c==4)\n          return \"operator\";\n        else if(c==5)\n          return \"builtin\";\n        else\n          return \"meta\";}\n      else\n        return \"meta\";}}\n  if(/[a-zA-Z_]/.test(ch)){\n    var l=look(stream, -2);\n    stream.eatWhile(/\\w/);\n    var c=PERL[stream.current()];\n    if(!c)\n      return \"meta\";\n    if(c[1])\n      c=c[0];\n    if(l!=\":\"){\n      if(c==1)\n        return \"keyword\";\n      else if(c==2)\n        return \"def\";\n      else if(c==3)\n        return \"atom\";\n      else if(c==4)\n        return \"operator\";\n      else if(c==5)\n        return \"builtin\";\n      else\n        return \"meta\";}\n    else\n      return \"meta\";}\n  return null;}\n\nexport const perl = {\n  name: \"perl\",\n\n  startState: function() {\n    return {\n      tokenize: tokenPerl,\n      chain: null,\n      style: null,\n      tail: null\n    };\n  },\n  token: function(stream, state) {\n    return (state.tokenize || tokenPerl)(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"#\"},\n    wordChars: \"$\"\n  }\n};\n", "function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = words(\n  \"absolute and array asm begin case const constructor destructor div do \" +\n    \"downto else end file for function goto if implementation in inherited \" +\n    \"inline interface label mod nil not object of operator or packed procedure \" +\n    \"program record reintroduce repeat self set shl shr string then to type \" +\n    \"unit until uses var while with xor as class dispinterface except exports \" +\n    \"finalization finally initialization inline is library on out packed \" +\n    \"property raise resourcestring threadvar try absolute abstract alias \" +\n    \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" +\n    \"dynamic enumerator experimental export external far far16 forward generic \" +\n    \"helper implements index interrupt iocheck local message name near \" +\n    \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" +\n    \"pascal platform private protected public published read register \" +\n    \"reintroduce result safecall saveregisters softfloat specialize static \" +\n    \"stdcall stored strict unaligned unimplemented varargs virtual write\");\nvar atoms = {\"null\": true};\n\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == \"#\" && state.startOfLine) {\n    stream.skipToEnd();\n    return \"meta\";\n  }\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (ch == \"(\" && stream.eat(\"*\")) {\n    state.tokenize = tokenComment;\n    return tokenComment(stream, state);\n  }\n  if (ch == \"{\") {\n    state.tokenize = tokenCommentBraces;\n    return tokenCommentBraces(stream, state);\n  }\n  if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \")\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenCommentBraces(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"}\") {\n      state.tokenize = null;\n      break;\n    }\n  }\n  return \"comment\";\n}\n\n// Interface\n\nexport const pascal = {\n  name: \"pascal\",\n\n  startState: function() {\n    return {tokenize: null};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    return style;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {block: {open: \"(*\", close: \"*)\"}}\n  }\n};\n", "function buildRegexp(patterns, options) {\n  options = options || {};\n  var prefix = options.prefix !== undefined ? options.prefix : '^';\n  var suffix = options.suffix !== undefined ? options.suffix : '\\\\b';\n\n  for (var i = 0; i < patterns.length; i++) {\n    if (patterns[i] instanceof RegExp) {\n      patterns[i] = patterns[i].source;\n    }\n    else {\n      patterns[i] = patterns[i].replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n  }\n\n  return new RegExp(prefix + '(' + patterns.join('|') + ')' + suffix, 'i');\n}\n\nvar notCharacterOrDash = '(?=[^A-Za-z\\\\d\\\\-_]|$)';\nvar varNames = /[\\w\\-:]/\nvar keywords = buildRegexp([\n  /begin|break|catch|continue|data|default|do|dynamicparam/,\n  /else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in/,\n  /param|process|return|switch|throw|trap|try|until|where|while/\n], { suffix: notCharacterOrDash });\n\nvar punctuation = /[\\[\\]{},;`\\\\\\.]|@[({]/;\nvar wordOperators = buildRegexp([\n  'f',\n  /b?not/,\n  /[ic]?split/, 'join',\n  /is(not)?/, 'as',\n  /[ic]?(eq|ne|[gl][te])/,\n  /[ic]?(not)?(like|match|contains)/,\n  /[ic]?replace/,\n  /b?(and|or|xor)/\n], { prefix: '-' });\nvar symbolOperators = /[+\\-*\\/%]=|\\+\\+|--|\\.\\.|[+\\-*&^%:=!|\\/]|<(?!#)|(?!#)>/;\nvar operators = buildRegexp([wordOperators, symbolOperators], { suffix: '' });\n\nvar numbers = /^((0x[\\da-f]+)|((\\d+\\.\\d+|\\d\\.|\\.\\d+|\\d+)(e[\\+\\-]?\\d+)?))[ld]?([kmgtp]b)?/i;\n\nvar identifiers = /^[A-Za-z\\_][A-Za-z\\-\\_\\d]*\\b/;\n\nvar symbolBuiltins = /[A-Z]:|%|\\?/i;\nvar namedBuiltins = buildRegexp([\n  /Add-(Computer|Content|History|Member|PSSnapin|Type)/,\n  /Checkpoint-Computer/,\n  /Clear-(Content|EventLog|History|Host|Item(Property)?|Variable)/,\n  /Compare-Object/,\n  /Complete-Transaction/,\n  /Connect-PSSession/,\n  /ConvertFrom-(Csv|Json|SecureString|StringData)/,\n  /Convert-Path/,\n  /ConvertTo-(Csv|Html|Json|SecureString|Xml)/,\n  /Copy-Item(Property)?/,\n  /Debug-Process/,\n  /Disable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,\n  /Disconnect-PSSession/,\n  /Enable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,\n  /(Enter|Exit)-PSSession/,\n  /Export-(Alias|Clixml|Console|Counter|Csv|FormatData|ModuleMember|PSSession)/,\n  /ForEach-Object/,\n  /Format-(Custom|List|Table|Wide)/,\n  new RegExp('Get-(Acl|Alias|AuthenticodeSignature|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Counter|Credential'\n             + '|Culture|Date|Event|EventLog|EventSubscriber|ExecutionPolicy|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job'\n             + '|Location|Member|Module|PfxCertificate|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration'\n             + '|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|Verb|WinEvent|WmiObject)'),\n  /Group-Object/,\n  /Import-(Alias|Clixml|Counter|Csv|LocalizedData|Module|PSSession)/,\n  /ImportSystemModules/,\n  /Invoke-(Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)/,\n  /Join-Path/,\n  /Limit-EventLog/,\n  /Measure-(Command|Object)/,\n  /Move-Item(Property)?/,\n  new RegExp('New-(Alias|Event|EventLog|Item(Property)?|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile'\n             + '|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy|WinEvent)'),\n  /Out-(Default|File|GridView|Host|Null|Printer|String)/,\n  /Pause/,\n  /(Pop|Push)-Location/,\n  /Read-Host/,\n  /Receive-(Job|PSSession)/,\n  /Register-(EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)/,\n  /Remove-(Computer|Event|EventLog|Item(Property)?|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)/,\n  /Rename-(Computer|Item(Property)?)/,\n  /Reset-ComputerMachinePassword/,\n  /Resolve-Path/,\n  /Restart-(Computer|Service)/,\n  /Restore-Computer/,\n  /Resume-(Job|Service)/,\n  /Save-Help/,\n  /Select-(Object|String|Xml)/,\n  /Send-MailMessage/,\n  new RegExp('Set-(Acl|Alias|AuthenticodeSignature|Content|Date|ExecutionPolicy|Item(Property)?|Location|PSBreakpoint|PSDebug' +\n             '|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)'),\n  /Show-(Command|ControlPanelItem|EventLog)/,\n  /Sort-Object/,\n  /Split-Path/,\n  /Start-(Job|Process|Service|Sleep|Transaction|Transcript)/,\n  /Stop-(Computer|Job|Process|Service|Transcript)/,\n  /Suspend-(Job|Service)/,\n  /TabExpansion2/,\n  /Tee-Object/,\n  /Test-(ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)/,\n  /Trace-Command/,\n  /Unblock-File/,\n  /Undo-Transaction/,\n  /Unregister-(Event|PSSessionConfiguration)/,\n  /Update-(FormatData|Help|List|TypeData)/,\n  /Use-Transaction/,\n  /Wait-(Event|Job|Process)/,\n  /Where-Object/,\n  /Write-(Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning)/,\n  /cd|help|mkdir|more|oss|prompt/,\n  /ac|asnp|cat|cd|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|dnsn|ebp/,\n  /echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fl|foreach|ft|fw|gal|gbp|gc|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps/,\n  /group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md/,\n  /measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|pwd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri/,\n  /rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls/,\n  /sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|where|wjb|write/\n], { prefix: '', suffix: '' });\nvar variableBuiltins = buildRegexp([\n  /[$?^_]|Args|ConfirmPreference|ConsoleFileName|DebugPreference|Error|ErrorActionPreference|ErrorView|ExecutionContext/,\n  /FormatEnumerationLimit|Home|Host|Input|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount/,\n  /MaximumHistoryCount|MaximumVariableCount|MyInvocation|NestedPromptLevel|OutputEncoding|Pid|Profile|ProgressPreference/,\n  /PSBoundParameters|PSCommandPath|PSCulture|PSDefaultParameterValues|PSEmailServer|PSHome|PSScriptRoot|PSSessionApplicationName/,\n  /PSSessionConfigurationName|PSSessionOption|PSUICulture|PSVersionTable|Pwd|ShellId|StackTrace|VerbosePreference/,\n  /WarningPreference|WhatIfPreference/,\n\n  /Event|EventArgs|EventSubscriber|Sender/,\n  /Matches|Ofs|ForEach|LastExitCode|PSCmdlet|PSItem|PSSenderInfo|This/,\n  /true|false|null/\n], { prefix: '\\\\$', suffix: '' });\n\nvar builtins = buildRegexp([symbolBuiltins, namedBuiltins, variableBuiltins], { suffix: notCharacterOrDash });\n\nvar grammar = {\n  keyword: keywords,\n  number: numbers,\n  operator: operators,\n  builtin: builtins,\n  punctuation: punctuation,\n  variable: identifiers\n};\n\n// tokenizers\nfunction tokenBase(stream, state) {\n  // Handle Comments\n  //var ch = stream.peek();\n\n  var parent = state.returnStack[state.returnStack.length - 1];\n  if (parent && parent.shouldReturnFrom(state)) {\n    state.tokenize = parent.tokenize;\n    state.returnStack.pop();\n    return state.tokenize(stream, state);\n  }\n\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  if (stream.eat('(')) {\n    state.bracketNesting += 1;\n    return 'punctuation';\n  }\n\n  if (stream.eat(')')) {\n    state.bracketNesting -= 1;\n    return 'punctuation';\n  }\n\n  for (var key in grammar) {\n    if (stream.match(grammar[key])) {\n      return key;\n    }\n  }\n\n  var ch = stream.next();\n\n  // single-quote string\n  if (ch === \"'\") {\n    return tokenSingleQuoteString(stream, state);\n  }\n\n  if (ch === '$') {\n    return tokenVariable(stream, state);\n  }\n\n  // double-quote string\n  if (ch === '\"') {\n    return tokenDoubleQuoteString(stream, state);\n  }\n\n  if (ch === '<' && stream.eat('#')) {\n    state.tokenize = tokenComment;\n    return tokenComment(stream, state);\n  }\n\n  if (ch === '#') {\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  if (ch === '@') {\n    var quoteMatch = stream.eat(/[\"']/);\n    if (quoteMatch && stream.eol()) {\n      state.tokenize = tokenMultiString;\n      state.startQuote = quoteMatch[0];\n      return tokenMultiString(stream, state);\n    } else if (stream.eol()) {\n      return 'error';\n    } else if (stream.peek().match(/[({]/)) {\n      return 'punctuation';\n    } else if (stream.peek().match(varNames)) {\n      // splatted variable\n      return tokenVariable(stream, state);\n    }\n  }\n  return 'error';\n}\n\nfunction tokenSingleQuoteString(stream, state) {\n  var ch;\n  while ((ch = stream.peek()) != null) {\n    stream.next();\n\n    if (ch === \"'\" && !stream.eat(\"'\")) {\n      state.tokenize = tokenBase;\n      return 'string';\n    }\n  }\n\n  return 'error';\n}\n\nfunction tokenDoubleQuoteString(stream, state) {\n  var ch;\n  while ((ch = stream.peek()) != null) {\n    if (ch === '$') {\n      state.tokenize = tokenStringInterpolation;\n      return 'string';\n    }\n\n    stream.next();\n    if (ch === '`') {\n      stream.next();\n      continue;\n    }\n\n    if (ch === '\"' && !stream.eat('\"')) {\n      state.tokenize = tokenBase;\n      return 'string';\n    }\n  }\n\n  return 'error';\n}\n\nfunction tokenStringInterpolation(stream, state) {\n  return tokenInterpolation(stream, state, tokenDoubleQuoteString);\n}\n\nfunction tokenMultiStringReturn(stream, state) {\n  state.tokenize = tokenMultiString;\n  state.startQuote = '\"'\n  return tokenMultiString(stream, state);\n}\n\nfunction tokenHereStringInterpolation(stream, state) {\n  return tokenInterpolation(stream, state, tokenMultiStringReturn);\n}\n\nfunction tokenInterpolation(stream, state, parentTokenize) {\n  if (stream.match('$(')) {\n    var savedBracketNesting = state.bracketNesting;\n    state.returnStack.push({\n      /*jshint loopfunc:true */\n      shouldReturnFrom: function(state) {\n        return state.bracketNesting === savedBracketNesting;\n      },\n      tokenize: parentTokenize\n    });\n    state.tokenize = tokenBase;\n    state.bracketNesting += 1;\n    return 'punctuation';\n  } else {\n    stream.next();\n    state.returnStack.push({\n      shouldReturnFrom: function() { return true; },\n      tokenize: parentTokenize\n    });\n    state.tokenize = tokenVariable;\n    return state.tokenize(stream, state);\n  }\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while ((ch = stream.next()) != null) {\n    if (maybeEnd && ch == '>') {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch === '#');\n  }\n  return 'comment';\n}\n\nfunction tokenVariable(stream, state) {\n  var ch = stream.peek();\n  if (stream.eat('{')) {\n    state.tokenize = tokenVariableWithBraces;\n    return tokenVariableWithBraces(stream, state);\n  } else if (ch != undefined && ch.match(varNames)) {\n    stream.eatWhile(varNames);\n    state.tokenize = tokenBase;\n    return 'variable';\n  } else {\n    state.tokenize = tokenBase;\n    return 'error';\n  }\n}\n\nfunction tokenVariableWithBraces(stream, state) {\n  var ch;\n  while ((ch = stream.next()) != null) {\n    if (ch === '}') {\n      state.tokenize = tokenBase;\n      break;\n    }\n  }\n  return 'variable';\n}\n\nfunction tokenMultiString(stream, state) {\n  var quote = state.startQuote;\n  if (stream.sol() && stream.match(new RegExp(quote + '@'))) {\n    state.tokenize = tokenBase;\n  }\n  else if (quote === '\"') {\n    while (!stream.eol()) {\n      var ch = stream.peek();\n      if (ch === '$') {\n        state.tokenize = tokenHereStringInterpolation;\n        return 'string';\n      }\n\n      stream.next();\n      if (ch === '`') {\n        stream.next();\n      }\n    }\n  }\n  else {\n    stream.skipToEnd();\n  }\n\n  return 'string';\n}\n\nexport const powerShell = {\n  name: \"powershell\",\n\n  startState: function() {\n    return {\n      returnStack: [],\n      bracketNesting: 0,\n      tokenize: tokenBase\n    };\n  },\n\n  token: function(stream, state) {\n    return state.tokenize(stream, state);\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\", block: {open: \"<#\", close: \"#>\"}}\n  }\n};\n", "export const properties = {\n  name: \"properties\",\n\n  token: function(stream, state) {\n    var sol = stream.sol() || state.afterSection;\n    var eol = stream.eol();\n\n    state.afterSection = false;\n\n    if (sol) {\n      if (state.nextMultiline) {\n        state.inMultiline = true;\n        state.nextMultiline = false;\n      } else {\n        state.position = \"def\";\n      }\n    }\n\n    if (eol && ! state.nextMultiline) {\n      state.inMultiline = false;\n      state.position = \"def\";\n    }\n\n    if (sol) {\n      while(stream.eatSpace()) {}\n    }\n\n    var ch = stream.next();\n\n    if (sol && (ch === \"#\" || ch === \"!\" || ch === \";\")) {\n      state.position = \"comment\";\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (sol && ch === \"[\") {\n      state.afterSection = true;\n      stream.skipTo(\"]\"); stream.eat(\"]\");\n      return \"header\";\n    } else if (ch === \"=\" || ch === \":\") {\n      state.position = \"quote\";\n      return null;\n    } else if (ch === \"\\\\\" && state.position === \"quote\") {\n      if (stream.eol()) {  // end of line?\n        // Multiline value\n        state.nextMultiline = true;\n      }\n    }\n\n    return state.position;\n  },\n\n  startState: function() {\n    return {\n      position : \"def\",       // Current position, \"def\", \"quote\" or \"comment\"\n      nextMultiline : false,  // Is the next line multiline value\n      inMultiline : false,    // Is the current line a multiline value\n      afterSection : false    // Did we just open a section\n    };\n  }\n\n};\n", "function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\nvar commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                      \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                      \"for\", \"from\", \"global\", \"if\", \"import\",\n                      \"lambda\", \"pass\", \"raise\", \"return\",\n                      \"try\", \"while\", \"with\", \"yield\", \"in\", \"False\", \"True\"];\nvar commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                      \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                      \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                      \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                      \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                      \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                      \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                      \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                      \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                      \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                      \"Ellipsis\", \"__debug__\"];\n\nfunction top(state) {\n  return state.scopes[state.scopes.length - 1];\n}\n\nexport function mkPython(parserConf) {\n  var ERRORCLASS = \"error\";\n\n  var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n  //               (Backwards-compatibility with old, cumbersome config system)\n  var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,\n                   parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/]\n  for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1)\n\n  var hangingIndent = parserConf.hangingIndent;\n\n  var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n  if (parserConf.extra_keywords != undefined)\n    myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n  if (parserConf.extra_builtins != undefined)\n    myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n  var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n  if (py3) {\n    // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n    var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n    myKeywords = myKeywords.concat([\"nonlocal\", \"None\", \"aiter\", \"anext\", \"async\", \"await\", \"breakpoint\", \"match\", \"case\"]);\n    myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n    var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  } else {\n    var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n    myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n    myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                    \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                    \"unichr\", \"unicode\", \"xrange\", \"None\"]);\n    var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  }\n  var keywords = wordRegexp(myKeywords);\n  var builtins = wordRegexp(myBuiltins);\n\n  // tokenizers\n  function tokenBase(stream, state) {\n    var sol = stream.sol() && state.lastToken != \"\\\\\"\n    if (sol) state.indent = stream.indentation()\n    // Handle scope changes\n    if (sol && top(state).type == \"py\") {\n      var scopeOffset = top(state).offset;\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset)\n          pushPyScope(stream, state);\n        else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n          state.errorToken = true;\n        return null;\n      } else {\n        var style = tokenBaseInner(stream, state);\n        if (scopeOffset > 0 && dedent(stream, state))\n          style += \" \" + ERRORCLASS;\n        return style;\n      }\n    }\n    return tokenBaseInner(stream, state);\n  }\n\n  function tokenBaseInner(stream, state, inFormat) {\n    if (stream.eatSpace()) return null;\n\n    // Handle Comments\n    if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.]/, false)) {\n      var floatLiteral = false;\n      // Floats\n      if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n      if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n      if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n      if (floatLiteral) {\n        // Float literals may be \"imaginary\"\n        stream.eat(/J/i);\n        return \"number\";\n      }\n      // Integers\n      var intLiteral = false;\n      // Hex\n      if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n      // Binary\n      if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n      // Octal\n      if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n      // Decimal\n      if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n        // Decimal literals may be \"imaginary\"\n        stream.eat(/J/i);\n        // TODO - Can you have imaginary longs?\n        intLiteral = true;\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n      if (intLiteral) {\n        // Integer literals may be \"long\"\n        stream.eat(/L/i);\n        return \"number\";\n      }\n    }\n\n    // Handle Strings\n    if (stream.match(stringPrefixes)) {\n      var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n      if (!isFmtString) {\n        state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      } else {\n        state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      }\n    }\n\n    for (var i = 0; i < operators.length; i++)\n      if (stream.match(operators[i])) return \"operator\"\n\n    if (stream.match(delimiters)) return \"punctuation\";\n\n    if (state.lastToken == \".\" && stream.match(identifiers))\n      return \"property\";\n\n    if (stream.match(keywords) || stream.match(wordOperators))\n      return \"keyword\";\n\n    if (stream.match(builtins))\n      return \"builtin\";\n\n    if (stream.match(/^(self|cls)\\b/))\n      return \"self\";\n\n    if (stream.match(identifiers)) {\n      if (state.lastToken == \"def\" || state.lastToken == \"class\")\n        return \"def\";\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return inFormat ? null :ERRORCLASS;\n  }\n\n  function formatStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n      delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenNestedExpr(depth) {\n      return function(stream, state) {\n        var inner = tokenBaseInner(stream, state, true)\n        if (inner == \"punctuation\") {\n          if (stream.current() == \"{\") {\n            state.tokenize = tokenNestedExpr(depth + 1)\n          } else if (stream.current() == \"}\") {\n            if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1)\n            else state.tokenize = tokenString\n          }\n        }\n        return inner\n      }\n    }\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol())\n            return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else if (stream.match('{{')) {\n          // ignore {{ in f-str\n          return OUTCLASS;\n        } else if (stream.match('{', false)) {\n          // switch to nested mode\n          state.tokenize = tokenNestedExpr(0)\n          if (stream.current()) return OUTCLASS;\n          else return state.tokenize(stream, state)\n        } else if (stream.match('}}')) {\n          return OUTCLASS;\n        } else if (stream.match('}')) {\n          // single } in f-string is an error\n          return ERRORCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors)\n          return ERRORCLASS;\n        else\n          state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function tokenStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n      delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol())\n            return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors)\n          return ERRORCLASS;\n        else\n          state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function pushPyScope(stream, state) {\n    while (top(state).type != \"py\") state.scopes.pop()\n    state.scopes.push({offset: top(state).offset + stream.indentUnit,\n                       type: \"py\",\n                       align: null})\n  }\n\n  function pushBracketScope(stream, state, type) {\n    var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1\n    state.scopes.push({offset: state.indent + (hangingIndent || stream.indentUnit),\n                       type: type,\n                       align: align})\n  }\n\n  function dedent(stream, state) {\n    var indented = stream.indentation();\n    while (state.scopes.length > 1 && top(state).offset > indented) {\n      if (top(state).type != \"py\") return true;\n      state.scopes.pop();\n    }\n    return top(state).offset != indented;\n  }\n\n  function tokenLexer(stream, state) {\n    if (stream.sol()) {\n      state.beginningOfLine = true;\n      state.dedent = false;\n    }\n\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    // Handle decorators\n    if (state.beginningOfLine && current == \"@\")\n      return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n    if (/\\S/.test(current)) state.beginningOfLine = false;\n\n    if ((style == \"variable\" || style == \"builtin\")\n        && state.lastToken == \"meta\")\n      style = \"meta\";\n\n    // Handle scope changes.\n    if (current == \"pass\" || current == \"return\")\n      state.dedent = true;\n\n    if (current == \"lambda\") state.lambda = true;\n    if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false))\n      pushPyScope(stream, state);\n\n    if (current.length == 1 && !/string|comment/.test(style)) {\n      var delimiter_index = \"[({\".indexOf(current);\n      if (delimiter_index != -1)\n        pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n      delimiter_index = \"])}\".indexOf(current);\n      if (delimiter_index != -1) {\n        if (top(state).type == current) state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit)\n        else return ERRORCLASS;\n      }\n    }\n    if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1)\n      state.scopes.pop();\n\n    return style;\n  }\n\n  return {\n    name: \"python\",\n\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: [{offset: 0, type: \"py\", align: null}],\n        indent: 0,\n        lastToken: null,\n        lambda: false,\n        dedent: 0\n      };\n    },\n\n    token: function(stream, state) {\n      var addErr = state.errorToken;\n      if (addErr) state.errorToken = false;\n      var style = tokenLexer(stream, state);\n\n      if (style && style != \"comment\")\n        state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n      if (style == \"punctuation\") style = null;\n\n      if (stream.eol() && state.lambda)\n        state.lambda = false;\n      return addErr ? ERRORCLASS : style;\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize != tokenBase)\n        return state.tokenize.isString ? null : 0;\n\n      var scope = top(state)\n      var closing = scope.type == textAfter.charAt(0) ||\n          scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter)\n      if (scope.align != null)\n        return scope.align - (closing ? 1 : 0)\n      else\n        return scope.offset - (closing ? hangingIndent || cx.unit : 0)\n    },\n\n    languageData: {\n      autocomplete: commonKeywords.concat(commonBuiltins).concat([\"exec\", \"print\"]),\n      indentOnInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      commentTokens: {line: \"#\"},\n      closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']}\n    }\n  };\n};\n\nvar words = function(str) { return str.split(\" \"); };\n\nexport const python = mkPython({})\n\nexport const cython = mkPython({\n  extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \"+\n                        \"extern gil include nogil property public \"+\n                        \"readonly struct union DEF IF ELIF ELSE\")\n})\n", "function wordObj(words) {\n  var o = {};\n  for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n  return o;\n}\n\nvar keywordList = [\n  \"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\",\n  \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\",\n  \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\",\n  \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\",\n  \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\",\n  \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"\n], keywords = wordObj(keywordList);\n\nvar indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\",\n                           \"catch\", \"loop\", \"proc\", \"begin\"]);\nvar dedentWords = wordObj([\"end\", \"until\"]);\nvar opening = {\"[\": \"]\", \"{\": \"}\", \"(\": \")\"};\nvar closing = {\"]\": \"[\", \"}\": \"{\", \")\": \"(\"};\n\nvar curPunc;\n\nfunction chain(newtok, stream, state) {\n  state.tokenize.push(newtok);\n  return newtok(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n    state.tokenize.push(readBlockComment);\n    return \"comment\";\n  }\n  if (stream.eatSpace()) return null;\n  var ch = stream.next(), m;\n  if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n    return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n  } else if (ch == \"/\") {\n    if (regexpAhead(stream))\n      return chain(readQuoted(ch, \"string.special\", true), stream, state);\n    else\n      return \"operator\";\n  } else if (ch == \"%\") {\n    var style = \"string\", embed = true;\n    if (stream.eat(\"s\")) style = \"atom\";\n    else if (stream.eat(/[WQ]/)) style = \"string\";\n    else if (stream.eat(/[r]/)) style = \"string.special\";\n    else if (stream.eat(/[wxq]/)) { style = \"string\"; embed = false; }\n    var delim = stream.eat(/[^\\w\\s=]/);\n    if (!delim) return \"operator\";\n    if (opening.propertyIsEnumerable(delim)) delim = opening[delim];\n    return chain(readQuoted(delim, style, embed, true), stream, state);\n  } else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == \"<\" && (m = stream.match(/^<([-~])[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n    return chain(readHereDoc(m[2], m[1]), stream, state);\n  } else if (ch == \"0\") {\n    if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);\n    else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);\n    else stream.eatWhile(/[0-7]/);\n    return \"number\";\n  } else if (/\\d/.test(ch)) {\n    stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n    return \"number\";\n  } else if (ch == \"?\") {\n    while (stream.match(/^\\\\[CM]-/)) {}\n    if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);\n    else stream.next();\n    return \"string\";\n  } else if (ch == \":\") {\n    if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n    if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state);\n\n    // :> :>> :< :<< are valid symbols\n    if (stream.eat(/[\\<\\>]/)) {\n      stream.eat(/[\\<\\>]/);\n      return \"atom\";\n    }\n\n    // :+ :- :/ :* :| :& :! are valid symbols\n    if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n      return \"atom\";\n    }\n\n    // Symbols can't start by a digit\n    if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n      stream.eatWhile(/[\\w$\\xa1-\\uffff]/);\n      // Only one ? ! = is allowed and only as the last character\n      stream.eat(/[\\?\\!\\=]/);\n      return \"atom\";\n    }\n    return \"operator\";\n  } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n    stream.eat(\"@\");\n    stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n    return \"propertyName\";\n  } else if (ch == \"$\") {\n    if (stream.eat(/[a-zA-Z_]/)) {\n      stream.eatWhile(/[\\w]/);\n    } else if (stream.eat(/\\d/)) {\n      stream.eat(/\\d/);\n    } else {\n      stream.next(); // Must be a special global like $: or $!\n    }\n    return \"variableName.special\";\n  } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n    stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n    stream.eat(/[\\?\\!]/);\n    if (stream.eat(\":\")) return \"atom\";\n    return \"variable\";\n  } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n    curPunc = \"|\";\n    return null;\n  } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  } else if (ch == \"-\" && stream.eat(\">\")) {\n    return \"operator\";\n  } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n    var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n    if (ch == \".\" && !more) curPunc = \".\";\n    return \"operator\";\n  } else {\n    return null;\n  }\n}\n\nfunction regexpAhead(stream) {\n  var start = stream.pos, depth = 0, next, found = false, escaped = false\n  while ((next = stream.next()) != null) {\n    if (!escaped) {\n      if (\"[{(\".indexOf(next) > -1) {\n        depth++\n      } else if (\"]})\".indexOf(next) > -1) {\n        depth--\n        if (depth < 0) break\n      } else if (next == \"/\" && depth == 0) {\n        found = true\n        break\n      }\n      escaped = next == \"\\\\\"\n    } else {\n      escaped = false\n    }\n  }\n  stream.backUp(stream.pos - start)\n  return found\n}\n\nfunction tokenBaseUntilBrace(depth) {\n  if (!depth) depth = 1;\n  return function(stream, state) {\n    if (stream.peek() == \"}\") {\n      if (depth == 1) {\n        state.tokenize.pop();\n        return state.tokenize[state.tokenize.length-1](stream, state);\n      } else {\n        state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n      }\n    } else if (stream.peek() == \"{\") {\n      state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n    }\n    return tokenBase(stream, state);\n  };\n}\nfunction tokenBaseOnce() {\n  var alreadyCalled = false;\n  return function(stream, state) {\n    if (alreadyCalled) {\n      state.tokenize.pop();\n      return state.tokenize[state.tokenize.length-1](stream, state);\n    }\n    alreadyCalled = true;\n    return tokenBase(stream, state);\n  };\n}\nfunction readQuoted(quote, style, embed, unescaped) {\n  return function(stream, state) {\n    var escaped = false, ch;\n\n    if (state.context.type === 'read-quoted-paused') {\n      state.context = state.context.prev;\n      stream.eat(\"}\");\n    }\n\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && (unescaped || !escaped)) {\n        state.tokenize.pop();\n        break;\n      }\n      if (embed && ch == \"#\" && !escaped) {\n        if (stream.eat(\"{\")) {\n          if (quote == \"}\") {\n            state.context = {prev: state.context, type: 'read-quoted-paused'};\n          }\n          state.tokenize.push(tokenBaseUntilBrace());\n          break;\n        } else if (/[@\\$]/.test(stream.peek())) {\n          state.tokenize.push(tokenBaseOnce());\n          break;\n        }\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return style;\n  };\n}\nfunction readHereDoc(phrase, mayIndent) {\n  return function(stream, state) {\n    if (mayIndent) stream.eatSpace()\n    if (stream.match(phrase)) state.tokenize.pop();\n    else stream.skipToEnd();\n    return \"string\";\n  };\n}\nfunction readBlockComment(stream, state) {\n  if (stream.sol() && stream.match(\"=end\") && stream.eol())\n    state.tokenize.pop();\n  stream.skipToEnd();\n  return \"comment\";\n}\n\nexport const ruby = {\n  name: \"ruby\",\n  startState: function(indentUnit) {\n    return {tokenize: [tokenBase],\n            indented: 0,\n            context: {type: \"top\", indented: -indentUnit},\n            continuedLine: false,\n            lastTok: null,\n            varList: false};\n  },\n\n  token: function(stream, state) {\n    curPunc = null;\n    if (stream.sol()) state.indented = stream.indentation();\n    var style = state.tokenize[state.tokenize.length-1](stream, state), kwtype;\n    var thisTok = curPunc;\n    if (style == \"variable\") {\n      var word = stream.current();\n      style = state.lastTok == \".\" ? \"property\"\n        : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\"\n        : /^[A-Z]/.test(word) ? \"tag\"\n        : (state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList) ? \"def\"\n        : \"variable\";\n      if (style == \"keyword\") {\n        thisTok = word;\n        if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";\n        else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";\n        else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation())\n          kwtype = \"indent\";\n        else if (word == \"do\" && state.context.indented < state.indented)\n          kwtype = \"indent\";\n      }\n    }\n    if (curPunc || (style && style != \"comment\")) state.lastTok = thisTok;\n    if (curPunc == \"|\") state.varList = !state.varList;\n\n    if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc))\n      state.context = {prev: state.context, type: curPunc || style, indented: state.indented};\n    else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev)\n      state.context = state.context.prev;\n\n    if (stream.eol())\n      state.continuedLine = (curPunc == \"\\\\\" || style == \"operator\");\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize[state.tokenize.length-1] != tokenBase) return null;\n    var firstChar = textAfter && textAfter.charAt(0);\n    var ct = state.context;\n    var closed = ct.type == closing[firstChar] ||\n        ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n    return ct.indented + (closed ? 0 : cx.unit) +\n      (state.continuedLine ? cx.unit : 0);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n    commentTokens: {line: \"#\"},\n    autocomplete: keywordList\n  }\n};\n\n", "export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;\n  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n    var list = states_[state] = [], orig = states[state];\n    for (var i = 0; i < orig.length; i++) {\n      var data = orig[i];\n      list.push(new Rule(data, states));\n      if (data.indent || data.dedent) hasIndentation = true;\n    }\n  }\n  return {\n    name: meta.name,\n    startState: function() {\n      return {state: \"start\", pending: null, indent: hasIndentation ? [] : null};\n    },\n    copyState: function(state) {\n      var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};\n      if (state.stack)\n        s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    languageData: meta\n  }\n};\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name))\n    throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n  for (var i = 0; i < val.length; i++)\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function(stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent)\n          state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent)\n          state.indent.pop();\n        var token = rule.token\n        if (token && token.apply) token = token(matches)\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n          for (var j = 2; j < matches.length; j++)\n            if (matches[j])\n              state.pending.push({text: matches[j], token: rule.token[j - 1]});\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function(state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)\n      return null\n\n    var pos = state.indent.length - 1, rules = states[state.state];\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n      break;\n    }\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}\n", "import {simpleMode} from \"./simple-mode.js\"\n\nexport const rust = simpleMode({\n  start: [\n    // string and byte string\n    {regex: /b?\"/, token: \"string\", next: \"string\"},\n    // raw string and raw byte string\n    {regex: /b?r\"/, token: \"string\", next: \"string_raw\"},\n    {regex: /b?r#+\"/, token: \"string\", next: \"string_raw_hash\"},\n    // character\n    {regex: /'(?:[^'\\\\]|\\\\(?:[nrt0'\"]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\}))'/, token: \"string.special\"},\n    // byte\n    {regex: /b'(?:[^']|\\\\(?:['\\\\nrt0]|x[\\da-fA-F]{2}))'/, token: \"string.special\"},\n\n    {regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,\n     token: \"number\"},\n    {regex: /(let(?:\\s+mut)?|fn|enum|mod|struct|type|union)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/, token: [\"keyword\", null, \"def\"]},\n    {regex: /(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, token: \"keyword\"},\n    {regex: /\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\\b/, token: \"atom\"},\n    {regex: /\\b(?:true|false|Some|None|Ok|Err)\\b/, token: \"builtin\"},\n    {regex: /\\b(fn)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n     token: [\"keyword\", null ,\"def\"]},\n    {regex: /#!?\\[.*\\]/, token: \"meta\"},\n    {regex: /\\/\\/.*/, token: \"comment\"},\n    {regex: /\\/\\*/, token: \"comment\", next: \"comment\"},\n    {regex: /[-+\\/*=<>!]+/, token: \"operator\"},\n    {regex: /[a-zA-Z_]\\w*!/,token: \"macroName\"},\n    {regex: /[a-zA-Z_]\\w*/, token: \"variable\"},\n    {regex: /[\\{\\[\\(]/, indent: true},\n    {regex: /[\\}\\]\\)]/, dedent: true}\n  ],\n  string: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\\\\\"]|\\\\(?:.|$))*/, token: \"string\"}\n  ],\n  string_raw: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /[^\"]*/, token: \"string\"}\n  ],\n  string_raw_hash: [\n    {regex: /\"#+/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\"]|\"(?!#))*/, token: \"string\"}\n  ],\n  comment: [\n    {regex: /.*?\\*\\//, token: \"comment\", next: \"start\"},\n    {regex: /.*/, token: \"comment\"}\n  ],\n  languageData: {\n    name: \"rust\",\n    dontIndentStates: [\"comment\"],\n    indentOnInput: /^\\s*\\}$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n  }\n});\n", "var BUILTIN = \"builtin\", COMMENT = \"comment\", STRING = \"string\",\n    SYMBOL = \"symbol\", ATOM = \"atom\", NUMBER = \"number\", BRACKET = \"bracket\";\nvar INDENT_WORD_SKIP = 2;\n\nfunction makeKeywords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = makeKeywords(\"\u03BB case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?\");\nvar indentKeys = makeKeywords(\"define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless\");\n\nfunction stateStack(indent, type, prev) { // represents a state stack object\n  this.indent = indent;\n  this.type = type;\n  this.prev = prev;\n}\n\nfunction pushStack(state, indent, type) {\n  state.indentStack = new stateStack(indent, type, state.indentStack);\n}\n\nfunction popStack(state) {\n  state.indentStack = state.indentStack.prev;\n}\n\nvar binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\\/[01]+#*)?i|[-+]?[01]+#*(?:\\/[01]+#*)?@[-+]?[01]+#*(?:\\/[01]+#*)?|[-+]?[01]+#*(?:\\/[01]+#*)?[-+](?:[01]+#*(?:\\/[01]+#*)?)?i|[-+]?[01]+#*(?:\\/[01]+#*)?)(?=[()\\s;\"]|$)/i);\nvar octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?)(?=[()\\s;\"]|$)/i);\nvar hexMatcher = new RegExp(/^(?:[-+]i|[-+][\\da-f]+#*(?:\\/[\\da-f]+#*)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?@[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?[-+](?:[\\da-f]+#*(?:\\/[\\da-f]+#*)?)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?)(?=[()\\s;\"]|$)/i);\nvar decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)i|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)@[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)?i|(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*))(?=[()\\s;\"]|$)/i);\n\nfunction isBinaryNumber (stream) {\n  return stream.match(binaryMatcher);\n}\n\nfunction isOctalNumber (stream) {\n  return stream.match(octalMatcher);\n}\n\nfunction isDecimalNumber (stream, backup) {\n  if (backup === true) {\n    stream.backUp(1);\n  }\n  return stream.match(decimalMatcher);\n}\n\nfunction isHexNumber (stream) {\n  return stream.match(hexMatcher);\n}\n\nfunction processEscapedSequence(stream, options) {\n  var next, escaped = false;\n  while ((next = stream.next()) != null) {\n    if (next == options.token && !escaped) {\n      options.state.mode = false;\n      break;\n    }\n    escaped = !escaped && next == \"\\\\\";\n  }\n}\n\nexport const scheme = {\n  name: \"scheme\",\n  startState: function () {\n    return {\n      indentStack: null,\n      indentation: 0,\n      mode: false,\n      sExprComment: false,\n      sExprQuote: false\n    };\n  },\n\n  token: function (stream, state) {\n    if (state.indentStack == null && stream.sol()) {\n      // update indentation, but only if indentStack is empty\n      state.indentation = stream.indentation();\n    }\n\n    // skip spaces\n    if (stream.eatSpace()) {\n      return null;\n    }\n    var returnType = null;\n\n    switch(state.mode){\n    case \"string\": // multi-line string parsing mode\n      processEscapedSequence(stream, {\n        token: \"\\\"\",\n        state: state\n      });\n      returnType = STRING; // continue on in scheme-string mode\n      break;\n    case \"symbol\": // escape symbol\n      processEscapedSequence(stream, {\n        token: \"|\",\n        state: state\n      });\n      returnType = SYMBOL; // continue on in scheme-symbol mode\n      break;\n    case \"comment\": // comment parsing mode\n      var next, maybeEnd = false;\n      while ((next = stream.next()) != null) {\n        if (next == \"#\" && maybeEnd) {\n\n          state.mode = false;\n          break;\n        }\n        maybeEnd = (next == \"|\");\n      }\n      returnType = COMMENT;\n      break;\n    case \"s-expr-comment\": // s-expr commenting mode\n      state.mode = false;\n      if(stream.peek() == \"(\" || stream.peek() == \"[\"){\n        // actually start scheme s-expr commenting mode\n        state.sExprComment = 0;\n      }else{\n        // if not we just comment the entire of the next token\n        stream.eatWhile(/[^\\s\\(\\)\\[\\]]/); // eat symbol atom\n        returnType = COMMENT;\n        break;\n      }\n    default: // default parsing mode\n      var ch = stream.next();\n\n      if (ch == \"\\\"\") {\n        state.mode = \"string\";\n        returnType = STRING;\n\n      } else if (ch == \"'\") {\n        if (stream.peek() == \"(\" || stream.peek() == \"[\"){\n          if (typeof state.sExprQuote != \"number\") {\n            state.sExprQuote = 0;\n          } // else already in a quoted expression\n          returnType = ATOM;\n        } else {\n          stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n          returnType = ATOM;\n        }\n      } else if (ch == '|') {\n        state.mode = \"symbol\";\n        returnType = SYMBOL;\n      } else if (ch == '#') {\n        if (stream.eat(\"|\")) {                    // Multi-line comment\n          state.mode = \"comment\"; // toggle to comment mode\n          returnType = COMMENT;\n        } else if (stream.eat(/[tf]/i)) {            // #t/#f (atom)\n          returnType = ATOM;\n        } else if (stream.eat(';')) {                // S-Expr comment\n          state.mode = \"s-expr-comment\";\n          returnType = COMMENT;\n        } else {\n          var numTest = null, hasExactness = false, hasRadix = true;\n          if (stream.eat(/[ei]/i)) {\n            hasExactness = true;\n          } else {\n            stream.backUp(1);       // must be radix specifier\n          }\n          if (stream.match(/^#b/i)) {\n            numTest = isBinaryNumber;\n          } else if (stream.match(/^#o/i)) {\n            numTest = isOctalNumber;\n          } else if (stream.match(/^#x/i)) {\n            numTest = isHexNumber;\n          } else if (stream.match(/^#d/i)) {\n            numTest = isDecimalNumber;\n          } else if (stream.match(/^[-+0-9.]/, false)) {\n            hasRadix = false;\n            numTest = isDecimalNumber;\n            // re-consume the initial # if all matches failed\n          } else if (!hasExactness) {\n            stream.eat('#');\n          }\n          if (numTest != null) {\n            if (hasRadix && !hasExactness) {\n              // consume optional exactness after radix\n              stream.match(/^#[ei]/i);\n            }\n            if (numTest(stream))\n              returnType = NUMBER;\n          }\n        }\n      } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) { // match non-prefixed number, must be decimal\n        returnType = NUMBER;\n      } else if (ch == \";\") { // comment\n        stream.skipToEnd(); // rest of the line is a comment\n        returnType = COMMENT;\n      } else if (ch == \"(\" || ch == \"[\") {\n        var keyWord = ''; var indentTemp = stream.column(), letter;\n        /**\n           Either\n           (indent-word ..\n           (non-indent-word ..\n           (;something else, bracket, etc.\n        */\n\n        while ((letter = stream.eat(/[^\\s\\(\\[\\;\\)\\]]/)) != null) {\n          keyWord += letter;\n        }\n\n        if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) { // indent-word\n\n          pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);\n        } else { // non-indent word\n          // we continue eating the spaces\n          stream.eatSpace();\n          if (stream.eol() || stream.peek() == \";\") {\n            // nothing significant after\n            // we restart indentation 1 space after\n            pushStack(state, indentTemp + 1, ch);\n          } else {\n            pushStack(state, indentTemp + stream.current().length, ch); // else we match\n          }\n        }\n        stream.backUp(stream.current().length - 1); // undo all the eating\n\n        if(typeof state.sExprComment == \"number\") state.sExprComment++;\n        if(typeof state.sExprQuote == \"number\") state.sExprQuote++;\n\n        returnType = BRACKET;\n      } else if (ch == \")\" || ch == \"]\") {\n        returnType = BRACKET;\n        if (state.indentStack != null && state.indentStack.type == (ch == \")\" ? \"(\" : \"[\")) {\n          popStack(state);\n\n          if(typeof state.sExprComment == \"number\"){\n            if(--state.sExprComment == 0){\n              returnType = COMMENT; // final closing bracket\n              state.sExprComment = false; // turn off s-expr commenting mode\n            }\n          }\n          if(typeof state.sExprQuote == \"number\"){\n            if(--state.sExprQuote == 0){\n              returnType = ATOM; // final closing bracket\n              state.sExprQuote = false; // turn off s-expr quote mode\n            }\n          }\n        }\n      } else {\n        stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n\n        if (keywords && keywords.propertyIsEnumerable(stream.current())) {\n          returnType = BUILTIN;\n        } else returnType = \"variable\";\n      }\n    }\n    return (typeof state.sExprComment == \"number\") ? COMMENT : ((typeof state.sExprQuote == \"number\") ? ATOM : returnType);\n  },\n\n  indent: function (state) {\n    if (state.indentStack == null) return state.indentation;\n    return state.indentStack.indent;\n  },\n\n  languageData: {\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    commentTokens: {line: \";;\"}\n  }\n};\n", "var words = {};\nfunction define(style, dict) {\n  for(var i = 0; i < dict.length; i++) {\n    words[dict[i]] = style;\n  }\n};\n\nvar commonAtoms = [\"true\", \"false\"];\nvar commonKeywords = [\"if\", \"then\", \"do\", \"else\", \"elif\", \"while\", \"until\", \"for\", \"in\", \"esac\", \"fi\",\n                      \"fin\", \"fil\", \"done\", \"exit\", \"set\", \"unset\", \"export\", \"function\"];\nvar commonCommands = [\"ab\", \"awk\", \"bash\", \"beep\", \"cat\", \"cc\", \"cd\", \"chown\", \"chmod\", \"chroot\", \"clear\",\n                      \"cp\", \"curl\", \"cut\", \"diff\", \"echo\", \"find\", \"gawk\", \"gcc\", \"get\", \"git\", \"grep\", \"hg\", \"kill\", \"killall\",\n                      \"ln\", \"ls\", \"make\", \"mkdir\", \"openssl\", \"mv\", \"nc\", \"nl\", \"node\", \"npm\", \"ping\", \"ps\", \"restart\", \"rm\",\n                      \"rmdir\", \"sed\", \"service\", \"sh\", \"shopt\", \"shred\", \"source\", \"sort\", \"sleep\", \"ssh\", \"start\", \"stop\",\n                      \"su\", \"sudo\", \"svn\", \"tee\", \"telnet\", \"top\", \"touch\", \"vi\", \"vim\", \"wall\", \"wc\", \"wget\", \"who\", \"write\",\n                      \"yes\", \"zsh\"];\n\ndefine('atom', commonAtoms);\ndefine('keyword', commonKeywords);\ndefine('builtin', commonCommands);\n\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) return null;\n\n  var sol = stream.sol();\n  var ch = stream.next();\n\n  if (ch === '\\\\') {\n    stream.next();\n    return null;\n  }\n  if (ch === '\\'' || ch === '\"' || ch === '`') {\n    state.tokens.unshift(tokenString(ch, ch === \"`\" ? \"quote\" : \"string\"));\n    return tokenize(stream, state);\n  }\n  if (ch === '#') {\n    if (sol && stream.eat('!')) {\n      stream.skipToEnd();\n      return 'meta'; // 'comment'?\n    }\n    stream.skipToEnd();\n    return 'comment';\n  }\n  if (ch === '$') {\n    state.tokens.unshift(tokenDollar);\n    return tokenize(stream, state);\n  }\n  if (ch === '+' || ch === '=') {\n    return 'operator';\n  }\n  if (ch === '-') {\n    stream.eat('-');\n    stream.eatWhile(/\\w/);\n    return 'attribute';\n  }\n  if (ch == \"<\") {\n    if (stream.match(\"<<\")) return \"operator\"\n    var heredoc = stream.match(/^<-?\\s*(?:['\"]([^'\"]*)['\"]|([^'\"\\s]*))/)\n    if (heredoc) {\n      state.tokens.unshift(tokenHeredoc(heredoc[1] || heredoc[2]))\n      return 'string.special'\n    }\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/\\d/);\n    if(stream.eol() || !/\\w/.test(stream.peek())) {\n      return 'number';\n    }\n  }\n  stream.eatWhile(/[\\w-]/);\n  var cur = stream.current();\n  if (stream.peek() === '=' && /\\w+/.test(cur)) return 'def';\n  return words.hasOwnProperty(cur) ? words[cur] : null;\n}\n\nfunction tokenString(quote, style) {\n  var close = quote == \"(\" ? \")\" : quote == \"{\" ? \"}\" : quote\n  return function(stream, state) {\n    var next, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === close && !escaped) {\n        state.tokens.shift();\n        break;\n      } else if (next === '$' && !escaped && quote !== \"'\" && stream.peek() != close) {\n        escaped = true;\n        stream.backUp(1);\n        state.tokens.unshift(tokenDollar);\n        break;\n      } else if (!escaped && quote !== close && next === quote) {\n        state.tokens.unshift(tokenString(quote, style))\n        return tokenize(stream, state)\n      } else if (!escaped && /['\"]/.test(next) && !/['\"]/.test(quote)) {\n        state.tokens.unshift(tokenStringStart(next, \"string\"));\n        stream.backUp(1);\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    return style;\n  };\n};\n\nfunction tokenStringStart(quote, style) {\n  return function(stream, state) {\n    state.tokens[0] = tokenString(quote, style)\n    stream.next()\n    return tokenize(stream, state)\n  }\n}\n\nvar tokenDollar = function(stream, state) {\n  if (state.tokens.length > 1) stream.eat('$');\n  var ch = stream.next()\n  if (/['\"({]/.test(ch)) {\n    state.tokens[0] = tokenString(ch, ch == \"(\" ? \"quote\" : ch == \"{\" ? \"def\" : \"string\");\n    return tokenize(stream, state);\n  }\n  if (!/\\d/.test(ch)) stream.eatWhile(/\\w/);\n  state.tokens.shift();\n  return 'def';\n};\n\nfunction tokenHeredoc(delim) {\n  return function(stream, state) {\n    if (stream.sol() && stream.string == delim) state.tokens.shift()\n    stream.skipToEnd()\n    return \"string.special\"\n  }\n}\n\nfunction tokenize(stream, state) {\n  return (state.tokens[0] || tokenBase) (stream, state);\n};\n\nexport const shell = {\n  name: \"shell\",\n  startState: function() {return {tokens:[]};},\n  token: function(stream, state) {\n    return tokenize(stream, state);\n  },\n  languageData: {\n    autocomplete: commonAtoms.concat(commonKeywords, commonCommands),\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]},\n    commentTokens: {line: \"#\"}\n  }\n};\n", "export function sql(parserConfig) {\n  var client         = parserConfig.client || {},\n      atoms          = parserConfig.atoms || {\"false\": true, \"true\": true, \"null\": true},\n      builtin        = parserConfig.builtin || set(defaultBuiltin),\n      keywords       = parserConfig.keywords || set(sqlKeywords),\n      operatorChars  = parserConfig.operatorChars || /^[*+\\-%<>!=&|~^\\/]/,\n      support        = parserConfig.support || {},\n      hooks          = parserConfig.hooks || {},\n      dateSQL        = parserConfig.dateSQL || {\"date\" : true, \"time\" : true, \"timestamp\" : true},\n      backslashStringEscapes = parserConfig.backslashStringEscapes !== false,\n      brackets       = parserConfig.brackets || /^[\\{}\\(\\)\\[\\]]/,\n      punctuation    = parserConfig.punctuation || /^[;.,:]/\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    // call hooks from the mime type\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n\n    if (support.hexNumber &&\n      ((ch == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/))\n      || (ch == \"x\" || ch == \"X\") && stream.match(/^'[0-9a-fA-F]*'/))) {\n      // hex\n      // ref: http://dev.mysql.com/doc/refman/5.5/en/hexadecimal-literals.html\n      return \"number\";\n    } else if (support.binaryNumber &&\n      (((ch == \"b\" || ch == \"B\") && stream.match(/^'[01]+'/))\n      || (ch == \"0\" && stream.match(/^b[01]*/)))) {\n      // bitstring\n      // ref: http://dev.mysql.com/doc/refman/5.5/en/bit-field-literals.html\n      return \"number\";\n    } else if (ch.charCodeAt(0) > 47 && ch.charCodeAt(0) < 58) {\n      // numbers\n      // ref: http://dev.mysql.com/doc/refman/5.5/en/number-literals.html\n      stream.match(/^[0-9]*(\\.[0-9]+)?([eE][-+]?[0-9]+)?/);\n      support.decimallessFloat && stream.match(/^\\.(?!\\.)/);\n      return \"number\";\n    } else if (ch == \"?\" && (stream.eatSpace() || stream.eol() || stream.eat(\";\"))) {\n      // placeholders\n      return \"macroName\";\n    } else if (ch == \"'\" || (ch == '\"' && support.doubleQuote)) {\n      // strings\n      // ref: http://dev.mysql.com/doc/refman/5.5/en/string-literals.html\n      state.tokenize = tokenLiteral(ch);\n      return state.tokenize(stream, state);\n    } else if ((((support.nCharCast && (ch == \"n\" || ch == \"N\"))\n        || (support.charsetCast && ch == \"_\" && stream.match(/[a-z][a-z0-9]*/i)))\n        && (stream.peek() == \"'\" || stream.peek() == '\"'))) {\n      // charset casting: _utf8'str', N'str', n'str'\n      // ref: http://dev.mysql.com/doc/refman/5.5/en/string-literals.html\n      return \"keyword\";\n    } else if (support.escapeConstant && (ch == \"e\" || ch == \"E\")\n        && (stream.peek() == \"'\" || (stream.peek() == '\"' && support.doubleQuote))) {\n      // escape constant: E'str', e'str'\n      // ref: https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS-ESCAPE\n      state.tokenize = function(stream, state) {\n        return (state.tokenize = tokenLiteral(stream.next(), true))(stream, state);\n      }\n      return \"keyword\";\n    } else if (support.commentSlashSlash && ch == \"/\" && stream.eat(\"/\")) {\n      // 1-line comment\n      stream.skipToEnd();\n      return \"comment\";\n    } else if ((support.commentHash && ch == \"#\")\n        || (ch == \"-\" && stream.eat(\"-\") && (!support.commentSpaceRequired || stream.eat(\" \")))) {\n      // 1-line comments\n      // ref: https://kb.askmonty.org/en/comment-syntax/\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (ch == \"/\" && stream.eat(\"*\")) {\n      // multi-line comments\n      // ref: https://kb.askmonty.org/en/comment-syntax/\n      state.tokenize = tokenComment(1);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\") {\n      // .1 for 0.1\n      if (support.zerolessFloat && stream.match(/^(?:\\d+(?:e[+-]?\\d+)?)/i))\n        return \"number\";\n      if (stream.match(/^\\.+/))\n        return null\n      // .table_name (ODBC)\n      // // ref: http://dev.mysql.com/doc/refman/5.6/en/identifier-qualifiers.html\n      if (support.ODBCdotTable && stream.match(/^[\\w\\d_$#]+/))\n        return \"type\";\n    } else if (operatorChars.test(ch)) {\n      // operators\n      stream.eatWhile(operatorChars);\n      return \"operator\";\n    } else if (brackets.test(ch)) {\n      // brackets\n      return \"bracket\";\n    } else if (punctuation.test(ch)) {\n      // punctuation\n      stream.eatWhile(punctuation);\n      return \"punctuation\";\n    } else if (ch == '{' &&\n        (stream.match(/^( )*(d|D|t|T|ts|TS)( )*'[^']*'( )*}/) || stream.match(/^( )*(d|D|t|T|ts|TS)( )*\"[^\"]*\"( )*}/))) {\n      // dates (weird ODBC syntax)\n      // ref: http://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html\n      return \"number\";\n    } else {\n      stream.eatWhile(/^[_\\w\\d]/);\n      var word = stream.current().toLowerCase();\n      // dates (standard SQL syntax)\n      // ref: http://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html\n      if (dateSQL.hasOwnProperty(word) && (stream.match(/^( )+'[^']*'/) || stream.match(/^( )+\"[^\"]*\"/)))\n        return \"number\";\n      if (atoms.hasOwnProperty(word)) return \"atom\";\n      if (builtin.hasOwnProperty(word)) return \"type\";\n      if (keywords.hasOwnProperty(word)) return \"keyword\";\n      if (client.hasOwnProperty(word)) return \"builtin\";\n      return null;\n    }\n  }\n\n  // 'string', with char specified in quote escaped by '\\'\n  function tokenLiteral(quote, backslashEscapes) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = (backslashStringEscapes || backslashEscapes) && !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    };\n  }\n  function tokenComment(depth) {\n    return function(stream, state) {\n      var m = stream.match(/^.*?(\\/\\*|\\*\\/)/)\n      if (!m) stream.skipToEnd()\n      else if (m[1] == \"/*\") state.tokenize = tokenComment(depth + 1)\n      else if (depth > 1) state.tokenize = tokenComment(depth - 1)\n      else state.tokenize = tokenBase\n      return \"comment\"\n    }\n  }\n\n  function pushContext(stream, state, type) {\n    state.context = {\n      prev: state.context,\n      indent: stream.indentation(),\n      col: stream.column(),\n      type: type\n    };\n  }\n\n  function popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n  }\n\n  return {\n    name: \"sql\",\n\n    startState: function() {\n      return {tokenize: tokenBase, context: null};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (state.context && state.context.align == null)\n          state.context.align = false;\n      }\n      if (state.tokenize == tokenBase && stream.eatSpace()) return null;\n\n      var style = state.tokenize(stream, state);\n      if (style == \"comment\") return style;\n\n      if (state.context && state.context.align == null)\n        state.context.align = true;\n\n      var tok = stream.current();\n      if (tok == \"(\")\n        pushContext(stream, state, \")\");\n      else if (tok == \"[\")\n        pushContext(stream, state, \"]\");\n      else if (state.context && state.context.type == tok)\n        popContext(state);\n      return style;\n    },\n\n    indent: function(state, textAfter, iCx) {\n      var cx = state.context;\n      if (!cx) return null;\n      var closing = textAfter.charAt(0) == cx.type;\n      if (cx.align) return cx.col + (closing ? 0 : 1);\n      else return cx.indent + (closing ? 0 : iCx.unit);\n    },\n\n    languageData: {\n      commentTokens: {\n        line: support.commentSlashSlash ? \"//\" : support.commentHash ? \"#\" : \"--\",\n        block: {open: \"/*\", close: \"*/\"}\n      },\n      closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]}\n    }\n  };\n};\n\n// `identifier`\nfunction hookIdentifier(stream) {\n  // MySQL/MariaDB identifiers\n  // ref: http://dev.mysql.com/doc/refman/5.6/en/identifier-qualifiers.html\n  var ch;\n  while ((ch = stream.next()) != null) {\n    if (ch == \"`\" && !stream.eat(\"`\")) return \"string.special\";\n  }\n  stream.backUp(stream.current().length - 1);\n  return stream.eatWhile(/\\w/) ? \"string.special\" : null;\n}\n\n// \"identifier\"\nfunction hookIdentifierDoublequote(stream) {\n  // Standard SQL /SQLite identifiers\n  // ref: http://web.archive.org/web/20160813185132/http://savage.net.au/SQL/sql-99.bnf.html#delimited%20identifier\n  // ref: http://sqlite.org/lang_keywords.html\n  var ch;\n  while ((ch = stream.next()) != null) {\n    if (ch == \"\\\"\" && !stream.eat(\"\\\"\")) return \"string.special\";\n  }\n  stream.backUp(stream.current().length - 1);\n  return stream.eatWhile(/\\w/) ? \"string.special\" : null;\n}\n\n// variable token\nfunction hookVar(stream) {\n  // variables\n  // @@prefix.varName @varName\n  // varName can be quoted with ` or ' or \"\n  // ref: http://dev.mysql.com/doc/refman/5.5/en/user-variables.html\n  if (stream.eat(\"@\")) {\n    stream.match('session.');\n    stream.match('local.');\n    stream.match('global.');\n  }\n\n  if (stream.eat(\"'\")) {\n    stream.match(/^.*'/);\n    return \"string.special\";\n  } else if (stream.eat('\"')) {\n    stream.match(/^.*\"/);\n    return \"string.special\";\n  } else if (stream.eat(\"`\")) {\n    stream.match(/^.*`/);\n    return \"string.special\";\n  } else if (stream.match(/^[0-9a-zA-Z$\\.\\_]+/)) {\n    return \"string.special\";\n  }\n  return null;\n};\n\n// short client keyword token\nfunction hookClient(stream) {\n  // \\N means NULL\n  // ref: http://dev.mysql.com/doc/refman/5.5/en/null-values.html\n  if (stream.eat(\"N\")) {\n    return \"atom\";\n  }\n  // \\g, etc\n  // ref: http://dev.mysql.com/doc/refman/5.5/en/mysql-commands.html\n  return stream.match(/^[a-zA-Z.#!?]/) ? \"string.special\" : null;\n}\n\n// these keywords are used by all SQL dialects (however, a mode can still overwrite it)\nvar sqlKeywords = \"alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit \";\n\n// turn a space-separated list into an array\nfunction set(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar defaultBuiltin = \"bool boolean bit blob enum long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision real date datetime year unsigned signed decimal numeric\"\n\n// A generic SQL Mode. It's not a standard, it just try to support what is generally supported\nexport const standardSQL = sql({\n  keywords: set(sqlKeywords + \"begin\"),\n  builtin: set(defaultBuiltin),\n  atoms: set(\"false true null unknown\"),\n  dateSQL: set(\"date time timestamp\"),\n  support: set(\"ODBCdotTable doubleQuote binaryNumber hexNumber\")\n});\n\nexport const msSQL = sql({\n  client: set(\"$partition binary_checksum checksum connectionproperty context_info current_request_id error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big xact_state object_id\"),\n  keywords: set(sqlKeywords + \"begin trigger proc view index for add constraint key primary foreign collate clustered nonclustered declare exec go if use index holdlock nolock nowait paglock readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot tablock tablockx updlock with\"),\n  builtin: set(\"bigint numeric bit smallint decimal smallmoney int tinyint money float real char varchar text nchar nvarchar ntext binary varbinary image cursor timestamp hierarchyid uniqueidentifier sql_variant xml table \"),\n  atoms: set(\"is not null like and or in left right between inner outer join all any some cross unpivot pivot exists\"),\n  operatorChars: /^[*+\\-%<>!=^\\&|\\/]/,\n  brackets: /^[\\{}\\(\\)]/,\n  punctuation: /^[;.,:/]/,\n  backslashStringEscapes: false,\n  dateSQL: set(\"date datetimeoffset datetime2 smalldatetime datetime time\"),\n  hooks: {\n    \"@\":   hookVar\n  }\n});\n\nexport const mySQL = sql({\n  client: set(\"charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee\"),\n  keywords: set(sqlKeywords + \"accessible action add after algorithm all analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general get global grant grants group group_concat handler hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show signal slave slow smallint snapshot soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views warnings when while with work write xa xor year_month zerofill begin do then else loop repeat\"),\n  builtin: set(\"bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric\"),\n  atoms: set(\"false true null unknown\"),\n  operatorChars: /^[*+\\-%<>!=&|^]/,\n  dateSQL: set(\"date time timestamp\"),\n  support: set(\"ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired\"),\n  hooks: {\n    \"@\":   hookVar,\n    \"`\":   hookIdentifier,\n    \"\\\\\":  hookClient\n  }\n});\n\nexport const mariaDB = sql({\n  client: set(\"charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee\"),\n  keywords: set(sqlKeywords + \"accessible action add after algorithm all always analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general generated get global grant grants group group_concat handler hard hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password persistent phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show shutdown signal slave slow smallint snapshot soft soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views virtual warnings when while with work write xa xor year_month zerofill begin do then else loop repeat\"),\n  builtin: set(\"bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric\"),\n  atoms: set(\"false true null unknown\"),\n  operatorChars: /^[*+\\-%<>!=&|^]/,\n  dateSQL: set(\"date time timestamp\"),\n  support: set(\"ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired\"),\n  hooks: {\n    \"@\":   hookVar,\n    \"`\":   hookIdentifier,\n    \"\\\\\":  hookClient\n  }\n});\n\n// provided by the phpLiteAdmin project - phpliteadmin.org\nexport const sqlite = sql({\n  // commands of the official SQLite client, ref: https://www.sqlite.org/cli.html#dotcmd\n  client: set(\"auth backup bail binary changes check clone databases dbinfo dump echo eqp exit explain fullschema headers help import imposter indexes iotrace limit lint load log mode nullvalue once open output print prompt quit read restore save scanstats schema separator session shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width\"),\n  // ref: http://sqlite.org/lang_keywords.html\n  keywords: set(sqlKeywords + \"abort action add after all analyze attach autoincrement before begin cascade case cast check collate column commit conflict constraint cross current_date current_time current_timestamp database default deferrable deferred detach each else end escape except exclusive exists explain fail for foreign full glob if ignore immediate index indexed initially inner instead intersect isnull key left limit match natural no notnull null of offset outer plan pragma primary query raise recursive references regexp reindex release rename replace restrict right rollback row savepoint temp temporary then to transaction trigger unique using vacuum view virtual when with without\"),\n  // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.\n  builtin: set(\"bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text clob bigint int int2 int8 integer float double char varchar date datetime year unsigned signed numeric real\"),\n  // ref: http://sqlite.org/syntax/literal-value.html\n  atoms: set(\"null current_date current_time current_timestamp\"),\n  // ref: http://sqlite.org/lang_expr.html#binaryops\n  operatorChars: /^[*+\\-%<>!=&|/~]/,\n  // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.\n  dateSQL: set(\"date time timestamp datetime\"),\n  support: set(\"decimallessFloat zerolessFloat\"),\n  identifierQuote: \"\\\"\",  //ref: http://sqlite.org/lang_keywords.html\n  hooks: {\n    // bind-parameters ref:http://sqlite.org/lang_expr.html#varparam\n    \"@\":   hookVar,\n    \":\":   hookVar,\n    \"?\":   hookVar,\n    \"$\":   hookVar,\n    // The preferred way to escape Identifiers is using double quotes, ref: http://sqlite.org/lang_keywords.html\n    \"\\\"\":   hookIdentifierDoublequote,\n    // there is also support for backticks, ref: http://sqlite.org/lang_keywords.html\n    \"`\":   hookIdentifier\n  }\n});\n\n// the query language used by Apache Cassandra is called CQL, but this mime type\n// is called Cassandra to avoid confusion with Contextual Query Language\nexport const cassandra = sql({\n  client: { },\n  keywords: set(\"add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime\"),\n  builtin: set(\"ascii bigint blob boolean counter decimal double float frozen inet int list map static text timestamp timeuuid tuple uuid varchar varint\"),\n  atoms: set(\"false true infinity NaN\"),\n  operatorChars: /^[<>=]/,\n  dateSQL: { },\n  support: set(\"commentSlashSlash decimallessFloat\"),\n  hooks: { }\n});\n\n// this is based on Peter Raganitsch's 'plsql' mode\nexport const plSQL = sql({\n  client:     set(\"appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define describe echo editfile embedded escape exec execute feedback flagger flush heading headsep instance linesize lno loboffset logsource long longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar release repfooter repheader serveroutput shiftinout show showmode size spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout time timing trimout trimspool ttitle underline verify version wrap\"),\n  keywords:   set(\"abort accept access add all alter and any array arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body boolean by case cast char char_base check close cluster clusters colauth column comment commit compress connect connected constant constraint crash create current currval cursor data_base database date dba deallocate debugoff debugon decimal declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry escape exception exception_init exchange exclusive exists exit external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging long loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base object of off offline on online only open option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw read rebuild record ref references refresh release rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate session set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work\"),\n  builtin:    set(\"abs acos add_months ascii asin atan atan2 average bfile bfilename bigserial bit blob ceil character chartorowid chr clob concat convert cos cosh count dec decode deref dual dump dup_val_on_index empty error exp false float floor found glb greatest hextoraw initcap instr instrb int integer isopen last_day least length lengthb ln lower lpad ltrim lub make_ref max min mlslabel mod months_between natural naturaln nchar nclob new_time next_day nextval nls_charset_decl_len nls_charset_id nls_charset_name nls_initcap nls_lower nls_sort nls_upper nlssort no_data_found notfound null number numeric nvarchar2 nvl others power rawtohex real reftohex round rowcount rowidtochar rowtype rpad rtrim serial sign signtype sin sinh smallint soundex sqlcode sqlerrm sqrt stddev string substr substrb sum sysdate tan tanh to_char text to_date to_label to_multi_byte to_number to_single_byte translate true trunc uid unlogged upper user userenv varchar varchar2 variance varying vsize xml\"),\n  operatorChars: /^[*\\/+\\-%<>!=~]/,\n  dateSQL:    set(\"date time timestamp\"),\n  support:    set(\"doubleQuote nCharCast zerolessFloat binaryNumber hexNumber\")\n});\n\n// Created to support specific hive keywords\nexport const hive = sql({\n  keywords: set(\"select alter $elem$ $key$ $value$ add after all analyze and archive as asc before between binary both bucket buckets by cascade case cast change cluster clustered clusterstatus collection column columns comment compute concatenate continue create cross cursor data database databases dbproperties deferred delete delimited desc describe directory disable distinct distribute drop else enable end escaped exclusive exists explain export extended external fetch fields fileformat first format formatted from full function functions grant group having hold_ddltime idxproperties if import in index indexes inpath inputdriver inputformat insert intersect into is items join keys lateral left like limit lines load local location lock locks mapjoin materialized minus msck no_drop nocompress not of offline on option or order out outer outputdriver outputformat overwrite partition partitioned partitions percent plus preserve procedure purge range rcfile read readonly reads rebuild recordreader recordwriter recover reduce regexp rename repair replace restrict revoke right rlike row schema schemas semi sequencefile serde serdeproperties set shared show show_database sort sorted ssl statistics stored streamtable table tables tablesample tblproperties temporary terminated textfile then tmp to touch transform trigger unarchive undo union uniquejoin unlock update use using utc utc_tmestamp view when where while with admin authorization char compact compactions conf cube current current_date current_timestamp day decimal defined dependency directories elem_type exchange file following for grouping hour ignore inner interval jar less logical macro minute month more none noscan over owner partialscan preceding pretty principals protection reload rewrite role roles rollup rows second server sets skewed transactions truncate unbounded unset uri user values window year\"),\n  builtin: set(\"bool boolean long timestamp tinyint smallint bigint int float double date datetime unsigned string array struct map uniontype key_type utctimestamp value_type varchar\"),\n  atoms: set(\"false true null unknown\"),\n  operatorChars: /^[*+\\-%<>!=]/,\n  dateSQL: set(\"date timestamp\"),\n  support: set(\"ODBCdotTable doubleQuote binaryNumber hexNumber\")\n});\n\nexport const pgSQL = sql({\n  client: set(\"source\"),\n  // For PostgreSQL - https://www.postgresql.org/docs/11/sql-keywords-appendix.html\n  // For pl/pgsql lang - https://github.com/postgres/postgres/blob/REL_11_2/src/pl/plpgsql/src/pl_scanner.c\n  keywords: set(sqlKeywords + \"a abort abs absent absolute access according action ada add admin after aggregate alias all allocate also alter always analyse analyze and any are array array_agg array_max_cardinality as asc asensitive assert assertion assignment asymmetric at atomic attach attribute attributes authorization avg backward base64 before begin begin_frame begin_partition bernoulli between bigint binary bit bit_length blob blocked bom boolean both breadth by c cache call called cardinality cascade cascaded case cast catalog catalog_name ceil ceiling chain char char_length character character_length character_set_catalog character_set_name character_set_schema characteristics characters check checkpoint class class_origin clob close cluster coalesce cobol collate collation collation_catalog collation_name collation_schema collect column column_name columns command_function command_function_code comment comments commit committed concurrently condition condition_number configuration conflict connect connection connection_name constant constraint constraint_catalog constraint_name constraint_schema constraints constructor contains content continue control conversion convert copy corr corresponding cost count covar_pop covar_samp create cross csv cube cume_dist current current_catalog current_date current_default_transform_group current_path current_role current_row current_schema current_time current_timestamp current_transform_group_for_type current_user cursor cursor_name cycle data database datalink datatype date datetime_interval_code datetime_interval_precision day db deallocate debug dec decimal declare default defaults deferrable deferred defined definer degree delete delimiter delimiters dense_rank depends depth deref derived desc describe descriptor detach detail deterministic diagnostics dictionary disable discard disconnect dispatch distinct dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue do document domain double drop dump dynamic dynamic_function dynamic_function_code each element else elseif elsif empty enable encoding encrypted end end_frame end_partition endexec enforced enum equals errcode error escape event every except exception exclude excluding exclusive exec execute exists exit exp explain expression extension external extract false family fetch file filter final first first_value flag float floor following for force foreach foreign fortran forward found frame_row free freeze from fs full function functions fusion g general generated get global go goto grant granted greatest group grouping groups handler having header hex hierarchy hint hold hour id identity if ignore ilike immediate immediately immutable implementation implicit import in include including increment indent index indexes indicator info inherit inherits initially inline inner inout input insensitive insert instance instantiable instead int integer integrity intersect intersection interval into invoker is isnull isolation join k key key_member key_type label lag language large last last_value lateral lead leading leakproof least left length level library like like_regex limit link listen ln load local localtime localtimestamp location locator lock locked log logged loop lower m map mapping match matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text method min minute minvalue mod mode modifies module month more move multiset mumps name names namespace national natural nchar nclob nesting new next nfc nfd nfkc nfkd nil no none normalize normalized not nothing notice notify notnull nowait nth_value ntile null nullable nullif nulls number numeric object occurrences_regex octet_length octets of off offset oids old on only open operator option options or order ordering ordinality others out outer output over overlaps overlay overriding owned owner p pad parallel parameter parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partial partition pascal passing passthrough password path percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding precision prepare prepared preserve primary print_strict_params prior privileges procedural procedure procedures program public publication query quote raise range rank read reads real reassign recheck recovery recursive ref references referencing refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex relative release rename repeatable replace replica requiring reset respect restart restore restrict result result_oid return returned_cardinality returned_length returned_octet_length returned_sqlstate returning returns reverse revoke right role rollback rollup routine routine_catalog routine_name routine_schema routines row row_count row_number rows rowtype rule savepoint scale schema schema_name schemas scope scope_catalog scope_name scope_schema scroll search second section security select selective self sensitive sequence sequences serializable server server_name session session_user set setof sets share show similar simple size skip slice smallint snapshot some source space specific specific_name specifictype sql sqlcode sqlerror sqlexception sqlstate sqlwarning sqrt stable stacked standalone start state statement static statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time system_user t table table_name tables tablesample tablespace temp template temporary text then ties time timestamp timezone_hour timezone_minute to token top_level_count trailing transaction transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex translation treat trigger trigger_catalog trigger_name trigger_schema trim trim_array true truncate trusted type types uescape unbounded uncommitted under unencrypted union unique unknown unlink unlisten unlogged unnamed unnest until untyped update upper uri usage use_column use_variable user user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema using vacuum valid validate validator value value_of values var_pop var_samp varbinary varchar variable_conflict variadic varying verbose version versioning view views volatile warning when whenever where while whitespace width_bucket window with within without work wrapper write xml xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate year yes zone\"),\n  // https://www.postgresql.org/docs/11/datatype.html\n  builtin: set(\"bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml\"),\n  atoms: set(\"false true null unknown\"),\n  operatorChars: /^[*\\/+\\-%<>!=&|^\\/#@?~]/,\n  backslashStringEscapes: false,\n  dateSQL: set(\"date time timestamp\"),\n  support: set(\"ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast escapeConstant\")\n});\n\n// Google's SQL-like query language, GQL\nexport const gql = sql({\n  keywords: set(\"ancestor and asc by contains desc descendant distinct from group has in is limit offset on order select superset where\"),\n  atoms: set(\"false true\"),\n  builtin: set(\"blob datetime first key __key__ string integer double boolean null\"),\n  operatorChars: /^[*+\\-%<>!=]/\n});\n\n// Greenplum\nexport const gpSQL = sql({\n  client: set(\"source\"),\n  //https://github.com/greenplum-db/gpdb/blob/master/src/include/parser/kwlist.h\n  keywords: set(\"abort absolute access action active add admin after aggregate all also alter always analyse analyze and any array as asc assertion assignment asymmetric at authorization backward before begin between bigint binary bit boolean both by cache called cascade cascaded case cast chain char character characteristics check checkpoint class close cluster coalesce codegen collate column comment commit committed concurrency concurrently configuration connection constraint constraints contains content continue conversion copy cost cpu_rate_limit create createdb createexttable createrole createuser cross csv cube current current_catalog current_date current_role current_schema current_time current_timestamp current_user cursor cycle data database day deallocate dec decimal declare decode default defaults deferrable deferred definer delete delimiter delimiters deny desc dictionary disable discard distinct distributed do document domain double drop dxl each else enable encoding encrypted end enum errors escape every except exchange exclude excluding exclusive execute exists explain extension external extract false family fetch fields filespace fill filter first float following for force foreign format forward freeze from full function global grant granted greatest group group_id grouping handler hash having header hold host hour identity if ignore ilike immediate immutable implicit in including inclusive increment index indexes inherit inherits initially inline inner inout input insensitive insert instead int integer intersect interval into invoker is isnull isolation join key language large last leading least left level like limit list listen load local localtime localtimestamp location lock log login mapping master match maxvalue median merge minute minvalue missing mode modifies modify month move name names national natural nchar new newline next no nocreatedb nocreateexttable nocreaterole nocreateuser noinherit nologin none noovercommit nosuperuser not nothing notify notnull nowait null nullif nulls numeric object of off offset oids old on only operator option options or order ordered others out outer over overcommit overlaps overlay owned owner parser partial partition partitions passing password percent percentile_cont percentile_disc placing plans position preceding precision prepare prepared preserve primary prior privileges procedural procedure protocol queue quote randomly range read readable reads real reassign recheck recursive ref references reindex reject relative release rename repeatable replace replica reset resource restart restrict returning returns revoke right role rollback rollup rootpartition row rows rule savepoint scatter schema scroll search second security segment select sequence serializable session session_user set setof sets share show similar simple smallint some split sql stable standalone start statement statistics stdin stdout storage strict strip subpartition subpartitions substring superuser symmetric sysid system table tablespace temp template temporary text then threshold ties time timestamp to trailing transaction treat trigger trim true truncate trusted type unbounded uncommitted unencrypted union unique unknown unlisten until update user using vacuum valid validation validator value values varchar variadic varying verbose version view volatile web when where whitespace window with within without work writable write xml xmlattributes xmlconcat xmlelement xmlexists xmlforest xmlparse xmlpi xmlroot xmlserialize year yes zone\"),\n  builtin: set(\"bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml\"),\n  atoms: set(\"false true null unknown\"),\n  operatorChars: /^[*+\\-%<>!=&|^\\/#@?~]/,\n  dateSQL: set(\"date time timestamp\"),\n  support: set(\"ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast\")\n});\n\n// Spark SQL\nexport const sparkSQL = sql({\n  keywords: set(\"add after all alter analyze and anti archive array as asc at between bucket buckets by cache cascade case cast change clear cluster clustered codegen collection column columns comment commit compact compactions compute concatenate cost create cross cube current current_date current_timestamp database databases data dbproperties defined delete delimited deny desc describe dfs directories distinct distribute drop else end escaped except exchange exists explain export extended external false fields fileformat first following for format formatted from full function functions global grant group grouping having if ignore import in index indexes inner inpath inputformat insert intersect interval into is items join keys last lateral lazy left like limit lines list load local location lock locks logical macro map minus msck natural no not null nulls of on optimize option options or order out outer outputformat over overwrite partition partitioned partitions percent preceding principals purge range recordreader recordwriter recover reduce refresh regexp rename repair replace reset restrict revoke right rlike role roles rollback rollup row rows schema schemas select semi separated serde serdeproperties set sets show skewed sort sorted start statistics stored stratify struct table tables tablesample tblproperties temp temporary terminated then to touch transaction transactions transform true truncate unarchive unbounded uncache union unlock unset use using values view when where window with\"),\n  builtin: set(\"tinyint smallint int bigint boolean float double string binary timestamp decimal array map struct uniontype delimited serde sequencefile textfile rcfile inputformat outputformat\"),\n  atoms: set(\"false true null\"),\n  operatorChars: /^[*\\/+\\-%<>!=~&|^]/,\n  dateSQL: set(\"date time timestamp\"),\n  support: set(\"ODBCdotTable doubleQuote zerolessFloat\")\n});\n\n// Esper\nexport const esper = sql({\n  client: set(\"source\"),\n  // http://www.espertech.com/esper/release-5.5.0/esper-reference/html/appendix_keywords.html\n  keywords: set(\"alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit after all and as at asc avedev avg between by case cast coalesce count create current_timestamp day days delete define desc distinct else end escape events every exists false first from full group having hour hours in inner insert instanceof into irstream is istream join last lastweekday left limit like max match_recognize matches median measures metadatasql min minute minutes msec millisecond milliseconds not null offset on or order outer output partition pattern prev prior regexp retain-union retain-intersection right rstream sec second seconds select set some snapshot sql stddev sum then true unidirectional until update variable weekday when where window\"),\n  builtin: {},\n  atoms: set(\"false true null\"),\n  operatorChars: /^[*+\\-%<>!=&|^\\/#@?~]/,\n  dateSQL: set(\"time\"),\n  support: set(\"decimallessFloat zerolessFloat binaryNumber hexNumber\")\n});\n\n/*\n  How options are used by SQL Mode\n  =================================================\n\n  keywords:\n    A list of keywords you want to be highlighted.\n  builtin:\n    A list of builtin types you want to be highlighted (if you want types to be of class \"builtin\" instead of \"keyword\").\n  operatorChars:\n    All characters that must be handled as operators.\n  client:\n    Commands parsed and executed by the client (not the server).\n  support:\n    A list of supported syntaxes which are not common, but are supported by more than 1 DBMS.\n    * ODBCdotTable: .tableName\n    * zerolessFloat: .1\n    * doubleQuote\n    * nCharCast: N'string'\n    * charsetCast: _utf8'string'\n    * commentHash: use # char for comments\n    * commentSlashSlash: use // for comments\n    * commentSpaceRequired: require a space after -- for comments\n  atoms:\n    Keywords that must be highlighted as atoms,. Some DBMS's support more atoms than others:\n    UNKNOWN, INFINITY, UNDERFLOW, NaN...\n  dateSQL:\n    Used for date/time SQL standard syntax, because not all DBMS's support same temporal types.\n*/\n", "function mkStex(mathMode) {\n  function pushCommand(state, command) {\n    state.cmdState.push(command);\n  }\n\n  function peekCommand(state) {\n    if (state.cmdState.length > 0) {\n      return state.cmdState[state.cmdState.length - 1];\n    } else {\n      return null;\n    }\n  }\n\n  function popCommand(state) {\n    var plug = state.cmdState.pop();\n    if (plug) {\n      plug.closeBracket();\n    }\n  }\n\n  // returns the non-default plugin closest to the end of the list\n  function getMostPowerful(state) {\n    var context = state.cmdState;\n    for (var i = context.length - 1; i >= 0; i--) {\n      var plug = context[i];\n      if (plug.name == \"DEFAULT\") {\n        continue;\n      }\n      return plug;\n    }\n    return { styleIdentifier: function() { return null; } };\n  }\n\n  function addPluginPattern(pluginName, cmdStyle, styles) {\n    return function () {\n      this.name = pluginName;\n      this.bracketNo = 0;\n      this.style = cmdStyle;\n      this.styles = styles;\n      this.argument = null;   // \\begin and \\end have arguments that follow. These are stored in the plugin\n\n      this.styleIdentifier = function() {\n        return this.styles[this.bracketNo - 1] || null;\n      };\n      this.openBracket = function() {\n        this.bracketNo++;\n        return \"bracket\";\n      };\n      this.closeBracket = function() {};\n    };\n  }\n\n  var plugins = {};\n\n  plugins[\"importmodule\"] = addPluginPattern(\"importmodule\", \"tag\", [\"string\", \"builtin\"]);\n  plugins[\"documentclass\"] = addPluginPattern(\"documentclass\", \"tag\", [\"\", \"atom\"]);\n  plugins[\"usepackage\"] = addPluginPattern(\"usepackage\", \"tag\", [\"atom\"]);\n  plugins[\"begin\"] = addPluginPattern(\"begin\", \"tag\", [\"atom\"]);\n  plugins[\"end\"] = addPluginPattern(\"end\", \"tag\", [\"atom\"]);\n\n  plugins[\"label\"    ] = addPluginPattern(\"label\"    , \"tag\", [\"atom\"]);\n  plugins[\"ref\"      ] = addPluginPattern(\"ref\"      , \"tag\", [\"atom\"]);\n  plugins[\"eqref\"    ] = addPluginPattern(\"eqref\"    , \"tag\", [\"atom\"]);\n  plugins[\"cite\"     ] = addPluginPattern(\"cite\"     , \"tag\", [\"atom\"]);\n  plugins[\"bibitem\"  ] = addPluginPattern(\"bibitem\"  , \"tag\", [\"atom\"]);\n  plugins[\"Bibitem\"  ] = addPluginPattern(\"Bibitem\"  , \"tag\", [\"atom\"]);\n  plugins[\"RBibitem\" ] = addPluginPattern(\"RBibitem\" , \"tag\", [\"atom\"]);\n\n  plugins[\"DEFAULT\"] = function () {\n    this.name = \"DEFAULT\";\n    this.style = \"tag\";\n\n    this.styleIdentifier = this.openBracket = this.closeBracket = function() {};\n  };\n\n  function setState(state, f) {\n    state.f = f;\n  }\n\n  // called when in a normal (no environment) context\n  function normal(source, state) {\n    var plug;\n    // Do we look like '\\command' ?  If so, attempt to apply the plugin 'command'\n    if (source.match(/^\\\\[a-zA-Z@\\xc0-\\u1fff\\u2060-\\uffff]+/)) {\n      var cmdName = source.current().slice(1);\n      plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins[\"DEFAULT\"];\n      plug = new plug();\n      pushCommand(state, plug);\n      setState(state, beginParams);\n      return plug.style;\n    }\n\n    // escape characters\n    if (source.match(/^\\\\[$&%#{}_]/)) {\n      return \"tag\";\n    }\n\n    // white space control characters\n    if (source.match(/^\\\\[,;!\\/\\\\]/)) {\n      return \"tag\";\n    }\n\n    // find if we're starting various math modes\n    if (source.match(\"\\\\[\")) {\n      setState(state, function(source, state){ return inMathMode(source, state, \"\\\\]\"); });\n      return \"keyword\";\n    }\n    if (source.match(\"\\\\(\")) {\n      setState(state, function(source, state){ return inMathMode(source, state, \"\\\\)\"); });\n      return \"keyword\";\n    }\n    if (source.match(\"$$\")) {\n      setState(state, function(source, state){ return inMathMode(source, state, \"$$\"); });\n      return \"keyword\";\n    }\n    if (source.match(\"$\")) {\n      setState(state, function(source, state){ return inMathMode(source, state, \"$\"); });\n      return \"keyword\";\n    }\n\n    var ch = source.next();\n    if (ch == \"%\") {\n      source.skipToEnd();\n      return \"comment\";\n    } else if (ch == '}' || ch == ']') {\n      plug = peekCommand(state);\n      if (plug) {\n        plug.closeBracket(ch);\n        setState(state, beginParams);\n      } else {\n        return \"error\";\n      }\n      return \"bracket\";\n    } else if (ch == '{' || ch == '[') {\n      plug = plugins[\"DEFAULT\"];\n      plug = new plug();\n      pushCommand(state, plug);\n      return \"bracket\";\n    } else if (/\\d/.test(ch)) {\n      source.eatWhile(/[\\w.%]/);\n      return \"atom\";\n    } else {\n      source.eatWhile(/[\\w\\-_]/);\n      plug = getMostPowerful(state);\n      if (plug.name == 'begin') {\n        plug.argument = source.current();\n      }\n      return plug.styleIdentifier();\n    }\n  }\n\n  function inMathMode(source, state, endModeSeq) {\n    if (source.eatSpace()) {\n      return null;\n    }\n    if (endModeSeq && source.match(endModeSeq)) {\n      setState(state, normal);\n      return \"keyword\";\n    }\n    if (source.match(/^\\\\[a-zA-Z@]+/)) {\n      return \"tag\";\n    }\n    if (source.match(/^[a-zA-Z]+/)) {\n      return \"variableName.special\";\n    }\n    // escape characters\n    if (source.match(/^\\\\[$&%#{}_]/)) {\n      return \"tag\";\n    }\n    // white space control characters\n    if (source.match(/^\\\\[,;!\\/]/)) {\n      return \"tag\";\n    }\n    // special math-mode characters\n    if (source.match(/^[\\^_&]/)) {\n      return \"tag\";\n    }\n    // non-special characters\n    if (source.match(/^[+\\-<>|=,\\/@!*:;'\"`~#?]/)) {\n      return null;\n    }\n    if (source.match(/^(\\d+\\.\\d*|\\d*\\.\\d+|\\d+)/)) {\n      return \"number\";\n    }\n    var ch = source.next();\n    if (ch == \"{\" || ch == \"}\" || ch == \"[\" || ch == \"]\" || ch == \"(\" || ch == \")\") {\n      return \"bracket\";\n    }\n\n    if (ch == \"%\") {\n      source.skipToEnd();\n      return \"comment\";\n    }\n    return \"error\";\n  }\n\n  function beginParams(source, state) {\n    var ch = source.peek(), lastPlug;\n    if (ch == '{' || ch == '[') {\n      lastPlug = peekCommand(state);\n      lastPlug.openBracket(ch);\n      source.eat(ch);\n      setState(state, normal);\n      return \"bracket\";\n    }\n    if (/[ \\t\\r]/.test(ch)) {\n      source.eat(ch);\n      return null;\n    }\n    setState(state, normal);\n    popCommand(state);\n\n    return normal(source, state);\n  }\n\n  return {\n    name: \"stex\",\n    startState: function() {\n      var f = mathMode ? function(source, state){ return inMathMode(source, state); } : normal;\n      return {\n        cmdState: [],\n        f: f\n      };\n    },\n    copyState: function(s) {\n      return {\n        cmdState: s.cmdState.slice(),\n        f: s.f\n      };\n    },\n    token: function(stream, state) {\n      return state.f(stream, state);\n    },\n    blankLine: function(state) {\n      state.f = normal;\n      state.cmdState.length = 0;\n    },\n    languageData: {\n      commentTokens: {line: \"%\"}\n    }\n  };\n};\n\nexport const stex = mkStex(false)\nexport const stexMath = mkStex(true)\n", "function wordSet(words) {\n  var set = {}\n  for (var i = 0; i < words.length; i++) set[words[i]] = true\n  return set\n}\n\nvar keywords = wordSet([\"_\",\"var\",\"let\",\"actor\",\"class\",\"enum\",\"extension\",\"import\",\"protocol\",\"struct\",\"func\",\"typealias\",\"associatedtype\",\n                        \"open\",\"public\",\"internal\",\"fileprivate\",\"private\",\"deinit\",\"init\",\"new\",\"override\",\"self\",\"subscript\",\"super\",\n                        \"convenience\",\"dynamic\",\"final\",\"indirect\",\"lazy\",\"required\",\"static\",\"unowned\",\"unowned(safe)\",\"unowned(unsafe)\",\"weak\",\"as\",\"is\",\n                        \"break\",\"case\",\"continue\",\"default\",\"else\",\"fallthrough\",\"for\",\"guard\",\"if\",\"in\",\"repeat\",\"switch\",\"where\",\"while\",\n                        \"defer\",\"return\",\"inout\",\"mutating\",\"nonmutating\",\"isolated\",\"nonisolated\",\"catch\",\"do\",\"rethrows\",\"throw\",\"throws\",\"async\",\"await\",\"try\",\"didSet\",\"get\",\"set\",\"willSet\",\n                        \"assignment\",\"associativity\",\"infix\",\"left\",\"none\",\"operator\",\"postfix\",\"precedence\",\"precedencegroup\",\"prefix\",\"right\",\n                        \"Any\",\"AnyObject\",\"Type\",\"dynamicType\",\"Self\",\"Protocol\",\"__COLUMN__\",\"__FILE__\",\"__FUNCTION__\",\"__LINE__\"])\nvar definingKeywords = wordSet([\"var\",\"let\",\"actor\",\"class\",\"enum\",\"extension\",\"import\",\"protocol\",\"struct\",\"func\",\"typealias\",\"associatedtype\",\"for\"])\nvar atoms = wordSet([\"true\",\"false\",\"nil\",\"self\",\"super\",\"_\"])\nvar types = wordSet([\"Array\",\"Bool\",\"Character\",\"Dictionary\",\"Double\",\"Float\",\"Int\",\"Int8\",\"Int16\",\"Int32\",\"Int64\",\"Never\",\"Optional\",\"Set\",\"String\",\n                     \"UInt8\",\"UInt16\",\"UInt32\",\"UInt64\",\"Void\"])\nvar operators = \"+-/*%=|&<>~^?!\"\nvar punc = \":;,.(){}[]\"\nvar binary = /^\\-?0b[01][01_]*/\nvar octal = /^\\-?0o[0-7][0-7_]*/\nvar hexadecimal = /^\\-?0x[\\dA-Fa-f][\\dA-Fa-f_]*(?:(?:\\.[\\dA-Fa-f][\\dA-Fa-f_]*)?[Pp]\\-?\\d[\\d_]*)?/\nvar decimal = /^\\-?\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[Ee]\\-?\\d[\\d_]*)?/\nvar identifier = /^\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1/\nvar property = /^\\.(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/\nvar instruction = /^\\#[A-Za-z]+/\nvar attribute = /^@(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/\n//var regexp = /^\\/(?!\\s)(?:\\/\\/)?(?:\\\\.|[^\\/])+\\//\n\nfunction tokenBase(stream, state, prev) {\n  if (stream.sol()) state.indented = stream.indentation()\n  if (stream.eatSpace()) return null\n\n  var ch = stream.peek()\n  if (ch == \"/\") {\n    if (stream.match(\"//\")) {\n      stream.skipToEnd()\n      return \"comment\"\n    }\n    if (stream.match(\"/*\")) {\n      state.tokenize.push(tokenComment)\n      return tokenComment(stream, state)\n    }\n  }\n  if (stream.match(instruction)) return \"builtin\"\n  if (stream.match(attribute)) return \"attribute\"\n  if (stream.match(binary)) return \"number\"\n  if (stream.match(octal)) return \"number\"\n  if (stream.match(hexadecimal)) return \"number\"\n  if (stream.match(decimal)) return \"number\"\n  if (stream.match(property)) return \"property\"\n  if (operators.indexOf(ch) > -1) {\n    stream.next()\n    return \"operator\"\n  }\n  if (punc.indexOf(ch) > -1) {\n    stream.next()\n    stream.match(\"..\")\n    return \"punctuation\"\n  }\n  var stringMatch\n  if (stringMatch = stream.match(/(\"\"\"|\"|')/)) {\n    var tokenize = tokenString.bind(null, stringMatch[0])\n    state.tokenize.push(tokenize)\n    return tokenize(stream, state)\n  }\n\n  if (stream.match(identifier)) {\n    var ident = stream.current()\n    if (types.hasOwnProperty(ident)) return \"type\"\n    if (atoms.hasOwnProperty(ident)) return \"atom\"\n    if (keywords.hasOwnProperty(ident)) {\n      if (definingKeywords.hasOwnProperty(ident))\n        state.prev = \"define\"\n      return \"keyword\"\n    }\n    if (prev == \"define\") return \"def\"\n    return \"variable\"\n  }\n\n  stream.next()\n  return null\n}\n\nfunction tokenUntilClosingParen() {\n  var depth = 0\n  return function(stream, state, prev) {\n    var inner = tokenBase(stream, state, prev)\n    if (inner == \"punctuation\") {\n      if (stream.current() == \"(\") ++depth\n      else if (stream.current() == \")\") {\n        if (depth == 0) {\n          stream.backUp(1)\n          state.tokenize.pop()\n          return state.tokenize[state.tokenize.length - 1](stream, state)\n        }\n        else --depth\n      }\n    }\n    return inner\n  }\n}\n\nfunction tokenString(openQuote, stream, state) {\n  var singleLine = openQuote.length == 1\n  var ch, escaped = false\n  while (ch = stream.peek()) {\n    if (escaped) {\n      stream.next()\n      if (ch == \"(\") {\n        state.tokenize.push(tokenUntilClosingParen())\n        return \"string\"\n      }\n      escaped = false\n    } else if (stream.match(openQuote)) {\n      state.tokenize.pop()\n      return \"string\"\n    } else {\n      stream.next()\n      escaped = ch == \"\\\\\"\n    }\n  }\n  if (singleLine) {\n    state.tokenize.pop()\n  }\n  return \"string\"\n}\n\nfunction tokenComment(stream, state) {\n  var ch\n  while (ch = stream.next()) {\n    if (ch === \"/\" && stream.eat(\"*\")) {\n      state.tokenize.push(tokenComment)\n    } else if (ch === \"*\" && stream.eat(\"/\")) {\n      state.tokenize.pop()\n      break\n    }\n  }\n  return \"comment\"\n}\n\nfunction Context(prev, align, indented) {\n  this.prev = prev\n  this.align = align\n  this.indented = indented\n}\n\nfunction pushContext(state, stream) {\n  var align = stream.match(/^\\s*($|\\/[\\/\\*]|[)}\\]])/, false) ? null : stream.column() + 1\n  state.context = new Context(state.context, align, state.indented)\n}\n\nfunction popContext(state) {\n  if (state.context) {\n    state.indented = state.context.indented\n    state.context = state.context.prev\n  }\n}\n\nexport const swift = {\n  name: \"swift\",\n  startState: function() {\n    return {\n      prev: null,\n      context: null,\n      indented: 0,\n      tokenize: []\n    }\n  },\n\n  token: function(stream, state) {\n    var prev = state.prev\n    state.prev = null\n    var tokenize = state.tokenize[state.tokenize.length - 1] || tokenBase\n    var style = tokenize(stream, state, prev)\n    if (!style || style == \"comment\") state.prev = prev\n    else if (!state.prev) state.prev = style\n\n    if (style == \"punctuation\") {\n      var bracket = /[\\(\\[\\{]|([\\]\\)\\}])/.exec(stream.current())\n      if (bracket) (bracket[1] ? popContext : pushContext)(state, stream)\n    }\n\n    return style\n  },\n\n  indent: function(state, textAfter, iCx) {\n    var cx = state.context\n    if (!cx) return 0\n    var closing = /^[\\]\\}\\)]/.test(textAfter)\n    if (cx.align != null) return cx.align - (closing ? 1 : 0)\n    return cx.indented + (closing ? 0 : iCx.unit)\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[\\)\\}\\]]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]}\n  }\n}\n", "export const toml = {\n  name: \"toml\",\n  startState: function () {\n    return {\n      inString: false,\n      stringType: \"\",\n      lhs: true,\n      inArray: 0\n    };\n  },\n  token: function (stream, state) {\n    //check for state changes\n    if (!state.inString && ((stream.peek() == '\"') || (stream.peek() == \"'\"))) {\n      state.stringType = stream.peek();\n      stream.next(); // Skip quote\n      state.inString = true; // Update state\n    }\n    if (stream.sol() && state.inArray === 0) {\n      state.lhs = true;\n    }\n    //return state\n    if (state.inString) {\n      while (state.inString && !stream.eol()) {\n        if (stream.peek() === state.stringType) {\n          stream.next(); // Skip quote\n          state.inString = false; // Clear flag\n        } else if (stream.peek() === '\\\\') {\n          stream.next();\n          stream.next();\n        } else {\n          stream.match(/^.[^\\\\\\\"\\']*/);\n        }\n      }\n      return state.lhs ? \"property\" : \"string\"; // Token style\n    } else if (state.inArray && stream.peek() === ']') {\n      stream.next();\n      state.inArray--;\n      return 'bracket';\n    } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {\n      stream.next();//skip closing ]\n      // array of objects has an extra open & close []\n      if (stream.peek() === ']') stream.next();\n      return \"atom\";\n    } else if (stream.peek() === \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if (state.lhs && stream.eatWhile(function (c) { return c != '=' && c != ' '; })) {\n      return \"property\";\n    } else if (state.lhs && stream.peek() === \"=\") {\n      stream.next();\n      state.lhs = false;\n      return null;\n    } else if (!state.lhs && stream.match(/^\\d\\d\\d\\d[\\d\\-\\:\\.T]*Z/)) {\n      return 'atom'; //date\n    } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {\n      return 'atom';\n    } else if (!state.lhs && stream.peek() === '[') {\n      state.inArray++;\n      stream.next();\n      return 'bracket';\n    } else if (!state.lhs && stream.match(/^\\-?\\d+(?:\\.\\d+)?/)) {\n      return 'number';\n    } else if (!stream.eatSpace()) {\n      stream.next();\n    }\n    return null;\n  },\n  languageData: {\n    commentTokens: { line: '#' },\n  },\n};\n", "var ERRORCLASS = 'error';\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\nvar doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\nvar identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\n\nvar openingKeywords = ['class','module', 'sub','enum','select','while','if','function', 'get','set','property', 'try', 'structure', 'synclock', 'using', 'with'];\nvar middleKeywords = ['else','elseif','case', 'catch', 'finally'];\nvar endKeywords = ['next','loop'];\n\nvar operatorKeywords = ['and', \"andalso\", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];\nvar wordOperators = wordRegexp(operatorKeywords);\n\nvar commonKeywords = [\"#const\", \"#else\", \"#elseif\", \"#end\", \"#if\", \"#region\", \"addhandler\", \"addressof\", \"alias\", \"as\", \"byref\", \"byval\", \"cbool\", \"cbyte\", \"cchar\", \"cdate\", \"cdbl\", \"cdec\", \"cint\", \"clng\", \"cobj\", \"compare\", \"const\", \"continue\", \"csbyte\", \"cshort\", \"csng\", \"cstr\", \"cuint\", \"culng\", \"cushort\", \"declare\", \"default\", \"delegate\", \"dim\", \"directcast\", \"each\", \"erase\", \"error\", \"event\", \"exit\", \"explicit\", \"false\", \"for\", \"friend\", \"gettype\", \"goto\", \"handles\", \"implements\", \"imports\", \"infer\", \"inherits\", \"interface\", \"isfalse\", \"istrue\", \"lib\", \"me\", \"mod\", \"mustinherit\", \"mustoverride\", \"my\", \"mybase\", \"myclass\", \"namespace\", \"narrowing\", \"new\", \"nothing\", \"notinheritable\", \"notoverridable\", \"of\", \"off\", \"on\", \"operator\", \"option\", \"optional\", \"out\", \"overloads\", \"overridable\", \"overrides\", \"paramarray\", \"partial\", \"private\", \"protected\", \"public\", \"raiseevent\", \"readonly\", \"redim\", \"removehandler\", \"resume\", \"return\", \"shadows\", \"shared\", \"static\", \"step\", \"stop\", \"strict\", \"then\", \"throw\", \"to\", \"true\", \"trycast\", \"typeof\", \"until\", \"until\", \"when\", \"widening\", \"withevents\", \"writeonly\"];\n\nvar commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];\n\nvar keywords = wordRegexp(commonKeywords);\nvar types = wordRegexp(commontypes);\nvar stringPrefixes = '\"';\n\nvar opening = wordRegexp(openingKeywords);\nvar middle = wordRegexp(middleKeywords);\nvar closing = wordRegexp(endKeywords);\nvar doubleClosing = wordRegexp(['end']);\nvar doOpening = wordRegexp(['do']);\n\nvar indentInfo = null;\n\nfunction indent(_stream, state) {\n  state.currentIndent++;\n}\n\nfunction dedent(_stream, state) {\n  state.currentIndent--;\n}\n// tokenizers\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek();\n\n  // Handle Comments\n  if (ch === \"'\") {\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n\n  // Handle Number Literals\n  if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n    var floatLiteral = false;\n    // Floats\n    if (stream.match(/^\\d*\\.\\d+F?/i)) { floatLiteral = true; }\n    else if (stream.match(/^\\d+\\.\\d*F?/)) { floatLiteral = true; }\n    else if (stream.match(/^\\.\\d+F?/)) { floatLiteral = true; }\n\n    if (floatLiteral) {\n      // Float literals may be \"imaginary\"\n      stream.eat(/J/i);\n      return 'number';\n    }\n    // Integers\n    var intLiteral = false;\n    // Hex\n    if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }\n    // Octal\n    else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }\n    // Decimal\n    else if (stream.match(/^[1-9]\\d*F?/)) {\n      // Decimal literals may be \"imaginary\"\n      stream.eat(/J/i);\n      // TODO - Can you have imaginary longs?\n      intLiteral = true;\n    }\n    // Zero by itself with no other piece of number.\n    else if (stream.match(/^0(?![\\dx])/i)) { intLiteral = true; }\n    if (intLiteral) {\n      // Integer literals may be \"long\"\n      stream.eat(/L/i);\n      return 'number';\n    }\n  }\n\n  // Handle Strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n\n  // Handle operators and Delimiters\n  if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n    return null;\n  }\n  if (stream.match(doubleOperators)\n      || stream.match(singleOperators)\n      || stream.match(wordOperators)) {\n    return 'operator';\n  }\n  if (stream.match(singleDelimiters)) {\n    return null;\n  }\n  if (stream.match(doOpening)) {\n    indent(stream,state);\n    state.doInCurrentLine = true;\n    return 'keyword';\n  }\n  if (stream.match(opening)) {\n    if (! state.doInCurrentLine)\n      indent(stream,state);\n    else\n      state.doInCurrentLine = false;\n    return 'keyword';\n  }\n  if (stream.match(middle)) {\n    return 'keyword';\n  }\n\n  if (stream.match(doubleClosing)) {\n    dedent(stream,state);\n    dedent(stream,state);\n    return 'keyword';\n  }\n  if (stream.match(closing)) {\n    dedent(stream,state);\n    return 'keyword';\n  }\n\n  if (stream.match(types)) {\n    return 'keyword';\n  }\n\n  if (stream.match(keywords)) {\n    return 'keyword';\n  }\n\n  if (stream.match(identifiers)) {\n    return 'variable';\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return ERRORCLASS;\n}\n\nfunction tokenStringFactory(delimiter) {\n  var singleline = delimiter.length == 1;\n  var OUTCLASS = 'string';\n\n  return function(stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^'\"]/);\n      if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        return OUTCLASS;\n      } else {\n        stream.eat(/['\"]/);\n      }\n    }\n    if (singleline) {\n      state.tokenize = tokenBase;\n    }\n    return OUTCLASS;\n  };\n}\n\n\nfunction tokenLexer(stream, state) {\n  var style = state.tokenize(stream, state);\n  var current = stream.current();\n\n  // Handle '.' connected identifiers\n  if (current === '.') {\n    style = state.tokenize(stream, state);\n    if (style === 'variable') {\n      return 'variable';\n    } else {\n      return ERRORCLASS;\n    }\n  }\n\n\n  var delimiter_index = '[({'.indexOf(current);\n  if (delimiter_index !== -1) {\n    indent(stream, state );\n  }\n  if (indentInfo === 'dedent') {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n  delimiter_index = '])}'.indexOf(current);\n  if (delimiter_index !== -1) {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n\n  return style;\n}\n\nexport const vb = {\n  name: \"vb\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      lastToken: null,\n      currentIndent: 0,\n      nextLineIndent: 0,\n      doInCurrentLine: false\n\n\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      state.currentIndent += state.nextLineIndent;\n      state.nextLineIndent = 0;\n      state.doInCurrentLine = 0;\n    }\n    var style = tokenLexer(stream, state);\n\n    state.lastToken = {style:style, content: stream.current()};\n\n\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var trueText = textAfter.replace(/^\\s+|\\s+$/g, '') ;\n    if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);\n    if(state.currentIndent < 0) return 0;\n    return state.currentIndent * cx.unit;\n  },\n\n  languageData: {\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    commentTokens: {line: \"'\"},\n    autocomplete: openingKeywords.concat(middleKeywords).concat(endKeywords)\n      .concat(operatorKeywords).concat(commonKeywords).concat(commontypes)\n  }\n};\n", "function mkVBScript(parserConf) {\n    var ERRORCLASS = 'error';\n\n    function wordRegexp(words) {\n        return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&\\\\\\\\\\\\^<>=]\");\n    var doubleOperators = new RegExp(\"^((<>)|(<=)|(>=))\");\n    var singleDelimiters = new RegExp('^[\\\\.,]');\n    var brackets = new RegExp('^[\\\\(\\\\)]');\n    var identifiers = new RegExp(\"^[A-Za-z][_A-Za-z0-9]*\");\n\n    var openingKeywords = ['class','sub','select','while','if','function', 'property', 'with', 'for'];\n    var middleKeywords = ['else','elseif','case'];\n    var endKeywords = ['next','loop','wend'];\n\n    var wordOperators = wordRegexp(['and', 'or', 'not', 'xor', 'is', 'mod', 'eqv', 'imp']);\n    var commonkeywords = ['dim', 'redim', 'then',  'until', 'randomize',\n                          'byval','byref','new','property', 'exit', 'in',\n                          'const','private', 'public',\n                          'get','set','let', 'stop', 'on error resume next', 'on error goto 0', 'option explicit', 'call', 'me'];\n\n    //This list was from: http://msdn.microsoft.com/en-us/library/f8tbc79x(v=vs.84).aspx\n    var atomWords = ['true', 'false', 'nothing', 'empty', 'null'];\n    //This list was from: http://msdn.microsoft.com/en-us/library/3ca8tfek(v=vs.84).aspx\n    var builtinFuncsWords = ['abs', 'array', 'asc', 'atn', 'cbool', 'cbyte', 'ccur', 'cdate', 'cdbl', 'chr', 'cint', 'clng', 'cos', 'csng', 'cstr', 'date', 'dateadd', 'datediff', 'datepart',\n                        'dateserial', 'datevalue', 'day', 'escape', 'eval', 'execute', 'exp', 'filter', 'formatcurrency', 'formatdatetime', 'formatnumber', 'formatpercent', 'getlocale', 'getobject',\n                        'getref', 'hex', 'hour', 'inputbox', 'instr', 'instrrev', 'int', 'fix', 'isarray', 'isdate', 'isempty', 'isnull', 'isnumeric', 'isobject', 'join', 'lbound', 'lcase', 'left',\n                        'len', 'loadpicture', 'log', 'ltrim', 'rtrim', 'trim', 'maths', 'mid', 'minute', 'month', 'monthname', 'msgbox', 'now', 'oct', 'replace', 'rgb', 'right', 'rnd', 'round',\n                        'scriptengine', 'scriptenginebuildversion', 'scriptenginemajorversion', 'scriptengineminorversion', 'second', 'setlocale', 'sgn', 'sin', 'space', 'split', 'sqr', 'strcomp',\n                        'string', 'strreverse', 'tan', 'time', 'timer', 'timeserial', 'timevalue', 'typename', 'ubound', 'ucase', 'unescape', 'vartype', 'weekday', 'weekdayname', 'year'];\n\n    //This list was from: http://msdn.microsoft.com/en-us/library/ydz4cfk3(v=vs.84).aspx\n    var builtinConsts = ['vbBlack', 'vbRed', 'vbGreen', 'vbYellow', 'vbBlue', 'vbMagenta', 'vbCyan', 'vbWhite', 'vbBinaryCompare', 'vbTextCompare',\n                         'vbSunday', 'vbMonday', 'vbTuesday', 'vbWednesday', 'vbThursday', 'vbFriday', 'vbSaturday', 'vbUseSystemDayOfWeek', 'vbFirstJan1', 'vbFirstFourDays', 'vbFirstFullWeek',\n                         'vbGeneralDate', 'vbLongDate', 'vbShortDate', 'vbLongTime', 'vbShortTime', 'vbObjectError',\n                         'vbOKOnly', 'vbOKCancel', 'vbAbortRetryIgnore', 'vbYesNoCancel', 'vbYesNo', 'vbRetryCancel', 'vbCritical', 'vbQuestion', 'vbExclamation', 'vbInformation', 'vbDefaultButton1', 'vbDefaultButton2',\n                         'vbDefaultButton3', 'vbDefaultButton4', 'vbApplicationModal', 'vbSystemModal', 'vbOK', 'vbCancel', 'vbAbort', 'vbRetry', 'vbIgnore', 'vbYes', 'vbNo',\n                         'vbCr', 'VbCrLf', 'vbFormFeed', 'vbLf', 'vbNewLine', 'vbNullChar', 'vbNullString', 'vbTab', 'vbVerticalTab', 'vbUseDefault', 'vbTrue', 'vbFalse',\n                         'vbEmpty', 'vbNull', 'vbInteger', 'vbLong', 'vbSingle', 'vbDouble', 'vbCurrency', 'vbDate', 'vbString', 'vbObject', 'vbError', 'vbBoolean', 'vbVariant', 'vbDataObject', 'vbDecimal', 'vbByte', 'vbArray'];\n    //This list was from: http://msdn.microsoft.com/en-us/library/hkc375ea(v=vs.84).aspx\n    var builtinObjsWords = ['WScript', 'err', 'debug', 'RegExp'];\n    var knownProperties = ['description', 'firstindex', 'global', 'helpcontext', 'helpfile', 'ignorecase', 'length', 'number', 'pattern', 'source', 'value', 'count'];\n    var knownMethods = ['clear', 'execute', 'raise', 'replace', 'test', 'write', 'writeline', 'close', 'open', 'state', 'eof', 'update', 'addnew', 'end', 'createobject', 'quit'];\n\n    var aspBuiltinObjsWords = ['server', 'response', 'request', 'session', 'application'];\n    var aspKnownProperties = ['buffer', 'cachecontrol', 'charset', 'contenttype', 'expires', 'expiresabsolute', 'isclientconnected', 'pics', 'status', //response\n                              'clientcertificate', 'cookies', 'form', 'querystring', 'servervariables', 'totalbytes', //request\n                              'contents', 'staticobjects', //application\n                              'codepage', 'lcid', 'sessionid', 'timeout', //session\n                              'scripttimeout']; //server\n    var aspKnownMethods = ['addheader', 'appendtolog', 'binarywrite', 'end', 'flush', 'redirect', //response\n                           'binaryread', //request\n                           'remove', 'removeall', 'lock', 'unlock', //application\n                           'abandon', //session\n                           'getlasterror', 'htmlencode', 'mappath', 'transfer', 'urlencode']; //server\n\n    var knownWords = knownMethods.concat(knownProperties);\n\n    builtinObjsWords = builtinObjsWords.concat(builtinConsts);\n\n    if (parserConf.isASP){\n        builtinObjsWords = builtinObjsWords.concat(aspBuiltinObjsWords);\n        knownWords = knownWords.concat(aspKnownMethods, aspKnownProperties);\n    };\n\n    var keywords = wordRegexp(commonkeywords);\n    var atoms = wordRegexp(atomWords);\n    var builtinFuncs = wordRegexp(builtinFuncsWords);\n    var builtinObjs = wordRegexp(builtinObjsWords);\n    var known = wordRegexp(knownWords);\n    var stringPrefixes = '\"';\n\n    var opening = wordRegexp(openingKeywords);\n    var middle = wordRegexp(middleKeywords);\n    var closing = wordRegexp(endKeywords);\n    var doubleClosing = wordRegexp(['end']);\n    var doOpening = wordRegexp(['do']);\n    var noIndentWords = wordRegexp(['on error resume next', 'exit']);\n    var comment = wordRegexp(['rem']);\n\n\n    function indent(_stream, state) {\n      state.currentIndent++;\n    }\n\n    function dedent(_stream, state) {\n      state.currentIndent--;\n    }\n    // tokenizers\n    function tokenBase(stream, state) {\n        if (stream.eatSpace()) {\n            return null\n            //return null;\n        }\n\n        var ch = stream.peek();\n\n        // Handle Comments\n        if (ch === \"'\") {\n            stream.skipToEnd();\n            return 'comment';\n        }\n        if (stream.match(comment)){\n            stream.skipToEnd();\n            return 'comment';\n        }\n\n\n        // Handle Number Literals\n        if (stream.match(/^((&H)|(&O))?[0-9\\.]/i, false) && !stream.match(/^((&H)|(&O))?[0-9\\.]+[a-z_]/i, false)) {\n            var floatLiteral = false;\n            // Floats\n            if (stream.match(/^\\d*\\.\\d+/i)) { floatLiteral = true; }\n            else if (stream.match(/^\\d+\\.\\d*/)) { floatLiteral = true; }\n            else if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n\n            if (floatLiteral) {\n                // Float literals may be \"imaginary\"\n                stream.eat(/J/i);\n                return 'number';\n            }\n            // Integers\n            var intLiteral = false;\n            // Hex\n            if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }\n            // Octal\n            else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }\n            // Decimal\n            else if (stream.match(/^[1-9]\\d*F?/)) {\n                // Decimal literals may be \"imaginary\"\n                stream.eat(/J/i);\n                // TODO - Can you have imaginary longs?\n                intLiteral = true;\n            }\n            // Zero by itself with no other piece of number.\n            else if (stream.match(/^0(?![\\dx])/i)) { intLiteral = true; }\n            if (intLiteral) {\n                // Integer literals may be \"long\"\n                stream.eat(/L/i);\n                return 'number';\n            }\n        }\n\n        // Handle Strings\n        if (stream.match(stringPrefixes)) {\n            state.tokenize = tokenStringFactory(stream.current());\n            return state.tokenize(stream, state);\n        }\n\n        // Handle operators and Delimiters\n        if (stream.match(doubleOperators)\n            || stream.match(singleOperators)\n            || stream.match(wordOperators)) {\n            return 'operator';\n        }\n        if (stream.match(singleDelimiters)) {\n            return null;\n        }\n\n        if (stream.match(brackets)) {\n            return \"bracket\";\n        }\n\n        if (stream.match(noIndentWords)) {\n            state.doInCurrentLine = true;\n\n            return 'keyword';\n        }\n\n        if (stream.match(doOpening)) {\n            indent(stream,state);\n            state.doInCurrentLine = true;\n\n            return 'keyword';\n        }\n        if (stream.match(opening)) {\n            if (! state.doInCurrentLine)\n              indent(stream,state);\n            else\n              state.doInCurrentLine = false;\n\n            return 'keyword';\n        }\n        if (stream.match(middle)) {\n            return 'keyword';\n        }\n\n\n        if (stream.match(doubleClosing)) {\n            dedent(stream,state);\n            dedent(stream,state);\n\n            return 'keyword';\n        }\n        if (stream.match(closing)) {\n            if (! state.doInCurrentLine)\n              dedent(stream,state);\n            else\n              state.doInCurrentLine = false;\n\n            return 'keyword';\n        }\n\n        if (stream.match(keywords)) {\n            return 'keyword';\n        }\n\n        if (stream.match(atoms)) {\n            return 'atom';\n        }\n\n        if (stream.match(known)) {\n            return 'variableName.special';\n        }\n\n        if (stream.match(builtinFuncs)) {\n            return 'builtin';\n        }\n\n        if (stream.match(builtinObjs)){\n            return 'builtin';\n        }\n\n        if (stream.match(identifiers)) {\n            return 'variable';\n        }\n\n        // Handle non-detected items\n        stream.next();\n        return ERRORCLASS;\n    }\n\n    function tokenStringFactory(delimiter) {\n        var singleline = delimiter.length == 1;\n        var OUTCLASS = 'string';\n\n        return function(stream, state) {\n            while (!stream.eol()) {\n                stream.eatWhile(/[^'\"]/);\n                if (stream.match(delimiter)) {\n                    state.tokenize = tokenBase;\n                    return OUTCLASS;\n                } else {\n                    stream.eat(/['\"]/);\n                }\n            }\n            if (singleline) {\n              state.tokenize = tokenBase;\n            }\n            return OUTCLASS;\n        };\n    }\n\n\n    function tokenLexer(stream, state) {\n        var style = state.tokenize(stream, state);\n        var current = stream.current();\n\n        // Handle '.' connected identifiers\n        if (current === '.') {\n            style = state.tokenize(stream, state);\n\n            current = stream.current();\n            if (style && (style.substr(0, 8) === 'variable' || style==='builtin' || style==='keyword')){//|| knownWords.indexOf(current.substring(1)) > -1) {\n                if (style === 'builtin' || style === 'keyword') style='variable';\n                if (knownWords.indexOf(current.substr(1)) > -1) style='keyword';\n\n                return style;\n            } else {\n                return ERRORCLASS;\n            }\n        }\n\n        return style;\n    }\n\n    return {\n        name: \"vbscript\",\n        startState: function() {\n            return {\n              tokenize: tokenBase,\n              lastToken: null,\n              currentIndent: 0,\n              nextLineIndent: 0,\n              doInCurrentLine: false,\n              ignoreKeyword: false\n\n\n          };\n        },\n\n        token: function(stream, state) {\n            if (stream.sol()) {\n              state.currentIndent += state.nextLineIndent;\n              state.nextLineIndent = 0;\n              state.doInCurrentLine = 0;\n            }\n            var style = tokenLexer(stream, state);\n\n            state.lastToken = {style:style, content: stream.current()};\n\n            if (style===null) style=null;\n\n            return style;\n        },\n\n        indent: function(state, textAfter, cx) {\n            var trueText = textAfter.replace(/^\\s+|\\s+$/g, '') ;\n            if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);\n            if(state.currentIndent < 0) return 0;\n            return state.currentIndent * cx.unit\n        }\n\n    };\n};\n\nexport const vbScript = mkVBScript({})\nexport const vbScriptASP = mkVBScript({isASP: true})\n", "var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\nvar keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\nexport const yaml = {\n  name: \"yaml\",\n  token: function(stream, state) {\n    var ch = stream.peek();\n    var esc = state.escaped;\n    state.escaped = false;\n    /* comments */\n    if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n      return \"string\";\n\n    if (state.literal && stream.indentation() > state.keyCol) {\n      stream.skipToEnd(); return \"string\";\n    } else if (state.literal) { state.literal = false; }\n    if (stream.sol()) {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      /* document start */\n      if(stream.match('---')) { return \"def\"; }\n      /* document end */\n      if (stream.match('...')) { return \"def\"; }\n      /* array list item */\n      if (stream.match(/^\\s*-\\s+/)) { return 'meta'; }\n    }\n    /* inline pairs/lists */\n    if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n      if (ch == '{')\n        state.inlinePairs++;\n      else if (ch == '}')\n        state.inlinePairs--;\n      else if (ch == '[')\n        state.inlineList++;\n      else\n        state.inlineList--;\n      return 'meta';\n    }\n\n    /* list separator */\n    if (state.inlineList > 0 && !esc && ch == ',') {\n      stream.next();\n      return 'meta';\n    }\n    /* pairs separator */\n    if (state.inlinePairs > 0 && !esc && ch == ',') {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      stream.next();\n      return 'meta';\n    }\n\n    /* start of value of a pair */\n    if (state.pairStart) {\n      /* block literals */\n      if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n      /* references */\n      if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable'; }\n      /* numbers */\n      if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n      if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n      /* keywords */\n      if (stream.match(keywordRegex)) { return 'keyword'; }\n    }\n\n    /* pairs (associative arrays) -> key */\n    if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n      state.pair = true;\n      state.keyCol = stream.indentation();\n      return \"atom\";\n    }\n    if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n    /* nothing found, continue */\n    state.pairStart = false;\n    state.escaped = (ch == '\\\\');\n    stream.next();\n    return null;\n  },\n  startState: function() {\n    return {\n      pair: false,\n      pairStart: false,\n      keyCol: 0,\n      inlinePairs: 0,\n      inlineList: 0,\n      literal: false,\n      escaped: false\n    };\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n", "// This file is adapted from the codemirror 5 smarty mode.\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\nconst rightDelimiter = \"}\";\nconst leftDelimiter =  \"{\";\n// const baseMode = CodeMirror.getMode(config, parserConf.baseMode || \"null\");\nconst baseMode = {token: (stream) => stream.skipToEnd()};\n\nconst keyFunctions = [\"debug\", \"extends\", \"function\", \"include\", \"literal\"];\nconst regs = {\n    operatorChars: /[+\\-*&%=<>!?]/,\n    validIdentifier: /[a-zA-Z0-9_]/,\n    stringChar: /['\"]/\n};\n\nlet last;\nfunction cont(style, lastType) {\n    last = lastType;\n    return style;\n}\n\nfunction chain(stream, state, parser) {\n    state.tokenize = parser;\n    return parser(stream, state);\n}\n\n// Smarty 3 allows { and } surrounded by whitespace to NOT slip into Smarty mode\nfunction doesNotCount(stream, pos) {\n    // Code ignored as we don't support version here\n    // if (pos === null) pos = stream.pos;\n    // return version === 3 && leftDelimiter === \"{\" &&\n    //     (pos === stream.string.length || /\\s/.test(stream.string.charAt(pos)));\n    return false;\n}\n\nfunction tokenTop(stream, state) {\n    const string = stream.string;\n    let nextMatch;\n    for (let scan = stream.pos;;) {\n        nextMatch = string.indexOf(leftDelimiter, scan);\n        scan = nextMatch + leftDelimiter.length;\n        if (nextMatch === -1 || !doesNotCount()) break;\n    }\n    if (nextMatch === stream.pos) {\n        stream.match(leftDelimiter);\n        if (stream.eat(\"*\")) {\n            return chain(stream, state, tokenBlock(\"comment\", \"*\" + rightDelimiter));\n        } else {\n            state.depth++;\n            state.tokenize = tokenSmarty;\n            last = \"startTag\";\n            return \"tag\";\n        }\n    }\n\n    if (nextMatch > -1) stream.string = string.slice(0, nextMatch);\n    const token = baseMode.token(stream, state.base);\n    if (nextMatch > -1) stream.string = string;\n    return token;\n}\n\n// parsing Smarty content\nfunction tokenSmarty(stream, state) {\n    if (stream.match(rightDelimiter, true)) {\n        {\n            state.tokenize = tokenTop;\n        }\n        return cont(\"tag\", null);\n    }\n\n    if (stream.match(leftDelimiter, true)) {\n        state.depth++;\n        return cont(\"tag\", \"startTag\");\n    }\n\n    const ch = stream.next();\n    if (ch === \"$\") {\n        stream.eatWhile(regs.validIdentifier);\n        return cont(\"variable-2\", \"variable\");\n    } else if (ch === \"|\") {\n        return cont(\"operator\", \"pipe\");\n    } else if (ch === \".\") {\n        return cont(\"operator\", \"property\");\n    } else if (regs.stringChar.test(ch)) {\n        state.tokenize = tokenAttribute(ch);\n        return cont(\"string\", \"string\");\n    } else if (regs.operatorChars.test(ch)) {\n        stream.eatWhile(regs.operatorChars);\n        return cont(\"operator\", \"operator\");\n    } else if (ch === \"[\" || ch === \"]\") {\n        return cont(\"bracket\", \"bracket\");\n    } else if (ch === \"(\" || ch === \")\") {\n        return cont(\"bracket\", \"operator\");\n    } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/\\d/);\n        return cont(\"number\", \"number\");\n    } else {\n\n        if (state.last === \"variable\") {\n            if (ch === \"@\") {\n                stream.eatWhile(regs.validIdentifier);\n                return cont(\"property\", \"property\");\n            } else if (ch === \"|\") {\n                stream.eatWhile(regs.validIdentifier);\n                return cont(\"qualifier\", \"modifier\");\n            }\n        } else if (state.last === \"pipe\") {\n            stream.eatWhile(regs.validIdentifier);\n            return cont(\"qualifier\", \"modifier\");\n        } else if (state.last === \"whitespace\") {\n            stream.eatWhile(regs.validIdentifier);\n            return cont(\"attribute\", \"modifier\");\n        } if (state.last === \"property\") {\n            stream.eatWhile(regs.validIdentifier);\n            return cont(\"property\", null);\n        } else if (/\\s/.test(ch)) {\n            last = \"whitespace\";\n            return null;\n        }\n\n        let str = \"\";\n        if (ch !== \"/\") {\n            str += ch;\n        }\n        let c = null;\n        while (c = stream.eat(regs.validIdentifier)) {\n            str += c;\n        }\n        for (let i=0, j=keyFunctions.length; i<j; i++) {\n            if (keyFunctions[i] === str) {\n                return cont(\"keyword\", \"keyword\");\n            }\n        }\n        if (/\\s/.test(ch)) {\n            return null;\n        }\n        return cont(\"tag\", \"tag\");\n    }\n}\n\nfunction tokenAttribute(quote) {\n    return function(stream, state) {\n        let prevChar = null;\n        let currChar = null;\n        while (!stream.eol()) {\n            currChar = stream.peek();\n            if (stream.next() === quote && prevChar !== '\\\\') {\n                state.tokenize = tokenSmarty;\n                break;\n            }\n            prevChar = currChar;\n        }\n        return \"string\";\n    };\n}\n\nfunction tokenBlock(style, terminator) {\n    return function(stream, state) {\n        while (!stream.eol()) {\n            if (stream.match(terminator)) {\n                state.tokenize = tokenTop;\n                break;\n            }\n            stream.next();\n        }\n        return style;\n    };\n}\n\nfunction cmCopyState(mode, state) {\n    if (state === true) return state\n    if (mode.copyState) return mode.copyState(state)\n    let nstate = {};\n    for (let n in state) {\n        let val = state[n];\n        if (val instanceof Array) val = val.concat([]);\n        nstate[n] = val;\n    }\n    return nstate\n}\n\nconst smarty = {\n    startState: function() {\n        return {\n            base: true,\n            tokenize: tokenTop,\n            last: null,\n            depth: 0\n        };\n    },\n    copyState: function(state) {\n        return {\n            base: cmCopyState(baseMode, state.base),\n            tokenize: state.tokenize,\n            last: state.last,\n            depth: state.depth\n        };\n    },\n    innerMode: function(state) {\n        if (state.tokenize === tokenTop)\n            return {mode: baseMode, state: state.base};\n    },\n    token: function(stream, state) {\n        const style = state.tokenize(stream, state);\n        state.last = last;\n        return style;\n    },\n    indent: function(state, text, line) {\n        return null;\n    },\n    languageData: {\n        commentTokens: {\n            block: {\n                open: leftDelimiter + \"*\",\n                close: \"*\" + rightDelimiter\n            }\n        },\n        autocomplete: keyFunctions,\n    }\n};\n\nexport { smarty };\n"],
  "mappings": "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",
  "names": ["type", "indent", "keywords", "types", "atoms", "isOperatorChar", "curPunc", "tokenBase", "tokenString", "tokenComment", "closing", "words", "identifier", "type", "stream", "state", "symbol", "c", "words", "type", "words", "keywords", "atoms", "isOperatorChar", "tokenBase", "tokenString", "Context", "type", "pushContext", "popContext", "closing", "type", "words", "keywords", "builtins", "tokenBase", "tokenComment", "numberLiteral", "delimiter", "tokenString", "words", "builtins", "keywords", "normal", "closing", "words", "tokenBase", "tokenString", "tokenComment", "words", "keywords", "tokenBase", "tokenString", "wordRegexp", "words", "identifiers", "builtins", "keywords", "tokenBase", "tokenComment", "tokenBase", "c", "chain", "stream", "state", "string", "words", "keywords", "atoms", "isOperatorChar", "tokenBase", "tokenString", "tokenComment", "prefix", "suffix", "keywords", "symbolOperators", "operators", "identifiers", "builtins", "tokenBase", "tokenComment", "tokenInterpolation", "state", "wordRegexp", "words", "wordOperators", "ERRORCLASS", "delimiters", "operators", "identifiers", "stringPrefixes", "keywords", "builtins", "tokenBase", "dedent", "tokenStringFactory", "i", "delimiter", "tokenString", "type", "tokenLexer", "closing", "words", "words", "keywords", "curPunc", "tokenBase", "state", "words", "keywords", "indent", "type", "words", "commonKeywords", "tokenBase", "tokenString", "words", "tokenString", "tokenBase", "commonKeywords", "atoms", "keywords", "punctuation", "tokenBase", "stream", "state", "tokenComment", "pushContext", "type", "popContext", "closing", "words", "normal", "source", "state", "words", "set", "keywords", "atoms", "operators", "tokenBase", "tokenComment", "tokenize", "tokenString", "Context", "pushContext", "popContext", "closing", "c", "wordRegexp", "words", "singleOperators", "singleDelimiters", "doubleOperators", "doubleDelimiters", "tripleDelimiters", "identifiers", "wordOperators", "commonKeywords", "keywords", "types", "stringPrefixes", "opening", "closing", "tokenBase", "tokenStringFactory", "delimiter", "ERRORCLASS", "wordRegexp", "words", "singleOperators", "doubleOperators", "singleDelimiters", "identifiers", "openingKeywords", "middleKeywords", "endKeywords", "wordOperators", "keywords", "atoms", "stringPrefixes", "opening", "middle", "closing", "doubleClosing", "doOpening", "indent", "dedent", "tokenBase", "tokenStringFactory", "delimiter", "tokenLexer", "chain", "string", "c"]
}
